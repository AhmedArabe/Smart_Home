
Smart__Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006c9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003a8  00800060  00006c9a  00006d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800408  00800408  000070d6  2**0
                  ALLOC
  3 .stab         00006264  00000000  00000000  000070d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002383  00000000  00000000  0000d33c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000f6bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000f85f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000fa51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00011e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000131e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000143b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00014578  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001486e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000151dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__vector_10>
      2c:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__vector_13>
      38:	0c 94 91 08 	jmp	0x1122	; 0x1122 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	fc e6       	ldi	r31, 0x6C	; 108
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 30       	cpi	r26, 0x0E	; 14
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 de 2c 	call	0x59bc	; 0x59bc <main>
      8a:	0c 94 4b 36 	jmp	0x6c96	; 0x6c96 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0b 36 	jmp	0x6c16	; 0x6c16 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e0       	ldi	r26, 0x0F	; 15
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 27 36 	jmp	0x6c4e	; 0x6c4e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 17 36 	jmp	0x6c2e	; 0x6c2e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 33 36 	jmp	0x6c66	; 0x6c66 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 17 36 	jmp	0x6c2e	; 0x6c2e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 33 36 	jmp	0x6c66	; 0x6c66 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0b 36 	jmp	0x6c16	; 0x6c16 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e0       	ldi	r24, 0x0F	; 15
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 27 36 	jmp	0x6c4e	; 0x6c4e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 13 36 	jmp	0x6c26	; 0x6c26 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e0       	ldi	r22, 0x0F	; 15
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2f 36 	jmp	0x6c5e	; 0x6c5e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 17 36 	jmp	0x6c2e	; 0x6c2e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 33 36 	jmp	0x6c66	; 0x6c66 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 17 36 	jmp	0x6c2e	; 0x6c2e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 33 36 	jmp	0x6c66	; 0x6c66 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 17 36 	jmp	0x6c2e	; 0x6c2e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 33 36 	jmp	0x6c66	; 0x6c66 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 37 36 	jmp	0x6c6e	; 0x6c6e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 13 36 	jmp	0x6c26	; 0x6c26 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 2f 36 	jmp	0x6c5e	; 0x6c5e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e9 5e       	subi	r30, 0xE9	; 233
     aca:	fd 4f       	sbci	r31, 0xFD	; 253
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_voidInit>:

void __vector_13(void) __attribute__((signal));
void __vector_14(void) __attribute__((signal));

void UART_voidInit(UART_Parity_Mode Parity_Mode,UART_Stop_Bit Stop_bits,UART_Data_size Data_size,u16 Baud_Rate)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	27 97       	sbiw	r28, 0x07	; 7
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	8b 83       	std	Y+3, r24	; 0x03
     e44:	6c 83       	std	Y+4, r22	; 0x04
     e46:	4d 83       	std	Y+5, r20	; 0x05
     e48:	3f 83       	std	Y+7, r19	; 0x07
     e4a:	2e 83       	std	Y+6, r18	; 0x06
	u16 BAUD_PRESCALE =(((8000000 / (Baud_Rate * 16UL))) - 1);
     e4c:	8e 81       	ldd	r24, Y+6	; 0x06
     e4e:	9f 81       	ldd	r25, Y+7	; 0x07
     e50:	cc 01       	movw	r24, r24
     e52:	a0 e0       	ldi	r26, 0x00	; 0
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	aa 1f       	adc	r26, r26
     e5c:	bb 1f       	adc	r27, r27
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	aa 1f       	adc	r26, r26
     e64:	bb 1f       	adc	r27, r27
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	aa 1f       	adc	r26, r26
     e6c:	bb 1f       	adc	r27, r27
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	aa 1f       	adc	r26, r26
     e74:	bb 1f       	adc	r27, r27
     e76:	9c 01       	movw	r18, r24
     e78:	ad 01       	movw	r20, r26
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	92 e1       	ldi	r25, 0x12	; 18
     e7e:	aa e7       	ldi	r26, 0x7A	; 122
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 e9 35 	call	0x6bd2	; 0x6bd2 <__udivmodsi4>
     e8a:	da 01       	movw	r26, r20
     e8c:	c9 01       	movw	r24, r18
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 83       	std	Y+1, r24	; 0x01


	/* Enable receiver and transmitter */
	SET_BIT(UCSRB_REG,TXEN);
     e94:	aa e2       	ldi	r26, 0x2A	; 42
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	ea e2       	ldi	r30, 0x2A	; 42
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	88 60       	ori	r24, 0x08	; 8
     ea0:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG,RXEN);
     ea2:	aa e2       	ldi	r26, 0x2A	; 42
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ea e2       	ldi	r30, 0x2A	; 42
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	80 61       	ori	r24, 0x10	; 16
     eae:	8c 93       	st	X, r24


	/* Set frame format: data,parity ,stop bit */
	CLR_BIT(UCSRC_REG,UMSEL);  //ASync
     eb0:	a0 e4       	ldi	r26, 0x40	; 64
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e0 e4       	ldi	r30, 0x40	; 64
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8f 7b       	andi	r24, 0xBF	; 191
     ebc:	8c 93       	st	X, r24

	/*parity Mode*/
	UCSRC_REG &= 0xCF;
     ebe:	a0 e4       	ldi	r26, 0x40	; 64
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e0 e4       	ldi	r30, 0x40	; 64
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8f 7c       	andi	r24, 0xCF	; 207
     eca:	8c 93       	st	X, r24
	UCSRC_REG |= (Parity_Mode<<4);
     ecc:	a0 e4       	ldi	r26, 0x40	; 64
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e0 e4       	ldi	r30, 0x40	; 64
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	28 2f       	mov	r18, r24
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	82 95       	swap	r24
     ee0:	92 95       	swap	r25
     ee2:	90 7f       	andi	r25, 0xF0	; 240
     ee4:	98 27       	eor	r25, r24
     ee6:	80 7f       	andi	r24, 0xF0	; 240
     ee8:	98 27       	eor	r25, r24
     eea:	82 2b       	or	r24, r18
     eec:	8c 93       	st	X, r24

	/*Stop Bits*/
	UCSRC_REG &= 0xF7;
     eee:	a0 e4       	ldi	r26, 0x40	; 64
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e0 e4       	ldi	r30, 0x40	; 64
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	87 7f       	andi	r24, 0xF7	; 247
     efa:	8c 93       	st	X, r24
	UCSRC_REG |= (Stop_bits<<3);
     efc:	a0 e4       	ldi	r26, 0x40	; 64
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e0 e4       	ldi	r30, 0x40	; 64
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	28 2f       	mov	r18, r24
     f08:	8c 81       	ldd	r24, Y+4	; 0x04
     f0a:	88 2f       	mov	r24, r24
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	82 2b       	or	r24, r18
     f1c:	8c 93       	st	X, r24

	/*Data Size*/
	UCSRC_REG &= 0xF9;
     f1e:	a0 e4       	ldi	r26, 0x40	; 64
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e0 e4       	ldi	r30, 0x40	; 64
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	89 7f       	andi	r24, 0xF9	; 249
     f2a:	8c 93       	st	X, r24
	UCSRC_REG |= (Data_size<<1);
     f2c:	a0 e4       	ldi	r26, 0x40	; 64
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e0 e4       	ldi	r30, 0x40	; 64
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	28 2f       	mov	r18, r24
     f38:	8d 81       	ldd	r24, Y+5	; 0x05
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	82 2b       	or	r24, r18
     f44:	8c 93       	st	X, r24
	UCSRB_REG &= 0xFB;
     f46:	aa e2       	ldi	r26, 0x2A	; 42
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ea e2       	ldi	r30, 0x2A	; 42
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8b 7f       	andi	r24, 0xFB	; 251
     f52:	8c 93       	st	X, r24
	UCSRB_REG |= (Data_size);
     f54:	aa e2       	ldi	r26, 0x2A	; 42
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ea e2       	ldi	r30, 0x2A	; 42
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	90 81       	ld	r25, Z
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	89 2b       	or	r24, r25
     f62:	8c 93       	st	X, r24


	/* Set baud rate */
	UBRRH_REG= (BAUD_PRESCALE>>8);
     f64:	e0 e4       	ldi	r30, 0x40	; 64
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	89 2f       	mov	r24, r25
     f6e:	99 27       	eor	r25, r25
     f70:	80 83       	st	Z, r24
	UBRRL_REG=BAUD_PRESCALE;
     f72:	e9 e2       	ldi	r30, 0x29	; 41
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	80 83       	st	Z, r24



}
     f7a:	27 96       	adiw	r28, 0x07	; 7
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <UART_voidSendDataSync>:
void UART_voidSendDataSync(u8 Copy_u8UARTData)
{
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	0f 92       	push	r0
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while(GET_BIT(UCSRA_REG,UDRE)==0);
     f98:	eb e2       	ldi	r30, 0x2B	; 43
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	82 95       	swap	r24
     fa0:	86 95       	lsr	r24
     fa2:	87 70       	andi	r24, 0x07	; 7
     fa4:	88 2f       	mov	r24, r24
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	81 70       	andi	r24, 0x01	; 1
     faa:	90 70       	andi	r25, 0x00	; 0
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	a1 f3       	breq	.-24     	; 0xf98 <UART_voidSendDataSync+0xc>
	/* Put data into buffer, sends the data */
	UDR_REG = Copy_u8UARTData;
     fb0:	ec e2       	ldi	r30, 0x2C	; 44
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	80 83       	st	Z, r24

}
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <UART_u8ReciveDataSync>:
u8 UART_u8ReciveDataSync()
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA_REG,RXC)==0);
     fc8:	eb e2       	ldi	r30, 0x2B	; 43
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	88 23       	and	r24, r24
     fd0:	dc f7       	brge	.-10     	; 0xfc8 <UART_u8ReciveDataSync+0x8>


	return UDR_REG;
     fd2:	ec e2       	ldi	r30, 0x2C	; 44
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
}
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <UART_voidSendStringSync>:
void UART_voidSendStringSync(u8 *str)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <UART_voidSendStringSync+0x6>
     fe4:	0f 92       	push	r0
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	9b 83       	std	Y+3, r25	; 0x03
     fec:	8a 83       	std	Y+2, r24	; 0x02

	u8 i=0;
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	0e c0       	rjmp	.+28     	; 0x100e <UART_voidSendStringSync+0x30>


	while(str[i]!='.' &&str[i]!='\0')
	{
		UART_voidSendDataSync(str[i]);
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	fc 01       	movw	r30, r24
     ffe:	e2 0f       	add	r30, r18
    1000:	f3 1f       	adc	r31, r19
    1002:	80 81       	ld	r24, Z
    1004:	0e 94 c6 07 	call	0xf8c	; 0xf8c <UART_voidSendDataSync>
		i++;
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	8f 5f       	subi	r24, 0xFF	; 255
    100c:	89 83       	std	Y+1, r24	; 0x01
{

	u8 i=0;


	while(str[i]!='.' &&str[i]!='\0')
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	9b 81       	ldd	r25, Y+3	; 0x03
    1018:	fc 01       	movw	r30, r24
    101a:	e2 0f       	add	r30, r18
    101c:	f3 1f       	adc	r31, r19
    101e:	80 81       	ld	r24, Z
    1020:	8e 32       	cpi	r24, 0x2E	; 46
    1022:	59 f0       	breq	.+22     	; 0x103a <UART_voidSendStringSync+0x5c>
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	9b 81       	ldd	r25, Y+3	; 0x03
    102e:	fc 01       	movw	r30, r24
    1030:	e2 0f       	add	r30, r18
    1032:	f3 1f       	adc	r31, r19
    1034:	80 81       	ld	r24, Z
    1036:	88 23       	and	r24, r24
    1038:	e1 f6       	brne	.-72     	; 0xff2 <UART_voidSendStringSync+0x14>
	{
		UART_voidSendDataSync(str[i]);
		i++;
	}

}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <UART_voidreceiveStringSync>:
void UART_voidreceiveStringSync(u8  *str)
{
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <UART_voidreceiveStringSync+0xa>
    1050:	0f 92       	push	r0
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	9b 83       	std	Y+3, r25	; 0x03
    1058:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    105a:	19 82       	std	Y+1, r1	; 0x01
    105c:	1c c0       	rjmp	.+56     	; 0x1096 <UART_voidreceiveStringSync+0x50>

	while(str[i-1]!=13)
	{

		str[i]=UART_u8ReciveDataSync();
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	9b 81       	ldd	r25, Y+3	; 0x03
    1068:	8c 01       	movw	r16, r24
    106a:	02 0f       	add	r16, r18
    106c:	13 1f       	adc	r17, r19
    106e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <UART_u8ReciveDataSync>
    1072:	f8 01       	movw	r30, r16
    1074:	80 83       	st	Z, r24
	//	UART_voidSendDataSync(str[i]);
		CLCD_voidSendData(str[i]);
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	9b 81       	ldd	r25, Y+3	; 0x03
    1080:	fc 01       	movw	r30, r24
    1082:	e2 0f       	add	r30, r18
    1084:	f3 1f       	adc	r31, r19
    1086:	80 81       	ld	r24, Z
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 a0 2a 	call	0x5540	; 0x5540 <CLCD_voidSendData>
		i++;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	8f 5f       	subi	r24, 0xFF	; 255
    1094:	89 83       	std	Y+1, r24	; 0x01
}
void UART_voidreceiveStringSync(u8  *str)
{
	u8 i=0;

	while(str[i-1]!=13)
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	9c 01       	movw	r18, r24
    109e:	21 50       	subi	r18, 0x01	; 1
    10a0:	30 40       	sbci	r19, 0x00	; 0
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	9b 81       	ldd	r25, Y+3	; 0x03
    10a6:	fc 01       	movw	r30, r24
    10a8:	e2 0f       	add	r30, r18
    10aa:	f3 1f       	adc	r31, r19
    10ac:	80 81       	ld	r24, Z
    10ae:	8d 30       	cpi	r24, 0x0D	; 13
    10b0:	b1 f6       	brne	.-84     	; 0x105e <UART_voidreceiveStringSync+0x18>
		str[i]=UART_u8ReciveDataSync();
	//	UART_voidSendDataSync(str[i]);
		CLCD_voidSendData(str[i]);
		i++;
	}
	str[i-1]='\0';
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9c 01       	movw	r18, r24
    10ba:	21 50       	subi	r18, 0x01	; 1
    10bc:	30 40       	sbci	r19, 0x00	; 0
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	9b 81       	ldd	r25, Y+3	; 0x03
    10c2:	fc 01       	movw	r30, r24
    10c4:	e2 0f       	add	r30, r18
    10c6:	f3 1f       	adc	r31, r19
    10c8:	10 82       	st	Z, r1
}
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	08 95       	ret

000010da <UART_voidSendDataASync>:

void UART_voidSendDataASync(u8 Copy_u8UARTData)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	0f 92       	push	r0
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	89 83       	std	Y+1, r24	; 0x01

	/*Enable PIE*/
	SET_BIT(UCSRB_REG,UDRIE);
    10e6:	aa e2       	ldi	r26, 0x2A	; 42
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	ea e2       	ldi	r30, 0x2A	; 42
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	80 62       	ori	r24, 0x20	; 32
    10f2:	8c 93       	st	X, r24

	/* Put data into buffer, sends the data */
	Dummy_SendData = Copy_u8UARTData;
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	80 93 08 04 	sts	0x0408, r24
}
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <UART_u8ReciveDataASync>:
u8 UART_u8ReciveDataASync()
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62

	/*Enable PIE*/
	SET_BIT(UCSRB_REG,RXCIE);
    110a:	aa e2       	ldi	r26, 0x2A	; 42
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	ea e2       	ldi	r30, 0x2A	; 42
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	80 68       	ori	r24, 0x80	; 128
    1116:	8c 93       	st	X, r24
return Dummy_RecieveData;
    1118:	80 91 0d 04 	lds	r24, 0x040D



}
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <__vector_14>:

void __vector_14(void)
{
    1122:	1f 92       	push	r1
    1124:	0f 92       	push	r0
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	0f 92       	push	r0
    112a:	11 24       	eor	r1, r1
    112c:	8f 93       	push	r24
    112e:	af 93       	push	r26
    1130:	bf 93       	push	r27
    1132:	ef 93       	push	r30
    1134:	ff 93       	push	r31
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62


	UDR_REG = Dummy_SendData;
    113e:	ec e2       	ldi	r30, 0x2C	; 44
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 91 08 04 	lds	r24, 0x0408
    1146:	80 83       	st	Z, r24
	CLR_BIT(UCSRB_REG,UDRIE);
    1148:	aa e2       	ldi	r26, 0x2A	; 42
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	ea e2       	ldi	r30, 0x2A	; 42
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8f 7d       	andi	r24, 0xDF	; 223
    1154:	8c 93       	st	X, r24

}
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	ff 91       	pop	r31
    115c:	ef 91       	pop	r30
    115e:	bf 91       	pop	r27
    1160:	af 91       	pop	r26
    1162:	8f 91       	pop	r24
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	0f 90       	pop	r0
    116a:	1f 90       	pop	r1
    116c:	18 95       	reti

0000116e <__vector_13>:
void __vector_13(void)
{
    116e:	1f 92       	push	r1
    1170:	0f 92       	push	r0
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	0f 92       	push	r0
    1176:	11 24       	eor	r1, r1
    1178:	8f 93       	push	r24
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62

	Dummy_RecieveData = UDR_REG;
    1186:	ec e2       	ldi	r30, 0x2C	; 44
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 93 0d 04 	sts	0x040D, r24
}
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	ff 91       	pop	r31
    1196:	ef 91       	pop	r30
    1198:	8f 91       	pop	r24
    119a:	0f 90       	pop	r0
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	0f 90       	pop	r0
    11a0:	1f 90       	pop	r1
    11a2:	18 95       	reti

000011a4 <T1_voidInit>:
void __vector_7	(void)  __attribute((signal));



void T1_voidInit(TIMER1_CONFIG *Ptr_Str)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <T1_voidInit+0x6>
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <T1_voidInit+0x8>
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <T1_voidInit+0xa>
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	9a 83       	std	Y+2, r25	; 0x02
    11b4:	89 83       	std	Y+1, r24	; 0x01
	if((Ptr_Str ->T1_WF_MODE ==T1_NORMAL_MODE) ||(Ptr_Str ->T1_WF_MODE ==T1_CTC1_MODE)||(Ptr_Str ->T1_WF_MODE ==T1_CTC2_MODE))
    11b6:	e9 81       	ldd	r30, Y+1	; 0x01
    11b8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ba:	80 81       	ld	r24, Z
    11bc:	88 23       	and	r24, r24
    11be:	51 f0       	breq	.+20     	; 0x11d4 <T1_voidInit+0x30>
    11c0:	e9 81       	ldd	r30, Y+1	; 0x01
    11c2:	fa 81       	ldd	r31, Y+2	; 0x02
    11c4:	80 81       	ld	r24, Z
    11c6:	84 30       	cpi	r24, 0x04	; 4
    11c8:	29 f0       	breq	.+10     	; 0x11d4 <T1_voidInit+0x30>
    11ca:	e9 81       	ldd	r30, Y+1	; 0x01
    11cc:	fa 81       	ldd	r31, Y+2	; 0x02
    11ce:	80 81       	ld	r24, Z
    11d0:	8c 30       	cpi	r24, 0x0C	; 12
    11d2:	79 f4       	brne	.+30     	; 0x11f2 <T1_voidInit+0x4e>
	{
		SET_BIT(TCCR1A_REG,FOC1A);
    11d4:	af e4       	ldi	r26, 0x4F	; 79
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ef e4       	ldi	r30, 0x4F	; 79
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	88 60       	ori	r24, 0x08	; 8
    11e0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,FOC1B);
    11e2:	af e4       	ldi	r26, 0x4F	; 79
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	ef e4       	ldi	r30, 0x4F	; 79
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	84 60       	ori	r24, 0x04	; 4
    11ee:	8c 93       	st	X, r24
    11f0:	0e c0       	rjmp	.+28     	; 0x120e <T1_voidInit+0x6a>
	}else
	{
		CLR_BIT(TCCR1A_REG,FOC1B);
    11f2:	af e4       	ldi	r26, 0x4F	; 79
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	ef e4       	ldi	r30, 0x4F	; 79
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8b 7f       	andi	r24, 0xFB	; 251
    11fe:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,FOC1A);
    1200:	af e4       	ldi	r26, 0x4F	; 79
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	ef e4       	ldi	r30, 0x4F	; 79
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	87 7f       	andi	r24, 0xF7	; 247
    120c:	8c 93       	st	X, r24


	}

	//Select Operating Wave Form Mode
	TCCR1A_REG&=0xFC;
    120e:	af e4       	ldi	r26, 0x4F	; 79
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	ef e4       	ldi	r30, 0x4F	; 79
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	8c 7f       	andi	r24, 0xFC	; 252
    121a:	8c 93       	st	X, r24
	TCCR1A_REG|=Ptr_Str->T1_WF_MODE;
    121c:	af e4       	ldi	r26, 0x4F	; 79
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	ef e4       	ldi	r30, 0x4F	; 79
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	90 81       	ld	r25, Z
    1226:	e9 81       	ldd	r30, Y+1	; 0x01
    1228:	fa 81       	ldd	r31, Y+2	; 0x02
    122a:	80 81       	ld	r24, Z
    122c:	89 2b       	or	r24, r25
    122e:	8c 93       	st	X, r24
	TCCR1B_REG &=0xE7;
    1230:	ae e4       	ldi	r26, 0x4E	; 78
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	ee e4       	ldi	r30, 0x4E	; 78
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	87 7e       	andi	r24, 0xE7	; 231
    123c:	8c 93       	st	X, r24
	TCCR1B_REG|=((Ptr_Str->T1_WF_MODE)<<1);
    123e:	ae e4       	ldi	r26, 0x4E	; 78
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	ee e4       	ldi	r30, 0x4E	; 78
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	28 2f       	mov	r18, r24
    124a:	e9 81       	ldd	r30, Y+1	; 0x01
    124c:	fa 81       	ldd	r31, Y+2	; 0x02
    124e:	80 81       	ld	r24, Z
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	82 2b       	or	r24, r18
    125a:	8c 93       	st	X, r24



	//Select CLock
	TCCR1B_REG &=0xf8;
    125c:	ae e4       	ldi	r26, 0x4E	; 78
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	ee e4       	ldi	r30, 0x4E	; 78
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	88 7f       	andi	r24, 0xF8	; 248
    1268:	8c 93       	st	X, r24
	TCCR1B_REG |= (Ptr_Str->T1_CLOCK_MODE);
    126a:	ae e4       	ldi	r26, 0x4E	; 78
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	ee e4       	ldi	r30, 0x4E	; 78
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	90 81       	ld	r25, Z
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	80 85       	ldd	r24, Z+8	; 0x08
    127a:	89 2b       	or	r24, r25
    127c:	8c 93       	st	X, r24
	//Select OC1A Mode


	//Choose Polling Or Interrupt
	//Enable PIE
	switch(Ptr_Str->T1_TECHNIQUE)
    127e:	e9 81       	ldd	r30, Y+1	; 0x01
    1280:	fa 81       	ldd	r31, Y+2	; 0x02
    1282:	81 85       	ldd	r24, Z+9	; 0x09
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	3e 83       	std	Y+6, r19	; 0x06
    128a:	2d 83       	std	Y+5, r18	; 0x05
    128c:	8d 81       	ldd	r24, Y+5	; 0x05
    128e:	9e 81       	ldd	r25, Y+6	; 0x06
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	09 f4       	brne	.+2      	; 0x1296 <T1_voidInit+0xf2>
    1294:	3f c0       	rjmp	.+126    	; 0x1314 <T1_voidInit+0x170>
    1296:	2d 81       	ldd	r18, Y+5	; 0x05
    1298:	3e 81       	ldd	r19, Y+6	; 0x06
    129a:	21 30       	cpi	r18, 0x01	; 1
    129c:	31 05       	cpc	r19, r1
    129e:	d1 f5       	brne	.+116    	; 0x1314 <T1_voidInit+0x170>
	{
	case T1_Polling:
		break;

	case T1_Interrupt:
		switch(Ptr_Str->T1_WF_MODE)
    12a0:	e9 81       	ldd	r30, Y+1	; 0x01
    12a2:	fa 81       	ldd	r31, Y+2	; 0x02
    12a4:	80 81       	ld	r24, Z
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	3c 83       	std	Y+4, r19	; 0x04
    12ac:	2b 83       	std	Y+3, r18	; 0x03
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	84 30       	cpi	r24, 0x04	; 4
    12b4:	91 05       	cpc	r25, r1
    12b6:	89 f0       	breq	.+34     	; 0x12da <T1_voidInit+0x136>
    12b8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ba:	3c 81       	ldd	r19, Y+4	; 0x04
    12bc:	2c 30       	cpi	r18, 0x0C	; 12
    12be:	31 05       	cpc	r19, r1
    12c0:	d9 f0       	breq	.+54     	; 0x12f8 <T1_voidInit+0x154>
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	29 f5       	brne	.+74     	; 0x1314 <T1_voidInit+0x170>
		{
		case T1_NORMAL_MODE:
			SET_BIT(TIMSK_REG,TOIE1);
    12ca:	a9 e5       	ldi	r26, 0x59	; 89
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e9 e5       	ldi	r30, 0x59	; 89
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	84 60       	ori	r24, 0x04	; 4
    12d6:	8c 93       	st	X, r24
    12d8:	1d c0       	rjmp	.+58     	; 0x1314 <T1_voidInit+0x170>
			break;

		case T1_CTC1_MODE:
			SET_BIT(TIMSK_REG,OCIE1B);
    12da:	a9 e5       	ldi	r26, 0x59	; 89
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e9 e5       	ldi	r30, 0x59	; 89
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	88 60       	ori	r24, 0x08	; 8
    12e6:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,OCIE1A);
    12e8:	a9 e5       	ldi	r26, 0x59	; 89
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e9 e5       	ldi	r30, 0x59	; 89
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	80 61       	ori	r24, 0x10	; 16
    12f4:	8c 93       	st	X, r24
    12f6:	0e c0       	rjmp	.+28     	; 0x1314 <T1_voidInit+0x170>
			break;

		case T1_CTC2_MODE:
			SET_BIT(TIMSK_REG,OCIE1B);
    12f8:	a9 e5       	ldi	r26, 0x59	; 89
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e9 e5       	ldi	r30, 0x59	; 89
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	88 60       	ori	r24, 0x08	; 8
    1304:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,OCIE1A);
    1306:	a9 e5       	ldi	r26, 0x59	; 89
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e9 e5       	ldi	r30, 0x59	; 89
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	80 61       	ori	r24, 0x10	; 16
    1312:	8c 93       	st	X, r24
		}
		break;
	}


}
    1314:	26 96       	adiw	r28, 0x06	; 6
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <T1_voidStartTimer>:
void T1_voidStartTimer(TIMER1_CONFIG *Ptr_Str)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	2a 97       	sbiw	r28, 0x0a	; 10
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	9a 83       	std	Y+2, r25	; 0x02
    133c:	89 83       	std	Y+1, r24	; 0x01

	switch(Ptr_Str->T1_Channel)
    133e:	e9 81       	ldd	r30, Y+1	; 0x01
    1340:	fa 81       	ldd	r31, Y+2	; 0x02
    1342:	81 81       	ldd	r24, Z+1	; 0x01
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3a 87       	std	Y+10, r19	; 0x0a
    134a:	29 87       	std	Y+9, r18	; 0x09
    134c:	89 85       	ldd	r24, Y+9	; 0x09
    134e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	39 f0       	breq	.+14     	; 0x1362 <T1_voidStartTimer+0x3c>
    1354:	29 85       	ldd	r18, Y+9	; 0x09
    1356:	3a 85       	ldd	r19, Y+10	; 0x0a
    1358:	21 30       	cpi	r18, 0x01	; 1
    135a:	31 05       	cpc	r19, r1
    135c:	09 f4       	brne	.+2      	; 0x1360 <T1_voidStartTimer+0x3a>
    135e:	e4 c0       	rjmp	.+456    	; 0x1528 <T1_voidStartTimer+0x202>
    1360:	b4 c1       	rjmp	.+872    	; 0x16ca <T1_voidStartTimer+0x3a4>
	{

	case T1_ChannelA:

		switch(Ptr_Str->T1_WF_MODE)
    1362:	e9 81       	ldd	r30, Y+1	; 0x01
    1364:	fa 81       	ldd	r31, Y+2	; 0x02
    1366:	80 81       	ld	r24, Z
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	38 87       	std	Y+8, r19	; 0x08
    136e:	2f 83       	std	Y+7, r18	; 0x07
    1370:	8f 81       	ldd	r24, Y+7	; 0x07
    1372:	98 85       	ldd	r25, Y+8	; 0x08
    1374:	84 30       	cpi	r24, 0x04	; 4
    1376:	91 05       	cpc	r25, r1
    1378:	d9 f1       	breq	.+118    	; 0x13f0 <T1_voidStartTimer+0xca>
    137a:	2f 81       	ldd	r18, Y+7	; 0x07
    137c:	38 85       	ldd	r19, Y+8	; 0x08
    137e:	25 30       	cpi	r18, 0x05	; 5
    1380:	31 05       	cpc	r19, r1
    1382:	2c f4       	brge	.+10     	; 0x138e <T1_voidStartTimer+0x68>
    1384:	8f 81       	ldd	r24, Y+7	; 0x07
    1386:	98 85       	ldd	r25, Y+8	; 0x08
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	71 f0       	breq	.+28     	; 0x13a8 <T1_voidStartTimer+0x82>
    138c:	9e c1       	rjmp	.+828    	; 0x16ca <T1_voidStartTimer+0x3a4>
    138e:	2f 81       	ldd	r18, Y+7	; 0x07
    1390:	38 85       	ldd	r19, Y+8	; 0x08
    1392:	2a 30       	cpi	r18, 0x0A	; 10
    1394:	31 05       	cpc	r19, r1
    1396:	09 f4       	brne	.+2      	; 0x139a <T1_voidStartTimer+0x74>
    1398:	79 c0       	rjmp	.+242    	; 0x148c <T1_voidStartTimer+0x166>
    139a:	8f 81       	ldd	r24, Y+7	; 0x07
    139c:	98 85       	ldd	r25, Y+8	; 0x08
    139e:	8e 30       	cpi	r24, 0x0E	; 14
    13a0:	91 05       	cpc	r25, r1
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <T1_voidStartTimer+0x80>
    13a4:	9a c0       	rjmp	.+308    	; 0x14da <T1_voidStartTimer+0x1b4>
    13a6:	91 c1       	rjmp	.+802    	; 0x16ca <T1_voidStartTimer+0x3a4>
		{
		case T1_NORMAL_MODE:
			TCNT1_REG	= Ptr_Str->T1_Preload_value;
    13a8:	ac e4       	ldi	r26, 0x4C	; 76
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e9 81       	ldd	r30, Y+1	; 0x01
    13ae:	fa 81       	ldd	r31, Y+2	; 0x02
    13b0:	82 85       	ldd	r24, Z+10	; 0x0a
    13b2:	93 85       	ldd	r25, Z+11	; 0x0b
    13b4:	11 96       	adiw	r26, 0x01	; 1
    13b6:	9c 93       	st	X, r25
    13b8:	8e 93       	st	-X, r24
			switch(Ptr_Str->T1_TECHNIQUE)
    13ba:	e9 81       	ldd	r30, Y+1	; 0x01
    13bc:	fa 81       	ldd	r31, Y+2	; 0x02
    13be:	81 85       	ldd	r24, Z+9	; 0x09
    13c0:	88 2f       	mov	r24, r24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	09 f0       	breq	.+2      	; 0x13ca <T1_voidStartTimer+0xa4>
    13c8:	80 c1       	rjmp	.+768    	; 0x16ca <T1_voidStartTimer+0x3a4>
			{
			case T1_Polling:
				//wait till flag
				while(GET_BIT(TIFR_REG,TOV1) ==0);
    13ca:	e8 e5       	ldi	r30, 0x58	; 88
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	86 95       	lsr	r24
    13d2:	86 95       	lsr	r24
    13d4:	88 2f       	mov	r24, r24
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	81 70       	andi	r24, 0x01	; 1
    13da:	90 70       	andi	r25, 0x00	; 0
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	a9 f3       	breq	.-22     	; 0x13ca <T1_voidStartTimer+0xa4>
				//clear flag
				SET_BIT(TIFR_REG,TOV1);
    13e0:	a8 e5       	ldi	r26, 0x58	; 88
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e8 e5       	ldi	r30, 0x58	; 88
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	84 60       	ori	r24, 0x04	; 4
    13ec:	8c 93       	st	X, r24
    13ee:	6d c1       	rjmp	.+730    	; 0x16ca <T1_voidStartTimer+0x3a4>

			}
			break;

			case T1_CTC1_MODE:
				OCR1A_REG	= Ptr_Str->T1_Compare_value;
    13f0:	aa e4       	ldi	r26, 0x4A	; 74
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e9 81       	ldd	r30, Y+1	; 0x01
    13f6:	fa 81       	ldd	r31, Y+2	; 0x02
    13f8:	84 85       	ldd	r24, Z+12	; 0x0c
    13fa:	95 85       	ldd	r25, Z+13	; 0x0d
    13fc:	11 96       	adiw	r26, 0x01	; 1
    13fe:	9c 93       	st	X, r25
    1400:	8e 93       	st	-X, r24
				TCCR1A_REG &=0x3F;
    1402:	af e4       	ldi	r26, 0x4F	; 79
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	ef e4       	ldi	r30, 0x4F	; 79
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	8f 73       	andi	r24, 0x3F	; 63
    140e:	8c 93       	st	X, r24
				TCCR1A_REG |= ((Ptr_Str->T1_CTC_OC1A)<<6);
    1410:	af e4       	ldi	r26, 0x4F	; 79
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ef e4       	ldi	r30, 0x4F	; 79
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	28 2f       	mov	r18, r24
    141c:	e9 81       	ldd	r30, Y+1	; 0x01
    141e:	fa 81       	ldd	r31, Y+2	; 0x02
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	88 2f       	mov	r24, r24
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	00 24       	eor	r0, r0
    1428:	96 95       	lsr	r25
    142a:	87 95       	ror	r24
    142c:	07 94       	ror	r0
    142e:	96 95       	lsr	r25
    1430:	87 95       	ror	r24
    1432:	07 94       	ror	r0
    1434:	98 2f       	mov	r25, r24
    1436:	80 2d       	mov	r24, r0
    1438:	82 2b       	or	r24, r18
    143a:	8c 93       	st	X, r24

				switch(Ptr_Str->T1_TECHNIQUE)
    143c:	e9 81       	ldd	r30, Y+1	; 0x01
    143e:	fa 81       	ldd	r31, Y+2	; 0x02
    1440:	81 85       	ldd	r24, Z+9	; 0x09
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3e 83       	std	Y+6, r19	; 0x06
    1448:	2d 83       	std	Y+5, r18	; 0x05
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	31 f0       	breq	.+12     	; 0x145e <T1_voidStartTimer+0x138>
    1452:	2d 81       	ldd	r18, Y+5	; 0x05
    1454:	3e 81       	ldd	r19, Y+6	; 0x06
    1456:	21 30       	cpi	r18, 0x01	; 1
    1458:	31 05       	cpc	r19, r1
    145a:	a1 f0       	breq	.+40     	; 0x1484 <T1_voidStartTimer+0x15e>
    145c:	36 c1       	rjmp	.+620    	; 0x16ca <T1_voidStartTimer+0x3a4>
				{
				case T1_Polling:
					//wait till flag
					while(GET_BIT(TIFR_REG,OCF1A) ==0);
    145e:	e8 e5       	ldi	r30, 0x58	; 88
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	82 95       	swap	r24
    1466:	8f 70       	andi	r24, 0x0F	; 15
    1468:	88 2f       	mov	r24, r24
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	81 70       	andi	r24, 0x01	; 1
    146e:	90 70       	andi	r25, 0x00	; 0
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	a9 f3       	breq	.-22     	; 0x145e <T1_voidStartTimer+0x138>
					//clear flag
					SET_BIT(TIFR_REG,OCF1A);
    1474:	a8 e5       	ldi	r26, 0x58	; 88
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e8 e5       	ldi	r30, 0x58	; 88
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	80 61       	ori	r24, 0x10	; 16
    1480:	8c 93       	st	X, r24
    1482:	23 c1       	rjmp	.+582    	; 0x16ca <T1_voidStartTimer+0x3a4>


				case T1_Interrupt:
					//ISR Will Do The Work

					CLCD_voidSendData('1');
    1484:	81 e3       	ldi	r24, 0x31	; 49
    1486:	0e 94 a0 2a 	call	0x5540	; 0x5540 <CLCD_voidSendData>
    148a:	1f c1       	rjmp	.+574    	; 0x16ca <T1_voidStartTimer+0x3a4>
					break;
				}
				break;

				case T1_PHASE_Correct1_MODE:
					OCR1A_REG	= Ptr_Str->T1_Compare_value;
    148c:	aa e4       	ldi	r26, 0x4A	; 74
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e9 81       	ldd	r30, Y+1	; 0x01
    1492:	fa 81       	ldd	r31, Y+2	; 0x02
    1494:	84 85       	ldd	r24, Z+12	; 0x0c
    1496:	95 85       	ldd	r25, Z+13	; 0x0d
    1498:	11 96       	adiw	r26, 0x01	; 1
    149a:	9c 93       	st	X, r25
    149c:	8e 93       	st	-X, r24
					TCCR1A_REG &=0x3F;
    149e:	af e4       	ldi	r26, 0x4F	; 79
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ef e4       	ldi	r30, 0x4F	; 79
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	8f 73       	andi	r24, 0x3F	; 63
    14aa:	8c 93       	st	X, r24
					TCCR1A_REG |= ((Ptr_Str->T1_PHASE_OC1A)<<6);
    14ac:	af e4       	ldi	r26, 0x4F	; 79
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	ef e4       	ldi	r30, 0x4F	; 79
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	28 2f       	mov	r18, r24
    14b8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ba:	fa 81       	ldd	r31, Y+2	; 0x02
    14bc:	86 81       	ldd	r24, Z+6	; 0x06
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	00 24       	eor	r0, r0
    14c4:	96 95       	lsr	r25
    14c6:	87 95       	ror	r24
    14c8:	07 94       	ror	r0
    14ca:	96 95       	lsr	r25
    14cc:	87 95       	ror	r24
    14ce:	07 94       	ror	r0
    14d0:	98 2f       	mov	r25, r24
    14d2:	80 2d       	mov	r24, r0
    14d4:	82 2b       	or	r24, r18
    14d6:	8c 93       	st	X, r24
    14d8:	f8 c0       	rjmp	.+496    	; 0x16ca <T1_voidStartTimer+0x3a4>

					break;


				case T1_FAST_PWM_1:
					OCR1A_REG	= Ptr_Str->T1_Compare_value;
    14da:	aa e4       	ldi	r26, 0x4A	; 74
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e9 81       	ldd	r30, Y+1	; 0x01
    14e0:	fa 81       	ldd	r31, Y+2	; 0x02
    14e2:	84 85       	ldd	r24, Z+12	; 0x0c
    14e4:	95 85       	ldd	r25, Z+13	; 0x0d
    14e6:	11 96       	adiw	r26, 0x01	; 1
    14e8:	9c 93       	st	X, r25
    14ea:	8e 93       	st	-X, r24
					TCCR1A_REG &=0x3F;
    14ec:	af e4       	ldi	r26, 0x4F	; 79
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ef e4       	ldi	r30, 0x4F	; 79
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	8f 73       	andi	r24, 0x3F	; 63
    14f8:	8c 93       	st	X, r24
					TCCR1A_REG |= ((Ptr_Str->T1_FASTPWM_OC1A)<<6);
    14fa:	af e4       	ldi	r26, 0x4F	; 79
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ef e4       	ldi	r30, 0x4F	; 79
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	28 2f       	mov	r18, r24
    1506:	e9 81       	ldd	r30, Y+1	; 0x01
    1508:	fa 81       	ldd	r31, Y+2	; 0x02
    150a:	84 81       	ldd	r24, Z+4	; 0x04
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	00 24       	eor	r0, r0
    1512:	96 95       	lsr	r25
    1514:	87 95       	ror	r24
    1516:	07 94       	ror	r0
    1518:	96 95       	lsr	r25
    151a:	87 95       	ror	r24
    151c:	07 94       	ror	r0
    151e:	98 2f       	mov	r25, r24
    1520:	80 2d       	mov	r24, r0
    1522:	82 2b       	or	r24, r18
    1524:	8c 93       	st	X, r24
    1526:	d1 c0       	rjmp	.+418    	; 0x16ca <T1_voidStartTimer+0x3a4>
		break;


		case T1_ChannelB:

			switch(Ptr_Str->T1_WF_MODE)
    1528:	e9 81       	ldd	r30, Y+1	; 0x01
    152a:	fa 81       	ldd	r31, Y+2	; 0x02
    152c:	80 81       	ld	r24, Z
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	3c 83       	std	Y+4, r19	; 0x04
    1534:	2b 83       	std	Y+3, r18	; 0x03
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	84 30       	cpi	r24, 0x04	; 4
    153c:	91 05       	cpc	r25, r1
    153e:	d9 f1       	breq	.+118    	; 0x15b6 <T1_voidStartTimer+0x290>
    1540:	2b 81       	ldd	r18, Y+3	; 0x03
    1542:	3c 81       	ldd	r19, Y+4	; 0x04
    1544:	25 30       	cpi	r18, 0x05	; 5
    1546:	31 05       	cpc	r19, r1
    1548:	2c f4       	brge	.+10     	; 0x1554 <T1_voidStartTimer+0x22e>
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	9c 81       	ldd	r25, Y+4	; 0x04
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	71 f0       	breq	.+28     	; 0x156e <T1_voidStartTimer+0x248>
    1552:	bb c0       	rjmp	.+374    	; 0x16ca <T1_voidStartTimer+0x3a4>
    1554:	2b 81       	ldd	r18, Y+3	; 0x03
    1556:	3c 81       	ldd	r19, Y+4	; 0x04
    1558:	2a 30       	cpi	r18, 0x0A	; 10
    155a:	31 05       	cpc	r19, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <T1_voidStartTimer+0x23a>
    155e:	6a c0       	rjmp	.+212    	; 0x1634 <T1_voidStartTimer+0x30e>
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	9c 81       	ldd	r25, Y+4	; 0x04
    1564:	8e 30       	cpi	r24, 0x0E	; 14
    1566:	91 05       	cpc	r25, r1
    1568:	09 f4       	brne	.+2      	; 0x156c <T1_voidStartTimer+0x246>
    156a:	88 c0       	rjmp	.+272    	; 0x167c <T1_voidStartTimer+0x356>
    156c:	ae c0       	rjmp	.+348    	; 0x16ca <T1_voidStartTimer+0x3a4>
			{
			case T1_NORMAL_MODE:
				TCNT1_REG	= Ptr_Str->T1_Preload_value;
    156e:	ac e4       	ldi	r26, 0x4C	; 76
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e9 81       	ldd	r30, Y+1	; 0x01
    1574:	fa 81       	ldd	r31, Y+2	; 0x02
    1576:	82 85       	ldd	r24, Z+10	; 0x0a
    1578:	93 85       	ldd	r25, Z+11	; 0x0b
    157a:	11 96       	adiw	r26, 0x01	; 1
    157c:	9c 93       	st	X, r25
    157e:	8e 93       	st	-X, r24
				switch(Ptr_Str->T1_TECHNIQUE)
    1580:	e9 81       	ldd	r30, Y+1	; 0x01
    1582:	fa 81       	ldd	r31, Y+2	; 0x02
    1584:	81 85       	ldd	r24, Z+9	; 0x09
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	09 f0       	breq	.+2      	; 0x1590 <T1_voidStartTimer+0x26a>
    158e:	9d c0       	rjmp	.+314    	; 0x16ca <T1_voidStartTimer+0x3a4>
				{
				case T1_Polling:
					//wait till flag
					while(GET_BIT(TIFR_REG,TOV1) ==0);
    1590:	e8 e5       	ldi	r30, 0x58	; 88
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	86 95       	lsr	r24
    1598:	86 95       	lsr	r24
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	81 70       	andi	r24, 0x01	; 1
    15a0:	90 70       	andi	r25, 0x00	; 0
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	a9 f3       	breq	.-22     	; 0x1590 <T1_voidStartTimer+0x26a>
					//clear flag
					SET_BIT(TIFR_REG,TOV1);
    15a6:	a8 e5       	ldi	r26, 0x58	; 88
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e8 e5       	ldi	r30, 0x58	; 88
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	84 60       	ori	r24, 0x04	; 4
    15b2:	8c 93       	st	X, r24
    15b4:	8a c0       	rjmp	.+276    	; 0x16ca <T1_voidStartTimer+0x3a4>

				}
				break;

				case T1_CTC1_MODE:
					OCR1B_REG	= Ptr_Str->T1_Compare_value;
    15b6:	a8 e4       	ldi	r26, 0x48	; 72
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e9 81       	ldd	r30, Y+1	; 0x01
    15bc:	fa 81       	ldd	r31, Y+2	; 0x02
    15be:	84 85       	ldd	r24, Z+12	; 0x0c
    15c0:	95 85       	ldd	r25, Z+13	; 0x0d
    15c2:	11 96       	adiw	r26, 0x01	; 1
    15c4:	9c 93       	st	X, r25
    15c6:	8e 93       	st	-X, r24
					TCCR1A_REG &=0xCF;
    15c8:	af e4       	ldi	r26, 0x4F	; 79
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	ef e4       	ldi	r30, 0x4F	; 79
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 7c       	andi	r24, 0xCF	; 207
    15d4:	8c 93       	st	X, r24
					TCCR1A_REG |= ((Ptr_Str->T1_CTC_OC1B)<<4);
    15d6:	af e4       	ldi	r26, 0x4F	; 79
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	ef e4       	ldi	r30, 0x4F	; 79
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	28 2f       	mov	r18, r24
    15e2:	e9 81       	ldd	r30, Y+1	; 0x01
    15e4:	fa 81       	ldd	r31, Y+2	; 0x02
    15e6:	83 81       	ldd	r24, Z+3	; 0x03
    15e8:	88 2f       	mov	r24, r24
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	82 95       	swap	r24
    15ee:	92 95       	swap	r25
    15f0:	90 7f       	andi	r25, 0xF0	; 240
    15f2:	98 27       	eor	r25, r24
    15f4:	80 7f       	andi	r24, 0xF0	; 240
    15f6:	98 27       	eor	r25, r24
    15f8:	82 2b       	or	r24, r18
    15fa:	8c 93       	st	X, r24
					switch(Ptr_Str->T1_TECHNIQUE)
    15fc:	e9 81       	ldd	r30, Y+1	; 0x01
    15fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1600:	81 85       	ldd	r24, Z+9	; 0x09
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	09 f0       	breq	.+2      	; 0x160c <T1_voidStartTimer+0x2e6>
    160a:	5f c0       	rjmp	.+190    	; 0x16ca <T1_voidStartTimer+0x3a4>
					{
					case T1_Polling:
						//wait till flag
						while(GET_BIT(TIFR_REG,OCF1B) ==0);
    160c:	e8 e5       	ldi	r30, 0x58	; 88
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	86 95       	lsr	r24
    1614:	86 95       	lsr	r24
    1616:	86 95       	lsr	r24
    1618:	88 2f       	mov	r24, r24
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	81 70       	andi	r24, 0x01	; 1
    161e:	90 70       	andi	r25, 0x00	; 0
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	a1 f3       	breq	.-24     	; 0x160c <T1_voidStartTimer+0x2e6>
						//clear flag
						SET_BIT(TIFR_REG,OCF1B);
    1624:	a8 e5       	ldi	r26, 0x58	; 88
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e8 e5       	ldi	r30, 0x58	; 88
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	88 60       	ori	r24, 0x08	; 8
    1630:	8c 93       	st	X, r24
    1632:	4b c0       	rjmp	.+150    	; 0x16ca <T1_voidStartTimer+0x3a4>
						break;
					}
					break;

					case T1_PHASE_Correct1_MODE:
						OCR1B_REG	= Ptr_Str->T1_Compare_value;
    1634:	a8 e4       	ldi	r26, 0x48	; 72
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e9 81       	ldd	r30, Y+1	; 0x01
    163a:	fa 81       	ldd	r31, Y+2	; 0x02
    163c:	84 85       	ldd	r24, Z+12	; 0x0c
    163e:	95 85       	ldd	r25, Z+13	; 0x0d
    1640:	11 96       	adiw	r26, 0x01	; 1
    1642:	9c 93       	st	X, r25
    1644:	8e 93       	st	-X, r24
						TCCR1A_REG &=0xCF;
    1646:	af e4       	ldi	r26, 0x4F	; 79
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	ef e4       	ldi	r30, 0x4F	; 79
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	8f 7c       	andi	r24, 0xCF	; 207
    1652:	8c 93       	st	X, r24
						TCCR1A_REG |= ((Ptr_Str->T1_PHASE_OC1B)<<4);
    1654:	af e4       	ldi	r26, 0x4F	; 79
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	ef e4       	ldi	r30, 0x4F	; 79
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	28 2f       	mov	r18, r24
    1660:	e9 81       	ldd	r30, Y+1	; 0x01
    1662:	fa 81       	ldd	r31, Y+2	; 0x02
    1664:	87 81       	ldd	r24, Z+7	; 0x07
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	82 95       	swap	r24
    166c:	92 95       	swap	r25
    166e:	90 7f       	andi	r25, 0xF0	; 240
    1670:	98 27       	eor	r25, r24
    1672:	80 7f       	andi	r24, 0xF0	; 240
    1674:	98 27       	eor	r25, r24
    1676:	82 2b       	or	r24, r18
    1678:	8c 93       	st	X, r24
    167a:	27 c0       	rjmp	.+78     	; 0x16ca <T1_voidStartTimer+0x3a4>

						break;


					case T1_FAST_PWM_1:
						OCR1B_REG	= Ptr_Str->T1_Compare_value;
    167c:	a8 e4       	ldi	r26, 0x48	; 72
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e9 81       	ldd	r30, Y+1	; 0x01
    1682:	fa 81       	ldd	r31, Y+2	; 0x02
    1684:	84 85       	ldd	r24, Z+12	; 0x0c
    1686:	95 85       	ldd	r25, Z+13	; 0x0d
    1688:	11 96       	adiw	r26, 0x01	; 1
    168a:	9c 93       	st	X, r25
    168c:	8e 93       	st	-X, r24
						CLCD_voidSendString((u8*)"ChannelB");
    168e:	80 e6       	ldi	r24, 0x60	; 96
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
						TCCR1A_REG &=0xCF;
    1696:	af e4       	ldi	r26, 0x4F	; 79
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	ef e4       	ldi	r30, 0x4F	; 79
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8f 7c       	andi	r24, 0xCF	; 207
    16a2:	8c 93       	st	X, r24
						TCCR1A_REG |= ((Ptr_Str->T1_FASTPWM_OC1B)<<4);
    16a4:	af e4       	ldi	r26, 0x4F	; 79
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	ef e4       	ldi	r30, 0x4F	; 79
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	28 2f       	mov	r18, r24
    16b0:	e9 81       	ldd	r30, Y+1	; 0x01
    16b2:	fa 81       	ldd	r31, Y+2	; 0x02
    16b4:	85 81       	ldd	r24, Z+5	; 0x05
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	82 95       	swap	r24
    16bc:	92 95       	swap	r25
    16be:	90 7f       	andi	r25, 0xF0	; 240
    16c0:	98 27       	eor	r25, r24
    16c2:	80 7f       	andi	r24, 0xF0	; 240
    16c4:	98 27       	eor	r25, r24
    16c6:	82 2b       	or	r24, r18
    16c8:	8c 93       	st	X, r24
			}
			break;


	}
}
    16ca:	2a 96       	adiw	r28, 0x0a	; 10
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <T1_voidSetCompareValueT1A>:

void T1_voidSetCompareValueT1A(u16 Copy_u16CompareValue)
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <T1_voidSetCompareValueT1A+0x6>
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01

	OCR1A_REG=Copy_u16CompareValue;
    16ea:	ea e4       	ldi	r30, 0x4A	; 74
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	91 83       	std	Z+1, r25	; 0x01
    16f4:	80 83       	st	Z, r24
}
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <T1_voidSetCompareValueT1B>:
void T1_voidSetCompareValueT1B(u16 Copy_u16CompareValue)
{
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	00 d0       	rcall	.+0      	; 0x1706 <T1_voidSetCompareValueT1B+0x6>
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	9a 83       	std	Y+2, r25	; 0x02
    170c:	89 83       	std	Y+1, r24	; 0x01

	OCR1B_REG=Copy_u16CompareValue;
    170e:	e8 e4       	ldi	r30, 0x48	; 72
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	91 83       	std	Z+1, r25	; 0x01
    1718:	80 83       	st	Z, r24
}
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <T1_voidSet_ICRValue>:
void T1_voidSet_ICRValue(u16 Copy_u16ICR_VALUE)
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	00 d0       	rcall	.+0      	; 0x172a <T1_voidSet_ICRValue+0x6>
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	9a 83       	std	Y+2, r25	; 0x02
    1730:	89 83       	std	Y+1, r24	; 0x01
	ICR1_REG=Copy_u16ICR_VALUE;
    1732:	e6 e4       	ldi	r30, 0x46	; 70
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	91 83       	std	Z+1, r25	; 0x01
    173c:	80 83       	st	Z, r24
}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <T1_ReadTCNT1Value>:

u16 T1_ReadTCNT1Value(void)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_REG;
    1750:	ec e4       	ldi	r30, 0x4C	; 76
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	91 81       	ldd	r25, Z+1	; 0x01
}
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <T1_WriteTCNT1A>:
void T1_WriteTCNT1A(u16 Copy_u8TCNTVal)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	00 d0       	rcall	.+0      	; 0x1764 <T1_WriteTCNT1A+0x6>
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	89 83       	std	Y+1, r24	; 0x01

	TCNT1_REG=Copy_u8TCNTVal;
    176c:	ec e4       	ldi	r30, 0x4C	; 76
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	80 83       	st	Z, r24
}
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <T1_SetCallBack>:


void T1_SetCallBack(void (*PF)(void))
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <T1_SetCallBack+0x6>
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	89 83       	std	Y+1, r24	; 0x01
	if(PF !=NULL)
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	9a 81       	ldd	r25, Y+2	; 0x02
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	31 f0       	breq	.+12     	; 0x17a4 <T1_SetCallBack+0x22>
	{
		GP_Notification=PF;
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	90 93 0a 04 	sts	0x040A, r25
    17a0:	80 93 09 04 	sts	0x0409, r24

	}

}
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <__vector_7>:
void __vector_7(void)
{
    17ae:	1f 92       	push	r1
    17b0:	0f 92       	push	r0
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	0f 92       	push	r0
    17b6:	11 24       	eor	r1, r1
    17b8:	2f 93       	push	r18
    17ba:	3f 93       	push	r19
    17bc:	4f 93       	push	r20
    17be:	5f 93       	push	r21
    17c0:	6f 93       	push	r22
    17c2:	7f 93       	push	r23
    17c4:	8f 93       	push	r24
    17c6:	9f 93       	push	r25
    17c8:	af 93       	push	r26
    17ca:	bf 93       	push	r27
    17cc:	ef 93       	push	r30
    17ce:	ff 93       	push	r31
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62

	if(GP_Notification !=NULL)
    17d8:	80 91 09 04 	lds	r24, 0x0409
    17dc:	90 91 0a 04 	lds	r25, 0x040A
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	29 f0       	breq	.+10     	; 0x17ee <__vector_7+0x40>
	{
		GP_Notification();
    17e4:	e0 91 09 04 	lds	r30, 0x0409
    17e8:	f0 91 0a 04 	lds	r31, 0x040A
    17ec:	09 95       	icall

	}
}
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	ff 91       	pop	r31
    17f4:	ef 91       	pop	r30
    17f6:	bf 91       	pop	r27
    17f8:	af 91       	pop	r26
    17fa:	9f 91       	pop	r25
    17fc:	8f 91       	pop	r24
    17fe:	7f 91       	pop	r23
    1800:	6f 91       	pop	r22
    1802:	5f 91       	pop	r21
    1804:	4f 91       	pop	r20
    1806:	3f 91       	pop	r19
    1808:	2f 91       	pop	r18
    180a:	0f 90       	pop	r0
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	0f 90       	pop	r0
    1810:	1f 90       	pop	r1
    1812:	18 95       	reti

00001814 <T0_voidInit>:

void __vector_10(void) __attribute__((signal));
void __vector_11(void) __attribute__((signal));

void T0_voidInit(TIMER0_CONFIG *Ptr_Str)
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	28 97       	sbiw	r28, 0x08	; 8
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	de bf       	out	0x3e, r29	; 62
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	cd bf       	out	0x3d, r28	; 61
    1828:	9a 83       	std	Y+2, r25	; 0x02
    182a:	89 83       	std	Y+1, r24	; 0x01
	if((Ptr_Str ->WF_MODE ==NORMAL_MODE) ||(Ptr_Str ->WF_MODE ==CTC_MODE))
    182c:	e9 81       	ldd	r30, Y+1	; 0x01
    182e:	fa 81       	ldd	r31, Y+2	; 0x02
    1830:	80 81       	ld	r24, Z
    1832:	88 23       	and	r24, r24
    1834:	29 f0       	breq	.+10     	; 0x1840 <T0_voidInit+0x2c>
    1836:	e9 81       	ldd	r30, Y+1	; 0x01
    1838:	fa 81       	ldd	r31, Y+2	; 0x02
    183a:	80 81       	ld	r24, Z
    183c:	82 30       	cpi	r24, 0x02	; 2
    183e:	41 f4       	brne	.+16     	; 0x1850 <T0_voidInit+0x3c>
	{
		SET_BIT(TCCR0_REG,FOC0);
    1840:	a3 e5       	ldi	r26, 0x53	; 83
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e3 e5       	ldi	r30, 0x53	; 83
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	80 68       	ori	r24, 0x80	; 128
    184c:	8c 93       	st	X, r24
    184e:	07 c0       	rjmp	.+14     	; 0x185e <T0_voidInit+0x4a>
	}else
	{
		CLR_BIT(TCCR0_REG,FOC0);
    1850:	a3 e5       	ldi	r26, 0x53	; 83
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e3 e5       	ldi	r30, 0x53	; 83
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	8f 77       	andi	r24, 0x7F	; 127
    185c:	8c 93       	st	X, r24
	}

	//Select Operating Wave Form Mode
	switch(Ptr_Str->WF_MODE)
    185e:	e9 81       	ldd	r30, Y+1	; 0x01
    1860:	fa 81       	ldd	r31, Y+2	; 0x02
    1862:	80 81       	ld	r24, Z
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	38 87       	std	Y+8, r19	; 0x08
    186a:	2f 83       	std	Y+7, r18	; 0x07
    186c:	8f 81       	ldd	r24, Y+7	; 0x07
    186e:	98 85       	ldd	r25, Y+8	; 0x08
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	91 05       	cpc	r25, r1
    1874:	31 f1       	breq	.+76     	; 0x18c2 <T0_voidInit+0xae>
    1876:	2f 81       	ldd	r18, Y+7	; 0x07
    1878:	38 85       	ldd	r19, Y+8	; 0x08
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	2c f4       	brge	.+10     	; 0x188a <T0_voidInit+0x76>
    1880:	8f 81       	ldd	r24, Y+7	; 0x07
    1882:	98 85       	ldd	r25, Y+8	; 0x08
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	71 f0       	breq	.+28     	; 0x18a4 <T0_voidInit+0x90>
    1888:	96 c0       	rjmp	.+300    	; 0x19b6 <T0_voidInit+0x1a2>
    188a:	2f 81       	ldd	r18, Y+7	; 0x07
    188c:	38 85       	ldd	r19, Y+8	; 0x08
    188e:	22 30       	cpi	r18, 0x02	; 2
    1890:	31 05       	cpc	r19, r1
    1892:	09 f4       	brne	.+2      	; 0x1896 <T0_voidInit+0x82>
    1894:	3f c0       	rjmp	.+126    	; 0x1914 <T0_voidInit+0x100>
    1896:	8f 81       	ldd	r24, Y+7	; 0x07
    1898:	98 85       	ldd	r25, Y+8	; 0x08
    189a:	83 30       	cpi	r24, 0x03	; 3
    189c:	91 05       	cpc	r25, r1
    189e:	09 f4       	brne	.+2      	; 0x18a2 <T0_voidInit+0x8e>
    18a0:	62 c0       	rjmp	.+196    	; 0x1966 <T0_voidInit+0x152>
    18a2:	89 c0       	rjmp	.+274    	; 0x19b6 <T0_voidInit+0x1a2>
	{
	case NORMAL_MODE:

		CLR_BIT(TCCR0_REG,WGM00);
    18a4:	a3 e5       	ldi	r26, 0x53	; 83
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e3 e5       	ldi	r30, 0x53	; 83
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	8f 7b       	andi	r24, 0xBF	; 191
    18b0:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,WGM01);
    18b2:	a3 e5       	ldi	r26, 0x53	; 83
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e3 e5       	ldi	r30, 0x53	; 83
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	87 7f       	andi	r24, 0xF7	; 247
    18be:	8c 93       	st	X, r24
    18c0:	7a c0       	rjmp	.+244    	; 0x19b6 <T0_voidInit+0x1a2>
		break;

	case PHASE_PWM_MODE:

		SET_BIT(TCCR0_REG,WGM00);
    18c2:	a3 e5       	ldi	r26, 0x53	; 83
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e3 e5       	ldi	r30, 0x53	; 83
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	80 64       	ori	r24, 0x40	; 64
    18ce:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,WGM01);
    18d0:	a3 e5       	ldi	r26, 0x53	; 83
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e3 e5       	ldi	r30, 0x53	; 83
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	87 7f       	andi	r24, 0xF7	; 247
    18dc:	8c 93       	st	X, r24
		//OC0_Options
		TCCR0_REG &= 0xcf;
    18de:	a3 e5       	ldi	r26, 0x53	; 83
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e3 e5       	ldi	r30, 0x53	; 83
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 7c       	andi	r24, 0xCF	; 207
    18ea:	8c 93       	st	X, r24
		TCCR0_REG |= ((Ptr_Str -> PHASE_OC0) <<4);
    18ec:	a3 e5       	ldi	r26, 0x53	; 83
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e3 e5       	ldi	r30, 0x53	; 83
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	28 2f       	mov	r18, r24
    18f8:	e9 81       	ldd	r30, Y+1	; 0x01
    18fa:	fa 81       	ldd	r31, Y+2	; 0x02
    18fc:	83 81       	ldd	r24, Z+3	; 0x03
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	82 95       	swap	r24
    1904:	92 95       	swap	r25
    1906:	90 7f       	andi	r25, 0xF0	; 240
    1908:	98 27       	eor	r25, r24
    190a:	80 7f       	andi	r24, 0xF0	; 240
    190c:	98 27       	eor	r25, r24
    190e:	82 2b       	or	r24, r18
    1910:	8c 93       	st	X, r24
    1912:	51 c0       	rjmp	.+162    	; 0x19b6 <T0_voidInit+0x1a2>

		break;

	case CTC_MODE:
		CLR_BIT(TCCR0_REG,WGM00);
    1914:	a3 e5       	ldi	r26, 0x53	; 83
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e3 e5       	ldi	r30, 0x53	; 83
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	8f 7b       	andi	r24, 0xBF	; 191
    1920:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,WGM01);
    1922:	a3 e5       	ldi	r26, 0x53	; 83
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e3 e5       	ldi	r30, 0x53	; 83
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	88 60       	ori	r24, 0x08	; 8
    192e:	8c 93       	st	X, r24
		//OC0_Options
		TCCR0_REG &= 0xcf;
    1930:	a3 e5       	ldi	r26, 0x53	; 83
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e3 e5       	ldi	r30, 0x53	; 83
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	8f 7c       	andi	r24, 0xCF	; 207
    193c:	8c 93       	st	X, r24
		TCCR0_REG |= ((Ptr_Str -> CTC_OC0) <<4);
    193e:	a3 e5       	ldi	r26, 0x53	; 83
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e3 e5       	ldi	r30, 0x53	; 83
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	28 2f       	mov	r18, r24
    194a:	e9 81       	ldd	r30, Y+1	; 0x01
    194c:	fa 81       	ldd	r31, Y+2	; 0x02
    194e:	81 81       	ldd	r24, Z+1	; 0x01
    1950:	88 2f       	mov	r24, r24
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	82 95       	swap	r24
    1956:	92 95       	swap	r25
    1958:	90 7f       	andi	r25, 0xF0	; 240
    195a:	98 27       	eor	r25, r24
    195c:	80 7f       	andi	r24, 0xF0	; 240
    195e:	98 27       	eor	r25, r24
    1960:	82 2b       	or	r24, r18
    1962:	8c 93       	st	X, r24
    1964:	28 c0       	rjmp	.+80     	; 0x19b6 <T0_voidInit+0x1a2>
		break;

	case FAST_PWM:
		SET_BIT(TCCR0_REG,WGM00);
    1966:	a3 e5       	ldi	r26, 0x53	; 83
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e3 e5       	ldi	r30, 0x53	; 83
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	80 64       	ori	r24, 0x40	; 64
    1972:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,WGM01);
    1974:	a3 e5       	ldi	r26, 0x53	; 83
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e3 e5       	ldi	r30, 0x53	; 83
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	88 60       	ori	r24, 0x08	; 8
    1980:	8c 93       	st	X, r24
		//OC0_Options
		TCCR0_REG &= 0xcf;
    1982:	a3 e5       	ldi	r26, 0x53	; 83
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e3 e5       	ldi	r30, 0x53	; 83
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	8f 7c       	andi	r24, 0xCF	; 207
    198e:	8c 93       	st	X, r24
		TCCR0_REG |= ((Ptr_Str -> FASTPWM_OC0) <<4);
    1990:	a3 e5       	ldi	r26, 0x53	; 83
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e3 e5       	ldi	r30, 0x53	; 83
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	28 2f       	mov	r18, r24
    199c:	e9 81       	ldd	r30, Y+1	; 0x01
    199e:	fa 81       	ldd	r31, Y+2	; 0x02
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	82 95       	swap	r24
    19a8:	92 95       	swap	r25
    19aa:	90 7f       	andi	r25, 0xF0	; 240
    19ac:	98 27       	eor	r25, r24
    19ae:	80 7f       	andi	r24, 0xF0	; 240
    19b0:	98 27       	eor	r25, r24
    19b2:	82 2b       	or	r24, r18
    19b4:	8c 93       	st	X, r24
		break;
	}

	//Select CLock
	TCCR0_REG &=0xf8;
    19b6:	a3 e5       	ldi	r26, 0x53	; 83
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e3 e5       	ldi	r30, 0x53	; 83
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	88 7f       	andi	r24, 0xF8	; 248
    19c2:	8c 93       	st	X, r24
	TCCR0_REG |= (Ptr_Str->CLOCK_MODE);
    19c4:	a3 e5       	ldi	r26, 0x53	; 83
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e3 e5       	ldi	r30, 0x53	; 83
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	90 81       	ld	r25, Z
    19ce:	e9 81       	ldd	r30, Y+1	; 0x01
    19d0:	fa 81       	ldd	r31, Y+2	; 0x02
    19d2:	84 81       	ldd	r24, Z+4	; 0x04
    19d4:	89 2b       	or	r24, r25
    19d6:	8c 93       	st	X, r24

	//Choose Polling Or Interrupt
	//Enable PIE
	switch(Ptr_Str->TECHNIQUE)
    19d8:	e9 81       	ldd	r30, Y+1	; 0x01
    19da:	fa 81       	ldd	r31, Y+2	; 0x02
    19dc:	85 81       	ldd	r24, Z+5	; 0x05
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	3e 83       	std	Y+6, r19	; 0x06
    19e4:	2d 83       	std	Y+5, r18	; 0x05
    19e6:	8d 81       	ldd	r24, Y+5	; 0x05
    19e8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	29 f1       	breq	.+74     	; 0x1a38 <T0_voidInit+0x224>
    19ee:	2d 81       	ldd	r18, Y+5	; 0x05
    19f0:	3e 81       	ldd	r19, Y+6	; 0x06
    19f2:	21 30       	cpi	r18, 0x01	; 1
    19f4:	31 05       	cpc	r19, r1
    19f6:	01 f5       	brne	.+64     	; 0x1a38 <T0_voidInit+0x224>
	{
	case Polling:
		break;

	case Interrupt:
		switch(Ptr_Str->WF_MODE)
    19f8:	e9 81       	ldd	r30, Y+1	; 0x01
    19fa:	fa 81       	ldd	r31, Y+2	; 0x02
    19fc:	80 81       	ld	r24, Z
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	3c 83       	std	Y+4, r19	; 0x04
    1a04:	2b 83       	std	Y+3, r18	; 0x03
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	31 f0       	breq	.+12     	; 0x1a1a <T0_voidInit+0x206>
    1a0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a10:	3c 81       	ldd	r19, Y+4	; 0x04
    1a12:	22 30       	cpi	r18, 0x02	; 2
    1a14:	31 05       	cpc	r19, r1
    1a16:	49 f0       	breq	.+18     	; 0x1a2a <T0_voidInit+0x216>
    1a18:	0f c0       	rjmp	.+30     	; 0x1a38 <T0_voidInit+0x224>
		{
		case NORMAL_MODE:
			SET_BIT(TIMSK_REG,0);
    1a1a:	a9 e5       	ldi	r26, 0x59	; 89
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e9 e5       	ldi	r30, 0x59	; 89
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	81 60       	ori	r24, 0x01	; 1
    1a26:	8c 93       	st	X, r24
    1a28:	07 c0       	rjmp	.+14     	; 0x1a38 <T0_voidInit+0x224>
			break;

		case CTC_MODE:
			SET_BIT(TIMSK_REG,1);
    1a2a:	a9 e5       	ldi	r26, 0x59	; 89
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e9 e5       	ldi	r30, 0x59	; 89
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	82 60       	ori	r24, 0x02	; 2
    1a36:	8c 93       	st	X, r24

		}
		break;
	}

}
    1a38:	28 96       	adiw	r28, 0x08	; 8
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <T0_voidStartTimer>:

void T0_voidStartTimer(TIMER0_CONFIG *Ptr_Str)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <T0_voidStartTimer+0x6>
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <T0_voidStartTimer+0x8>
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
	switch(Ptr_Str->WF_MODE)
    1a5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a5e:	80 81       	ld	r24, Z
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	3c 83       	std	Y+4, r19	; 0x04
    1a66:	2b 83       	std	Y+3, r18	; 0x03
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	91 05       	cpc	r25, r1
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <T0_voidStartTimer+0x2a>
    1a72:	54 c0       	rjmp	.+168    	; 0x1b1c <T0_voidStartTimer+0xd2>
    1a74:	2b 81       	ldd	r18, Y+3	; 0x03
    1a76:	3c 81       	ldd	r19, Y+4	; 0x04
    1a78:	22 30       	cpi	r18, 0x02	; 2
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	2c f4       	brge	.+10     	; 0x1a88 <T0_voidStartTimer+0x3e>
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	9c 81       	ldd	r25, Y+4	; 0x04
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	69 f0       	breq	.+26     	; 0x1aa0 <T0_voidStartTimer+0x56>
    1a86:	5b c0       	rjmp	.+182    	; 0x1b3e <T0_voidStartTimer+0xf4>
    1a88:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8c:	22 30       	cpi	r18, 0x02	; 2
    1a8e:	31 05       	cpc	r19, r1
    1a90:	31 f1       	breq	.+76     	; 0x1ade <T0_voidStartTimer+0x94>
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	9c 81       	ldd	r25, Y+4	; 0x04
    1a96:	83 30       	cpi	r24, 0x03	; 3
    1a98:	91 05       	cpc	r25, r1
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <T0_voidStartTimer+0x54>
    1a9c:	48 c0       	rjmp	.+144    	; 0x1b2e <T0_voidStartTimer+0xe4>
    1a9e:	4f c0       	rjmp	.+158    	; 0x1b3e <T0_voidStartTimer+0xf4>
	{
	case NORMAL_MODE:
		TCNT0_REG	= Ptr_Str->Preload_value;
    1aa0:	a2 e5       	ldi	r26, 0x52	; 82
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa8:	86 81       	ldd	r24, Z+6	; 0x06
    1aaa:	8c 93       	st	X, r24
		switch(Ptr_Str->TECHNIQUE)
    1aac:	e9 81       	ldd	r30, Y+1	; 0x01
    1aae:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab0:	85 81       	ldd	r24, Z+5	; 0x05
    1ab2:	88 2f       	mov	r24, r24
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <T0_voidStartTimer+0x72>
    1aba:	41 c0       	rjmp	.+130    	; 0x1b3e <T0_voidStartTimer+0xf4>
		{
		case Polling:
			//wait till flag
			while(GET_BIT(TIFR_REG,0) ==0);
    1abc:	e8 e5       	ldi	r30, 0x58	; 88
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	88 2f       	mov	r24, r24
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	81 70       	andi	r24, 0x01	; 1
    1ac8:	90 70       	andi	r25, 0x00	; 0
    1aca:	00 97       	sbiw	r24, 0x00	; 0
    1acc:	b9 f3       	breq	.-18     	; 0x1abc <T0_voidStartTimer+0x72>
			//clear flag
			SET_BIT(TIFR_REG,0);
    1ace:	a8 e5       	ldi	r26, 0x58	; 88
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e8 e5       	ldi	r30, 0x58	; 88
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	81 60       	ori	r24, 0x01	; 1
    1ada:	8c 93       	st	X, r24
    1adc:	30 c0       	rjmp	.+96     	; 0x1b3e <T0_voidStartTimer+0xf4>

		}
		break;

		case CTC_MODE:
			OCR0_REG	= Ptr_Str->Compare_value;
    1ade:	ac e5       	ldi	r26, 0x5C	; 92
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae6:	87 81       	ldd	r24, Z+7	; 0x07
    1ae8:	8c 93       	st	X, r24
			switch(Ptr_Str->TECHNIQUE)
    1aea:	e9 81       	ldd	r30, Y+1	; 0x01
    1aec:	fa 81       	ldd	r31, Y+2	; 0x02
    1aee:	85 81       	ldd	r24, Z+5	; 0x05
    1af0:	88 2f       	mov	r24, r24
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	19 f5       	brne	.+70     	; 0x1b3e <T0_voidStartTimer+0xf4>
			{
			case Polling:
				//wait till flag
				while(GET_BIT(TIFR_REG,1) ==0);
    1af8:	e8 e5       	ldi	r30, 0x58	; 88
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	86 95       	lsr	r24
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	81 70       	andi	r24, 0x01	; 1
    1b06:	90 70       	andi	r25, 0x00	; 0
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	b1 f3       	breq	.-20     	; 0x1af8 <T0_voidStartTimer+0xae>
				//clear flag
				SET_BIT(TIFR_REG,1);
    1b0c:	a8 e5       	ldi	r26, 0x58	; 88
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e8 e5       	ldi	r30, 0x58	; 88
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	82 60       	ori	r24, 0x02	; 2
    1b18:	8c 93       	st	X, r24
    1b1a:	11 c0       	rjmp	.+34     	; 0x1b3e <T0_voidStartTimer+0xf4>
				break;
			}
			break;

			case PHASE_PWM_MODE:
				OCR0_REG	= Ptr_Str->Compare_value;
    1b1c:	ec e5       	ldi	r30, 0x5C	; 92
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	a9 81       	ldd	r26, Y+1	; 0x01
    1b22:	ba 81       	ldd	r27, Y+2	; 0x02
    1b24:	17 96       	adiw	r26, 0x07	; 7
    1b26:	8c 91       	ld	r24, X
    1b28:	17 97       	sbiw	r26, 0x07	; 7
    1b2a:	80 83       	st	Z, r24
    1b2c:	08 c0       	rjmp	.+16     	; 0x1b3e <T0_voidStartTimer+0xf4>

				break;


			case FAST_PWM:
				OCR0_REG	= Ptr_Str->Compare_value;
    1b2e:	ec e5       	ldi	r30, 0x5C	; 92
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	a9 81       	ldd	r26, Y+1	; 0x01
    1b34:	ba 81       	ldd	r27, Y+2	; 0x02
    1b36:	17 96       	adiw	r26, 0x07	; 7
    1b38:	8c 91       	ld	r24, X
    1b3a:	17 97       	sbiw	r26, 0x07	; 7
    1b3c:	80 83       	st	Z, r24




	}
}
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <T0_SetCallBack>:



void T0_SetCallBack(void (*PF)(void))
{
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <T0_SetCallBack+0x6>
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	89 83       	std	Y+1, r24	; 0x01
	if(PF !=NULL)
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	31 f0       	breq	.+12     	; 0x1b6e <T0_SetCallBack+0x22>
	{
		GP_Notification=PF;
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	90 93 0c 04 	sts	0x040C, r25
    1b6a:	80 93 0b 04 	sts	0x040B, r24

	}

}
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <__vector_10>:


void __vector_10(void){
    1b78:	1f 92       	push	r1
    1b7a:	0f 92       	push	r0
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	0f 92       	push	r0
    1b80:	11 24       	eor	r1, r1
    1b82:	2f 93       	push	r18
    1b84:	3f 93       	push	r19
    1b86:	4f 93       	push	r20
    1b88:	5f 93       	push	r21
    1b8a:	6f 93       	push	r22
    1b8c:	7f 93       	push	r23
    1b8e:	8f 93       	push	r24
    1b90:	9f 93       	push	r25
    1b92:	af 93       	push	r26
    1b94:	bf 93       	push	r27
    1b96:	ef 93       	push	r30
    1b98:	ff 93       	push	r31
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62

	if(GP_Notification !=NULL)
    1ba2:	80 91 0b 04 	lds	r24, 0x040B
    1ba6:	90 91 0c 04 	lds	r25, 0x040C
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	29 f0       	breq	.+10     	; 0x1bb8 <__vector_10+0x40>
	{
		GP_Notification();
    1bae:	e0 91 0b 04 	lds	r30, 0x040B
    1bb2:	f0 91 0c 04 	lds	r31, 0x040C
    1bb6:	09 95       	icall

	}

}
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	ff 91       	pop	r31
    1bbe:	ef 91       	pop	r30
    1bc0:	bf 91       	pop	r27
    1bc2:	af 91       	pop	r26
    1bc4:	9f 91       	pop	r25
    1bc6:	8f 91       	pop	r24
    1bc8:	7f 91       	pop	r23
    1bca:	6f 91       	pop	r22
    1bcc:	5f 91       	pop	r21
    1bce:	4f 91       	pop	r20
    1bd0:	3f 91       	pop	r19
    1bd2:	2f 91       	pop	r18
    1bd4:	0f 90       	pop	r0
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	0f 90       	pop	r0
    1bda:	1f 90       	pop	r1
    1bdc:	18 95       	reti

00001bde <__vector_11>:
void __vector_11(void){
    1bde:	1f 92       	push	r1
    1be0:	0f 92       	push	r0
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	0f 92       	push	r0
    1be6:	11 24       	eor	r1, r1
    1be8:	2f 93       	push	r18
    1bea:	3f 93       	push	r19
    1bec:	4f 93       	push	r20
    1bee:	5f 93       	push	r21
    1bf0:	6f 93       	push	r22
    1bf2:	7f 93       	push	r23
    1bf4:	8f 93       	push	r24
    1bf6:	9f 93       	push	r25
    1bf8:	af 93       	push	r26
    1bfa:	bf 93       	push	r27
    1bfc:	ef 93       	push	r30
    1bfe:	ff 93       	push	r31
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62

	if(GP_Notification !=NULL)
    1c08:	80 91 0b 04 	lds	r24, 0x040B
    1c0c:	90 91 0c 04 	lds	r25, 0x040C
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	29 f0       	breq	.+10     	; 0x1c1e <__vector_11+0x40>
	{
		GP_Notification();
    1c14:	e0 91 0b 04 	lds	r30, 0x040B
    1c18:	f0 91 0c 04 	lds	r31, 0x040C
    1c1c:	09 95       	icall

	}

}
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	ff 91       	pop	r31
    1c24:	ef 91       	pop	r30
    1c26:	bf 91       	pop	r27
    1c28:	af 91       	pop	r26
    1c2a:	9f 91       	pop	r25
    1c2c:	8f 91       	pop	r24
    1c2e:	7f 91       	pop	r23
    1c30:	6f 91       	pop	r22
    1c32:	5f 91       	pop	r21
    1c34:	4f 91       	pop	r20
    1c36:	3f 91       	pop	r19
    1c38:	2f 91       	pop	r18
    1c3a:	0f 90       	pop	r0
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	0f 90       	pop	r0
    1c40:	1f 90       	pop	r1
    1c42:	18 95       	reti

00001c44 <T0_ReadTCNT0Value>:

u8 T0_ReadTCNT0Value(void)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62

	return TCNT0_REG;
    1c4c:	e2 e5       	ldi	r30, 0x52	; 82
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
}
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <DIO_voidSetPinDirection>:
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidSetPinDirection (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8Direction)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	29 97       	sbiw	r28, 0x09	; 9
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	6a 83       	std	Y+2, r22	; 0x02
    1c70:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Direction)
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	39 87       	std	Y+9, r19	; 0x09
    1c7a:	28 87       	std	Y+8, r18	; 0x08
    1c7c:	88 85       	ldd	r24, Y+8	; 0x08
    1c7e:	99 85       	ldd	r25, Y+9	; 0x09
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <DIO_voidSetPinDirection+0x2e>
    1c84:	75 c0       	rjmp	.+234    	; 0x1d70 <DIO_voidSetPinDirection+0x118>
    1c86:	28 85       	ldd	r18, Y+8	; 0x08
    1c88:	39 85       	ldd	r19, Y+9	; 0x09
    1c8a:	21 30       	cpi	r18, 0x01	; 1
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	09 f0       	breq	.+2      	; 0x1c92 <DIO_voidSetPinDirection+0x3a>
    1c90:	e2 c0       	rjmp	.+452    	; 0x1e56 <DIO_voidSetPinDirection+0x1fe>
	{

	case DIO_OUTPUT:

		switch(Copy_u8PortId)
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	3f 83       	std	Y+7, r19	; 0x07
    1c9a:	2e 83       	std	Y+6, r18	; 0x06
    1c9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	49 f1       	breq	.+82     	; 0x1cf8 <DIO_voidSetPinDirection+0xa0>
    1ca6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ca8:	3f 81       	ldd	r19, Y+7	; 0x07
    1caa:	22 30       	cpi	r18, 0x02	; 2
    1cac:	31 05       	cpc	r19, r1
    1cae:	2c f4       	brge	.+10     	; 0x1cba <DIO_voidSetPinDirection+0x62>
    1cb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	61 f0       	breq	.+24     	; 0x1cd0 <DIO_voidSetPinDirection+0x78>
    1cb8:	ce c0       	rjmp	.+412    	; 0x1e56 <DIO_voidSetPinDirection+0x1fe>
    1cba:	2e 81       	ldd	r18, Y+6	; 0x06
    1cbc:	3f 81       	ldd	r19, Y+7	; 0x07
    1cbe:	22 30       	cpi	r18, 0x02	; 2
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	71 f1       	breq	.+92     	; 0x1d20 <DIO_voidSetPinDirection+0xc8>
    1cc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc6:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc8:	83 30       	cpi	r24, 0x03	; 3
    1cca:	91 05       	cpc	r25, r1
    1ccc:	e9 f1       	breq	.+122    	; 0x1d48 <DIO_voidSetPinDirection+0xf0>
    1cce:	c3 c0       	rjmp	.+390    	; 0x1e56 <DIO_voidSetPinDirection+0x1fe>
		{
		case DIO_PORTA:
			SET_BIT(DIO_DDRA_REG,Copy_u8PinId);
    1cd0:	aa e3       	ldi	r26, 0x3A	; 58
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	ea e3       	ldi	r30, 0x3A	; 58
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	48 2f       	mov	r20, r24
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	02 2e       	mov	r0, r18
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <DIO_voidSetPinDirection+0x96>
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	0a 94       	dec	r0
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <DIO_voidSetPinDirection+0x92>
    1cf2:	84 2b       	or	r24, r20
    1cf4:	8c 93       	st	X, r24
    1cf6:	af c0       	rjmp	.+350    	; 0x1e56 <DIO_voidSetPinDirection+0x1fe>
		break;

		case DIO_PORTB:
			SET_BIT(DIO_DDRB_REG,Copy_u8PinId);
    1cf8:	a7 e3       	ldi	r26, 0x37	; 55
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e7 e3       	ldi	r30, 0x37	; 55
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	48 2f       	mov	r20, r24
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	02 2e       	mov	r0, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <DIO_voidSetPinDirection+0xbe>
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	0a 94       	dec	r0
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <DIO_voidSetPinDirection+0xba>
    1d1a:	84 2b       	or	r24, r20
    1d1c:	8c 93       	st	X, r24
    1d1e:	9b c0       	rjmp	.+310    	; 0x1e56 <DIO_voidSetPinDirection+0x1fe>
		break;

		case DIO_PORTC:
			SET_BIT(DIO_DDRC_REG,Copy_u8PinId);
    1d20:	a4 e3       	ldi	r26, 0x34	; 52
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e4 e3       	ldi	r30, 0x34	; 52
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	48 2f       	mov	r20, r24
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	02 2e       	mov	r0, r18
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <DIO_voidSetPinDirection+0xe6>
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	0a 94       	dec	r0
    1d40:	e2 f7       	brpl	.-8      	; 0x1d3a <DIO_voidSetPinDirection+0xe2>
    1d42:	84 2b       	or	r24, r20
    1d44:	8c 93       	st	X, r24
    1d46:	87 c0       	rjmp	.+270    	; 0x1e56 <DIO_voidSetPinDirection+0x1fe>
		break;


		case DIO_PORTD:
			SET_BIT(DIO_DDRD_REG,Copy_u8PinId);
    1d48:	a1 e3       	ldi	r26, 0x31	; 49
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e1 e3       	ldi	r30, 0x31	; 49
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	48 2f       	mov	r20, r24
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	02 2e       	mov	r0, r18
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <DIO_voidSetPinDirection+0x10e>
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	0a 94       	dec	r0
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <DIO_voidSetPinDirection+0x10a>
    1d6a:	84 2b       	or	r24, r20
    1d6c:	8c 93       	st	X, r24
    1d6e:	73 c0       	rjmp	.+230    	; 0x1e56 <DIO_voidSetPinDirection+0x1fe>
		break;


	case DIO_INPUT:

		switch(Copy_u8PortId)
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	3d 83       	std	Y+5, r19	; 0x05
    1d78:	2c 83       	std	Y+4, r18	; 0x04
    1d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	91 05       	cpc	r25, r1
    1d82:	59 f1       	breq	.+86     	; 0x1dda <DIO_voidSetPinDirection+0x182>
    1d84:	2c 81       	ldd	r18, Y+4	; 0x04
    1d86:	3d 81       	ldd	r19, Y+5	; 0x05
    1d88:	22 30       	cpi	r18, 0x02	; 2
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	2c f4       	brge	.+10     	; 0x1d98 <DIO_voidSetPinDirection+0x140>
    1d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d90:	9d 81       	ldd	r25, Y+5	; 0x05
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	69 f0       	breq	.+26     	; 0x1db0 <DIO_voidSetPinDirection+0x158>
    1d96:	5f c0       	rjmp	.+190    	; 0x1e56 <DIO_voidSetPinDirection+0x1fe>
    1d98:	2c 81       	ldd	r18, Y+4	; 0x04
    1d9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d9c:	22 30       	cpi	r18, 0x02	; 2
    1d9e:	31 05       	cpc	r19, r1
    1da0:	89 f1       	breq	.+98     	; 0x1e04 <DIO_voidSetPinDirection+0x1ac>
    1da2:	8c 81       	ldd	r24, Y+4	; 0x04
    1da4:	9d 81       	ldd	r25, Y+5	; 0x05
    1da6:	83 30       	cpi	r24, 0x03	; 3
    1da8:	91 05       	cpc	r25, r1
    1daa:	09 f4       	brne	.+2      	; 0x1dae <DIO_voidSetPinDirection+0x156>
    1dac:	40 c0       	rjmp	.+128    	; 0x1e2e <DIO_voidSetPinDirection+0x1d6>
    1dae:	53 c0       	rjmp	.+166    	; 0x1e56 <DIO_voidSetPinDirection+0x1fe>
				{
				case DIO_PORTA:
					CLR_BIT(DIO_DDRA_REG,Copy_u8PinId);
    1db0:	aa e3       	ldi	r26, 0x3A	; 58
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	ea e3       	ldi	r30, 0x3A	; 58
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	48 2f       	mov	r20, r24
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	02 2e       	mov	r0, r18
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <DIO_voidSetPinDirection+0x176>
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	0a 94       	dec	r0
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <DIO_voidSetPinDirection+0x172>
    1dd2:	80 95       	com	r24
    1dd4:	84 23       	and	r24, r20
    1dd6:	8c 93       	st	X, r24
    1dd8:	3e c0       	rjmp	.+124    	; 0x1e56 <DIO_voidSetPinDirection+0x1fe>
				break;

				case DIO_PORTB:
					CLR_BIT(DIO_DDRB_REG,Copy_u8PinId);
    1dda:	a7 e3       	ldi	r26, 0x37	; 55
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e7 e3       	ldi	r30, 0x37	; 55
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	48 2f       	mov	r20, r24
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	02 2e       	mov	r0, r18
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <DIO_voidSetPinDirection+0x1a0>
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	0a 94       	dec	r0
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <DIO_voidSetPinDirection+0x19c>
    1dfc:	80 95       	com	r24
    1dfe:	84 23       	and	r24, r20
    1e00:	8c 93       	st	X, r24
    1e02:	29 c0       	rjmp	.+82     	; 0x1e56 <DIO_voidSetPinDirection+0x1fe>
				break;

				case DIO_PORTC:
					CLR_BIT(DIO_DDRC_REG,Copy_u8PinId);
    1e04:	a4 e3       	ldi	r26, 0x34	; 52
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e4 e3       	ldi	r30, 0x34	; 52
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	48 2f       	mov	r20, r24
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 2e       	mov	r0, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <DIO_voidSetPinDirection+0x1ca>
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <DIO_voidSetPinDirection+0x1c6>
    1e26:	80 95       	com	r24
    1e28:	84 23       	and	r24, r20
    1e2a:	8c 93       	st	X, r24
    1e2c:	14 c0       	rjmp	.+40     	; 0x1e56 <DIO_voidSetPinDirection+0x1fe>
				break;


				case DIO_PORTD:
					CLR_BIT(DIO_DDRD_REG,Copy_u8PinId);
    1e2e:	a1 e3       	ldi	r26, 0x31	; 49
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e1 e3       	ldi	r30, 0x31	; 49
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	48 2f       	mov	r20, r24
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	02 2e       	mov	r0, r18
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <DIO_voidSetPinDirection+0x1f4>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	0a 94       	dec	r0
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <DIO_voidSetPinDirection+0x1f0>
    1e50:	80 95       	com	r24
    1e52:	84 23       	and	r24, r20
    1e54:	8c 93       	st	X, r24
	default:

		break;
	}

}
    1e56:	29 96       	adiw	r28, 0x09	; 9
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <DIO_voidSetPinValue>:




void DIO_voidSetPinValue(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8Value)
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	29 97       	sbiw	r28, 0x09	; 9
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	6a 83       	std	Y+2, r22	; 0x02
    1e80:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Value)
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	39 87       	std	Y+9, r19	; 0x09
    1e8a:	28 87       	std	Y+8, r18	; 0x08
    1e8c:	88 85       	ldd	r24, Y+8	; 0x08
    1e8e:	99 85       	ldd	r25, Y+9	; 0x09
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <DIO_voidSetPinValue+0x2e>
    1e94:	75 c0       	rjmp	.+234    	; 0x1f80 <DIO_voidSetPinValue+0x118>
    1e96:	28 85       	ldd	r18, Y+8	; 0x08
    1e98:	39 85       	ldd	r19, Y+9	; 0x09
    1e9a:	21 30       	cpi	r18, 0x01	; 1
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <DIO_voidSetPinValue+0x3a>
    1ea0:	e2 c0       	rjmp	.+452    	; 0x2066 <DIO_voidSetPinValue+0x1fe>
		{

		case DIO_HIGH:

			switch(Copy_u8PortId)
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	3f 83       	std	Y+7, r19	; 0x07
    1eaa:	2e 83       	std	Y+6, r18	; 0x06
    1eac:	8e 81       	ldd	r24, Y+6	; 0x06
    1eae:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb0:	81 30       	cpi	r24, 0x01	; 1
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	49 f1       	breq	.+82     	; 0x1f08 <DIO_voidSetPinValue+0xa0>
    1eb6:	2e 81       	ldd	r18, Y+6	; 0x06
    1eb8:	3f 81       	ldd	r19, Y+7	; 0x07
    1eba:	22 30       	cpi	r18, 0x02	; 2
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <DIO_voidSetPinValue+0x62>
    1ec0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	61 f0       	breq	.+24     	; 0x1ee0 <DIO_voidSetPinValue+0x78>
    1ec8:	ce c0       	rjmp	.+412    	; 0x2066 <DIO_voidSetPinValue+0x1fe>
    1eca:	2e 81       	ldd	r18, Y+6	; 0x06
    1ecc:	3f 81       	ldd	r19, Y+7	; 0x07
    1ece:	22 30       	cpi	r18, 0x02	; 2
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	71 f1       	breq	.+92     	; 0x1f30 <DIO_voidSetPinValue+0xc8>
    1ed4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed8:	83 30       	cpi	r24, 0x03	; 3
    1eda:	91 05       	cpc	r25, r1
    1edc:	e9 f1       	breq	.+122    	; 0x1f58 <DIO_voidSetPinValue+0xf0>
    1ede:	c3 c0       	rjmp	.+390    	; 0x2066 <DIO_voidSetPinValue+0x1fe>
			{
			case DIO_PORTA:
				SET_BIT(DIO_PORTA_REG,Copy_u8PinId);
    1ee0:	ab e3       	ldi	r26, 0x3B	; 59
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	eb e3       	ldi	r30, 0x3B	; 59
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	48 2f       	mov	r20, r24
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	02 2e       	mov	r0, r18
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <DIO_voidSetPinValue+0x96>
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	0a 94       	dec	r0
    1f00:	e2 f7       	brpl	.-8      	; 0x1efa <DIO_voidSetPinValue+0x92>
    1f02:	84 2b       	or	r24, r20
    1f04:	8c 93       	st	X, r24
    1f06:	af c0       	rjmp	.+350    	; 0x2066 <DIO_voidSetPinValue+0x1fe>
			break;

			case DIO_PORTB:
				SET_BIT(DIO_PORTB_REG,Copy_u8PinId);
    1f08:	a8 e3       	ldi	r26, 0x38	; 56
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e8 e3       	ldi	r30, 0x38	; 56
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	48 2f       	mov	r20, r24
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	02 2e       	mov	r0, r18
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <DIO_voidSetPinValue+0xbe>
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	0a 94       	dec	r0
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <DIO_voidSetPinValue+0xba>
    1f2a:	84 2b       	or	r24, r20
    1f2c:	8c 93       	st	X, r24
    1f2e:	9b c0       	rjmp	.+310    	; 0x2066 <DIO_voidSetPinValue+0x1fe>
			break;

			case DIO_PORTC:
				SET_BIT(DIO_PORTC_REG,Copy_u8PinId);
    1f30:	a5 e3       	ldi	r26, 0x35	; 53
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e5 e3       	ldi	r30, 0x35	; 53
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	48 2f       	mov	r20, r24
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 2e       	mov	r0, r18
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <DIO_voidSetPinValue+0xe6>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	0a 94       	dec	r0
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <DIO_voidSetPinValue+0xe2>
    1f52:	84 2b       	or	r24, r20
    1f54:	8c 93       	st	X, r24
    1f56:	87 c0       	rjmp	.+270    	; 0x2066 <DIO_voidSetPinValue+0x1fe>
			break;


			case DIO_PORTD:
				SET_BIT(DIO_PORTD_REG,Copy_u8PinId);
    1f58:	a2 e3       	ldi	r26, 0x32	; 50
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e2 e3       	ldi	r30, 0x32	; 50
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	48 2f       	mov	r20, r24
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	02 2e       	mov	r0, r18
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <DIO_voidSetPinValue+0x10e>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	0a 94       	dec	r0
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <DIO_voidSetPinValue+0x10a>
    1f7a:	84 2b       	or	r24, r20
    1f7c:	8c 93       	st	X, r24
    1f7e:	73 c0       	rjmp	.+230    	; 0x2066 <DIO_voidSetPinValue+0x1fe>
			break;


		case DIO_LOW:

			switch(Copy_u8PortId)
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	3d 83       	std	Y+5, r19	; 0x05
    1f88:	2c 83       	std	Y+4, r18	; 0x04
    1f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8e:	81 30       	cpi	r24, 0x01	; 1
    1f90:	91 05       	cpc	r25, r1
    1f92:	59 f1       	breq	.+86     	; 0x1fea <DIO_voidSetPinValue+0x182>
    1f94:	2c 81       	ldd	r18, Y+4	; 0x04
    1f96:	3d 81       	ldd	r19, Y+5	; 0x05
    1f98:	22 30       	cpi	r18, 0x02	; 2
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	2c f4       	brge	.+10     	; 0x1fa8 <DIO_voidSetPinValue+0x140>
    1f9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	69 f0       	breq	.+26     	; 0x1fc0 <DIO_voidSetPinValue+0x158>
    1fa6:	5f c0       	rjmp	.+190    	; 0x2066 <DIO_voidSetPinValue+0x1fe>
    1fa8:	2c 81       	ldd	r18, Y+4	; 0x04
    1faa:	3d 81       	ldd	r19, Y+5	; 0x05
    1fac:	22 30       	cpi	r18, 0x02	; 2
    1fae:	31 05       	cpc	r19, r1
    1fb0:	89 f1       	breq	.+98     	; 0x2014 <DIO_voidSetPinValue+0x1ac>
    1fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb6:	83 30       	cpi	r24, 0x03	; 3
    1fb8:	91 05       	cpc	r25, r1
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <DIO_voidSetPinValue+0x156>
    1fbc:	40 c0       	rjmp	.+128    	; 0x203e <DIO_voidSetPinValue+0x1d6>
    1fbe:	53 c0       	rjmp	.+166    	; 0x2066 <DIO_voidSetPinValue+0x1fe>
					{
					case DIO_PORTA:
						CLR_BIT(DIO_PORTA_REG,Copy_u8PinId);
    1fc0:	ab e3       	ldi	r26, 0x3B	; 59
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	eb e3       	ldi	r30, 0x3B	; 59
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	48 2f       	mov	r20, r24
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	02 2e       	mov	r0, r18
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <DIO_voidSetPinValue+0x176>
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	0a 94       	dec	r0
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <DIO_voidSetPinValue+0x172>
    1fe2:	80 95       	com	r24
    1fe4:	84 23       	and	r24, r20
    1fe6:	8c 93       	st	X, r24
    1fe8:	3e c0       	rjmp	.+124    	; 0x2066 <DIO_voidSetPinValue+0x1fe>
					break;

					case DIO_PORTB:
						CLR_BIT(DIO_PORTB_REG,Copy_u8PinId);
    1fea:	a8 e3       	ldi	r26, 0x38	; 56
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e8 e3       	ldi	r30, 0x38	; 56
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	48 2f       	mov	r20, r24
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	02 2e       	mov	r0, r18
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <DIO_voidSetPinValue+0x1a0>
    2004:	88 0f       	add	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	0a 94       	dec	r0
    200a:	e2 f7       	brpl	.-8      	; 0x2004 <DIO_voidSetPinValue+0x19c>
    200c:	80 95       	com	r24
    200e:	84 23       	and	r24, r20
    2010:	8c 93       	st	X, r24
    2012:	29 c0       	rjmp	.+82     	; 0x2066 <DIO_voidSetPinValue+0x1fe>
					break;

					case DIO_PORTC:
						CLR_BIT(DIO_PORTC_REG,Copy_u8PinId);
    2014:	a5 e3       	ldi	r26, 0x35	; 53
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e5 e3       	ldi	r30, 0x35	; 53
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	48 2f       	mov	r20, r24
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	02 2e       	mov	r0, r18
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <DIO_voidSetPinValue+0x1ca>
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	0a 94       	dec	r0
    2034:	e2 f7       	brpl	.-8      	; 0x202e <DIO_voidSetPinValue+0x1c6>
    2036:	80 95       	com	r24
    2038:	84 23       	and	r24, r20
    203a:	8c 93       	st	X, r24
    203c:	14 c0       	rjmp	.+40     	; 0x2066 <DIO_voidSetPinValue+0x1fe>
					break;


					case DIO_PORTD:
						CLR_BIT(DIO_PORTD_REG,Copy_u8PinId);
    203e:	a2 e3       	ldi	r26, 0x32	; 50
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e2 e3       	ldi	r30, 0x32	; 50
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	48 2f       	mov	r20, r24
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	28 2f       	mov	r18, r24
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	02 2e       	mov	r0, r18
    2056:	02 c0       	rjmp	.+4      	; 0x205c <DIO_voidSetPinValue+0x1f4>
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	0a 94       	dec	r0
    205e:	e2 f7       	brpl	.-8      	; 0x2058 <DIO_voidSetPinValue+0x1f0>
    2060:	80 95       	com	r24
    2062:	84 23       	and	r24, r20
    2064:	8c 93       	st	X, r24

			break;
		}


}
    2066:	29 96       	adiw	r28, 0x09	; 9
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8PortId,u8 Copy_u8PinId)
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	00 d0       	rcall	.+0      	; 0x207e <DIO_u8GetPinValue+0x6>
    207e:	00 d0       	rcall	.+0      	; 0x2080 <DIO_u8GetPinValue+0x8>
    2080:	0f 92       	push	r0
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	8a 83       	std	Y+2, r24	; 0x02
    2088:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ReturnedValue=255;
    208a:	8f ef       	ldi	r24, 0xFF	; 255
    208c:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_u8PortId)
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	3d 83       	std	Y+5, r19	; 0x05
    2096:	2c 83       	std	Y+4, r18	; 0x04
    2098:	4c 81       	ldd	r20, Y+4	; 0x04
    209a:	5d 81       	ldd	r21, Y+5	; 0x05
    209c:	41 30       	cpi	r20, 0x01	; 1
    209e:	51 05       	cpc	r21, r1
    20a0:	41 f1       	breq	.+80     	; 0x20f2 <DIO_u8GetPinValue+0x7a>
    20a2:	8c 81       	ldd	r24, Y+4	; 0x04
    20a4:	9d 81       	ldd	r25, Y+5	; 0x05
    20a6:	82 30       	cpi	r24, 0x02	; 2
    20a8:	91 05       	cpc	r25, r1
    20aa:	34 f4       	brge	.+12     	; 0x20b8 <DIO_u8GetPinValue+0x40>
    20ac:	2c 81       	ldd	r18, Y+4	; 0x04
    20ae:	3d 81       	ldd	r19, Y+5	; 0x05
    20b0:	21 15       	cp	r18, r1
    20b2:	31 05       	cpc	r19, r1
    20b4:	61 f0       	breq	.+24     	; 0x20ce <DIO_u8GetPinValue+0x56>
    20b6:	52 c0       	rjmp	.+164    	; 0x215c <DIO_u8GetPinValue+0xe4>
    20b8:	4c 81       	ldd	r20, Y+4	; 0x04
    20ba:	5d 81       	ldd	r21, Y+5	; 0x05
    20bc:	42 30       	cpi	r20, 0x02	; 2
    20be:	51 05       	cpc	r21, r1
    20c0:	51 f1       	breq	.+84     	; 0x2116 <DIO_u8GetPinValue+0x9e>
    20c2:	8c 81       	ldd	r24, Y+4	; 0x04
    20c4:	9d 81       	ldd	r25, Y+5	; 0x05
    20c6:	83 30       	cpi	r24, 0x03	; 3
    20c8:	91 05       	cpc	r25, r1
    20ca:	b9 f1       	breq	.+110    	; 0x213a <DIO_u8GetPinValue+0xc2>
    20cc:	47 c0       	rjmp	.+142    	; 0x215c <DIO_u8GetPinValue+0xe4>
						{
						case DIO_PORTA:
						Local_u8ReturnedValue=GET_BIT(DIO_PINA_REG,Copy_u8PinId);
    20ce:	e9 e3       	ldi	r30, 0x39	; 57
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	88 2f       	mov	r24, r24
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a9 01       	movw	r20, r18
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <DIO_u8GetPinValue+0x6e>
    20e2:	55 95       	asr	r21
    20e4:	47 95       	ror	r20
    20e6:	8a 95       	dec	r24
    20e8:	e2 f7       	brpl	.-8      	; 0x20e2 <DIO_u8GetPinValue+0x6a>
    20ea:	ca 01       	movw	r24, r20
    20ec:	81 70       	andi	r24, 0x01	; 1
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	35 c0       	rjmp	.+106    	; 0x215c <DIO_u8GetPinValue+0xe4>
						break;

						case DIO_PORTB:
						Local_u8ReturnedValue=GET_BIT(DIO_PINB_REG,Copy_u8PinId);
    20f2:	e6 e3       	ldi	r30, 0x36	; 54
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a9 01       	movw	r20, r18
    2104:	02 c0       	rjmp	.+4      	; 0x210a <DIO_u8GetPinValue+0x92>
    2106:	55 95       	asr	r21
    2108:	47 95       	ror	r20
    210a:	8a 95       	dec	r24
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <DIO_u8GetPinValue+0x8e>
    210e:	ca 01       	movw	r24, r20
    2110:	81 70       	andi	r24, 0x01	; 1
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	23 c0       	rjmp	.+70     	; 0x215c <DIO_u8GetPinValue+0xe4>
						break;

						case DIO_PORTC:
						Local_u8ReturnedValue=GET_BIT(DIO_PINC_REG,Copy_u8PinId);
    2116:	e3 e3       	ldi	r30, 0x33	; 51
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	88 2f       	mov	r24, r24
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a9 01       	movw	r20, r18
    2128:	02 c0       	rjmp	.+4      	; 0x212e <DIO_u8GetPinValue+0xb6>
    212a:	55 95       	asr	r21
    212c:	47 95       	ror	r20
    212e:	8a 95       	dec	r24
    2130:	e2 f7       	brpl	.-8      	; 0x212a <DIO_u8GetPinValue+0xb2>
    2132:	ca 01       	movw	r24, r20
    2134:	81 70       	andi	r24, 0x01	; 1
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	11 c0       	rjmp	.+34     	; 0x215c <DIO_u8GetPinValue+0xe4>
						break;


						case DIO_PORTD:
						Local_u8ReturnedValue=GET_BIT(DIO_PIND_REG,Copy_u8PinId);
    213a:	e0 e3       	ldi	r30, 0x30	; 48
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	a9 01       	movw	r20, r18
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <DIO_u8GetPinValue+0xda>
    214e:	55 95       	asr	r21
    2150:	47 95       	ror	r20
    2152:	8a 95       	dec	r24
    2154:	e2 f7       	brpl	.-8      	; 0x214e <DIO_u8GetPinValue+0xd6>
    2156:	ca 01       	movw	r24, r20
    2158:	81 70       	andi	r24, 0x01	; 1
    215a:	89 83       	std	Y+1, r24	; 0x01
						break;
						}



	return Local_u8ReturnedValue;
    215c:	89 81       	ldd	r24, Y+1	; 0x01
}
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection (u8 Copy_u8PortId,u8 Copy_u8Direction)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	28 97       	sbiw	r28, 0x08	; 8
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Direction)
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	38 87       	std	Y+8, r19	; 0x08
    218e:	2f 83       	std	Y+7, r18	; 0x07
    2190:	8f 81       	ldd	r24, Y+7	; 0x07
    2192:	98 85       	ldd	r25, Y+8	; 0x08
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	c9 f1       	breq	.+114    	; 0x220a <DIO_voidSetPortDirection+0x9c>
    2198:	2f 81       	ldd	r18, Y+7	; 0x07
    219a:	38 85       	ldd	r19, Y+8	; 0x08
    219c:	21 30       	cpi	r18, 0x01	; 1
    219e:	31 05       	cpc	r19, r1
    21a0:	09 f0       	breq	.+2      	; 0x21a4 <DIO_voidSetPortDirection+0x36>
    21a2:	61 c0       	rjmp	.+194    	; 0x2266 <DIO_voidSetPortDirection+0xf8>
	{

	case DIO_OUTPUT:

		switch(Copy_u8PortId)
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	3e 83       	std	Y+6, r19	; 0x06
    21ac:	2d 83       	std	Y+5, r18	; 0x05
    21ae:	8d 81       	ldd	r24, Y+5	; 0x05
    21b0:	9e 81       	ldd	r25, Y+6	; 0x06
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	91 05       	cpc	r25, r1
    21b6:	d1 f0       	breq	.+52     	; 0x21ec <DIO_voidSetPortDirection+0x7e>
    21b8:	2d 81       	ldd	r18, Y+5	; 0x05
    21ba:	3e 81       	ldd	r19, Y+6	; 0x06
    21bc:	22 30       	cpi	r18, 0x02	; 2
    21be:	31 05       	cpc	r19, r1
    21c0:	2c f4       	brge	.+10     	; 0x21cc <DIO_voidSetPortDirection+0x5e>
    21c2:	8d 81       	ldd	r24, Y+5	; 0x05
    21c4:	9e 81       	ldd	r25, Y+6	; 0x06
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	61 f0       	breq	.+24     	; 0x21e2 <DIO_voidSetPortDirection+0x74>
    21ca:	4d c0       	rjmp	.+154    	; 0x2266 <DIO_voidSetPortDirection+0xf8>
    21cc:	2d 81       	ldd	r18, Y+5	; 0x05
    21ce:	3e 81       	ldd	r19, Y+6	; 0x06
    21d0:	22 30       	cpi	r18, 0x02	; 2
    21d2:	31 05       	cpc	r19, r1
    21d4:	81 f0       	breq	.+32     	; 0x21f6 <DIO_voidSetPortDirection+0x88>
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	83 30       	cpi	r24, 0x03	; 3
    21dc:	91 05       	cpc	r25, r1
    21de:	81 f0       	breq	.+32     	; 0x2200 <DIO_voidSetPortDirection+0x92>
    21e0:	42 c0       	rjmp	.+132    	; 0x2266 <DIO_voidSetPortDirection+0xf8>
		{
		case DIO_PORTA:
			DIO_DDRA_REG=DIO_PORT_OUTPUT;
    21e2:	ea e3       	ldi	r30, 0x3A	; 58
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	8f ef       	ldi	r24, 0xFF	; 255
    21e8:	80 83       	st	Z, r24
    21ea:	3d c0       	rjmp	.+122    	; 0x2266 <DIO_voidSetPortDirection+0xf8>
			break;

		case DIO_PORTB:
			DIO_DDRB_REG=DIO_PORT_OUTPUT;
    21ec:	e7 e3       	ldi	r30, 0x37	; 55
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	8f ef       	ldi	r24, 0xFF	; 255
    21f2:	80 83       	st	Z, r24
    21f4:	38 c0       	rjmp	.+112    	; 0x2266 <DIO_voidSetPortDirection+0xf8>
		break;

		case DIO_PORTC:
			DIO_DDRC_REG=DIO_PORT_OUTPUT;
    21f6:	e4 e3       	ldi	r30, 0x34	; 52
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	8f ef       	ldi	r24, 0xFF	; 255
    21fc:	80 83       	st	Z, r24
    21fe:	33 c0       	rjmp	.+102    	; 0x2266 <DIO_voidSetPortDirection+0xf8>
		break;


		case DIO_PORTD:
			DIO_DDRD_REG=DIO_PORT_OUTPUT;
    2200:	e1 e3       	ldi	r30, 0x31	; 49
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	8f ef       	ldi	r24, 0xFF	; 255
    2206:	80 83       	st	Z, r24
    2208:	2e c0       	rjmp	.+92     	; 0x2266 <DIO_voidSetPortDirection+0xf8>



	case DIO_INPUT:

		switch(Copy_u8PortId)
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	3c 83       	std	Y+4, r19	; 0x04
    2212:	2b 83       	std	Y+3, r18	; 0x03
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	9c 81       	ldd	r25, Y+4	; 0x04
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	91 05       	cpc	r25, r1
    221c:	c9 f0       	breq	.+50     	; 0x2250 <DIO_voidSetPortDirection+0xe2>
    221e:	2b 81       	ldd	r18, Y+3	; 0x03
    2220:	3c 81       	ldd	r19, Y+4	; 0x04
    2222:	22 30       	cpi	r18, 0x02	; 2
    2224:	31 05       	cpc	r19, r1
    2226:	2c f4       	brge	.+10     	; 0x2232 <DIO_voidSetPortDirection+0xc4>
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	61 f0       	breq	.+24     	; 0x2248 <DIO_voidSetPortDirection+0xda>
    2230:	1a c0       	rjmp	.+52     	; 0x2266 <DIO_voidSetPortDirection+0xf8>
    2232:	2b 81       	ldd	r18, Y+3	; 0x03
    2234:	3c 81       	ldd	r19, Y+4	; 0x04
    2236:	22 30       	cpi	r18, 0x02	; 2
    2238:	31 05       	cpc	r19, r1
    223a:	71 f0       	breq	.+28     	; 0x2258 <DIO_voidSetPortDirection+0xea>
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	9c 81       	ldd	r25, Y+4	; 0x04
    2240:	83 30       	cpi	r24, 0x03	; 3
    2242:	91 05       	cpc	r25, r1
    2244:	69 f0       	breq	.+26     	; 0x2260 <DIO_voidSetPortDirection+0xf2>
    2246:	0f c0       	rjmp	.+30     	; 0x2266 <DIO_voidSetPortDirection+0xf8>
				{
				case DIO_PORTA:
					DIO_DDRA_REG=DIO_PORT_INPUT;
    2248:	ea e3       	ldi	r30, 0x3A	; 58
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	10 82       	st	Z, r1
    224e:	0b c0       	rjmp	.+22     	; 0x2266 <DIO_voidSetPortDirection+0xf8>
				break;

				case DIO_PORTB:
					DIO_DDRB_REG=DIO_PORT_INPUT;
    2250:	e7 e3       	ldi	r30, 0x37	; 55
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	10 82       	st	Z, r1
    2256:	07 c0       	rjmp	.+14     	; 0x2266 <DIO_voidSetPortDirection+0xf8>
				break;

				case DIO_PORTC:
					DIO_DDRC_REG=DIO_PORT_INPUT;
    2258:	e4 e3       	ldi	r30, 0x34	; 52
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	10 82       	st	Z, r1
    225e:	03 c0       	rjmp	.+6      	; 0x2266 <DIO_voidSetPortDirection+0xf8>
				break;


				case DIO_PORTD:
					DIO_DDRD_REG=DIO_PORT_INPUT;
    2260:	e1 e3       	ldi	r30, 0x31	; 49
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	10 82       	st	Z, r1
				break;
				}
	}
}
    2266:	28 96       	adiw	r28, 0x08	; 8
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(u8 Copy_u8PortId,u8 Copy_u8Value)
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	00 d0       	rcall	.+0      	; 0x227e <DIO_voidSetPortValue+0x6>
    227e:	00 d0       	rcall	.+0      	; 0x2280 <DIO_voidSetPortValue+0x8>
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	89 83       	std	Y+1, r24	; 0x01
    2286:	6a 83       	std	Y+2, r22	; 0x02


			switch(Copy_u8PortId)
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	3c 83       	std	Y+4, r19	; 0x04
    2290:	2b 83       	std	Y+3, r18	; 0x03
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	9c 81       	ldd	r25, Y+4	; 0x04
    2296:	81 30       	cpi	r24, 0x01	; 1
    2298:	91 05       	cpc	r25, r1
    229a:	d1 f0       	breq	.+52     	; 0x22d0 <DIO_voidSetPortValue+0x58>
    229c:	2b 81       	ldd	r18, Y+3	; 0x03
    229e:	3c 81       	ldd	r19, Y+4	; 0x04
    22a0:	22 30       	cpi	r18, 0x02	; 2
    22a2:	31 05       	cpc	r19, r1
    22a4:	2c f4       	brge	.+10     	; 0x22b0 <DIO_voidSetPortValue+0x38>
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	9c 81       	ldd	r25, Y+4	; 0x04
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	61 f0       	breq	.+24     	; 0x22c6 <DIO_voidSetPortValue+0x4e>
    22ae:	1e c0       	rjmp	.+60     	; 0x22ec <DIO_voidSetPortValue+0x74>
    22b0:	2b 81       	ldd	r18, Y+3	; 0x03
    22b2:	3c 81       	ldd	r19, Y+4	; 0x04
    22b4:	22 30       	cpi	r18, 0x02	; 2
    22b6:	31 05       	cpc	r19, r1
    22b8:	81 f0       	breq	.+32     	; 0x22da <DIO_voidSetPortValue+0x62>
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	83 30       	cpi	r24, 0x03	; 3
    22c0:	91 05       	cpc	r25, r1
    22c2:	81 f0       	breq	.+32     	; 0x22e4 <DIO_voidSetPortValue+0x6c>
    22c4:	13 c0       	rjmp	.+38     	; 0x22ec <DIO_voidSetPortValue+0x74>
			{
			case DIO_PORTA:
				DIO_PORTA_REG=Copy_u8Value;
    22c6:	eb e3       	ldi	r30, 0x3B	; 59
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	80 83       	st	Z, r24
    22ce:	0e c0       	rjmp	.+28     	; 0x22ec <DIO_voidSetPortValue+0x74>
			break;

			case DIO_PORTB:
				DIO_PORTB_REG=Copy_u8Value;
    22d0:	e8 e3       	ldi	r30, 0x38	; 56
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	80 83       	st	Z, r24
    22d8:	09 c0       	rjmp	.+18     	; 0x22ec <DIO_voidSetPortValue+0x74>
			break;

			case DIO_PORTC:
				DIO_PORTC_REG=Copy_u8Value;
    22da:	e5 e3       	ldi	r30, 0x35	; 53
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	80 83       	st	Z, r24
    22e2:	04 c0       	rjmp	.+8      	; 0x22ec <DIO_voidSetPortValue+0x74>
			break;


			case DIO_PORTD:
				DIO_PORTD_REG=Copy_u8Value;
    22e4:	e2 e3       	ldi	r30, 0x32	; 50
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	80 83       	st	Z, r24
			break;
			}

}
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <DIO_u8GetPortValue>:




u8 DIO_u8GetPortValue(u8 Copy_u8PortId)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <DIO_u8GetPortValue+0x6>
    2300:	00 d0       	rcall	.+0      	; 0x2302 <DIO_u8GetPortValue+0x8>
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ReturnedValue=255;
    2308:	8f ef       	ldi	r24, 0xFF	; 255
    230a:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_u8PortId)
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	3c 83       	std	Y+4, r19	; 0x04
    2314:	2b 83       	std	Y+3, r18	; 0x03
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	81 30       	cpi	r24, 0x01	; 1
    231c:	91 05       	cpc	r25, r1
    231e:	d1 f0       	breq	.+52     	; 0x2354 <DIO_u8GetPortValue+0x5a>
    2320:	2b 81       	ldd	r18, Y+3	; 0x03
    2322:	3c 81       	ldd	r19, Y+4	; 0x04
    2324:	22 30       	cpi	r18, 0x02	; 2
    2326:	31 05       	cpc	r19, r1
    2328:	2c f4       	brge	.+10     	; 0x2334 <DIO_u8GetPortValue+0x3a>
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	61 f0       	breq	.+24     	; 0x234a <DIO_u8GetPortValue+0x50>
    2332:	1e c0       	rjmp	.+60     	; 0x2370 <DIO_u8GetPortValue+0x76>
    2334:	2b 81       	ldd	r18, Y+3	; 0x03
    2336:	3c 81       	ldd	r19, Y+4	; 0x04
    2338:	22 30       	cpi	r18, 0x02	; 2
    233a:	31 05       	cpc	r19, r1
    233c:	81 f0       	breq	.+32     	; 0x235e <DIO_u8GetPortValue+0x64>
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	83 30       	cpi	r24, 0x03	; 3
    2344:	91 05       	cpc	r25, r1
    2346:	81 f0       	breq	.+32     	; 0x2368 <DIO_u8GetPortValue+0x6e>
    2348:	13 c0       	rjmp	.+38     	; 0x2370 <DIO_u8GetPortValue+0x76>
						{
						case DIO_PORTA:
						Local_u8ReturnedValue=DIO_PINA_REG;
    234a:	e9 e3       	ldi	r30, 0x39	; 57
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	89 83       	std	Y+1, r24	; 0x01
    2352:	0e c0       	rjmp	.+28     	; 0x2370 <DIO_u8GetPortValue+0x76>
						break;

						case DIO_PORTB:
						Local_u8ReturnedValue=DIO_PINB_REG;
    2354:	e6 e3       	ldi	r30, 0x36	; 54
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	09 c0       	rjmp	.+18     	; 0x2370 <DIO_u8GetPortValue+0x76>
						break;

						case DIO_PORTC:
						Local_u8ReturnedValue=DIO_PINC_REG;
    235e:	e3 e3       	ldi	r30, 0x33	; 51
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	04 c0       	rjmp	.+8      	; 0x2370 <DIO_u8GetPortValue+0x76>
						break;


						case DIO_PORTD:
						Local_u8ReturnedValue=DIO_PIND_REG;
    2368:	e0 e3       	ldi	r30, 0x30	; 48
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	89 83       	std	Y+1, r24	; 0x01
						break;
						}



	return Local_u8ReturnedValue;
    2370:	89 81       	ldd	r24, Y+1	; 0x01
}
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <ADC_voidInit>:




void ADC_voidInit(u8 Copy_u8ADC_V_Mode	,	u8 Copy_u8ADC_Mode	,	u8 Copy_u8ADC_Adjust)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	29 97       	sbiw	r28, 0x09	; 9
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	89 83       	std	Y+1, r24	; 0x01
    2396:	6a 83       	std	Y+2, r22	; 0x02
    2398:	4b 83       	std	Y+3, r20	; 0x03


	//Select Division Factor 64
	CLR_BIT(ADCSRA_REG,0);
    239a:	a6 e2       	ldi	r26, 0x26	; 38
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e6 e2       	ldi	r30, 0x26	; 38
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	8e 7f       	andi	r24, 0xFE	; 254
    23a6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,1);
    23a8:	a6 e2       	ldi	r26, 0x26	; 38
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e6 e2       	ldi	r30, 0x26	; 38
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	82 60       	ori	r24, 0x02	; 2
    23b4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,2);
    23b6:	a6 e2       	ldi	r26, 0x26	; 38
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e6 e2       	ldi	r30, 0x26	; 38
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	84 60       	ori	r24, 0x04	; 4
    23c2:	8c 93       	st	X, r24

	switch(Copy_u8ADC_V_Mode)
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	28 2f       	mov	r18, r24
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	39 87       	std	Y+9, r19	; 0x09
    23cc:	28 87       	std	Y+8, r18	; 0x08
    23ce:	88 85       	ldd	r24, Y+8	; 0x08
    23d0:	99 85       	ldd	r25, Y+9	; 0x09
    23d2:	81 30       	cpi	r24, 0x01	; 1
    23d4:	91 05       	cpc	r25, r1
    23d6:	c1 f0       	breq	.+48     	; 0x2408 <ADC_voidInit+0x88>
    23d8:	28 85       	ldd	r18, Y+8	; 0x08
    23da:	39 85       	ldd	r19, Y+9	; 0x09
    23dc:	22 30       	cpi	r18, 0x02	; 2
    23de:	31 05       	cpc	r19, r1
    23e0:	11 f1       	breq	.+68     	; 0x2426 <ADC_voidInit+0xa6>
    23e2:	88 85       	ldd	r24, Y+8	; 0x08
    23e4:	99 85       	ldd	r25, Y+9	; 0x09
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	61 f5       	brne	.+88     	; 0x2442 <ADC_voidInit+0xc2>
	{
	case ADC_AREF:
		CLR_BIT(ADMUX_REG,7);
    23ea:	a7 e2       	ldi	r26, 0x27	; 39
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e7 e2       	ldi	r30, 0x27	; 39
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	8f 77       	andi	r24, 0x7F	; 127
    23f6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,6);
    23f8:	a7 e2       	ldi	r26, 0x27	; 39
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e7 e2       	ldi	r30, 0x27	; 39
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	8f 7b       	andi	r24, 0xBF	; 191
    2404:	8c 93       	st	X, r24
    2406:	1d c0       	rjmp	.+58     	; 0x2442 <ADC_voidInit+0xc2>

		break;

	case ADC_AVCC_Cap:
		CLR_BIT(ADMUX_REG,7);
    2408:	a7 e2       	ldi	r26, 0x27	; 39
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e7 e2       	ldi	r30, 0x27	; 39
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	8f 77       	andi	r24, 0x7F	; 127
    2414:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,6);
    2416:	a7 e2       	ldi	r26, 0x27	; 39
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	e7 e2       	ldi	r30, 0x27	; 39
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	80 64       	ori	r24, 0x40	; 64
    2422:	8c 93       	st	X, r24
    2424:	0e c0       	rjmp	.+28     	; 0x2442 <ADC_voidInit+0xc2>

		break;


	case ADC_Internal_volt:
		SET_BIT(ADMUX_REG,7);
    2426:	a7 e2       	ldi	r26, 0x27	; 39
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e7 e2       	ldi	r30, 0x27	; 39
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	80 68       	ori	r24, 0x80	; 128
    2432:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,6);
    2434:	a7 e2       	ldi	r26, 0x27	; 39
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e7 e2       	ldi	r30, 0x27	; 39
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	80 64       	ori	r24, 0x40	; 64
    2440:	8c 93       	st	X, r24
		break;


	}

	switch(Copy_u8ADC_Mode)
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	28 2f       	mov	r18, r24
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	3f 83       	std	Y+7, r19	; 0x07
    244a:	2e 83       	std	Y+6, r18	; 0x06
    244c:	8e 81       	ldd	r24, Y+6	; 0x06
    244e:	9f 81       	ldd	r25, Y+7	; 0x07
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	31 f0       	breq	.+12     	; 0x2460 <ADC_voidInit+0xe0>
    2454:	2e 81       	ldd	r18, Y+6	; 0x06
    2456:	3f 81       	ldd	r19, Y+7	; 0x07
    2458:	21 30       	cpi	r18, 0x01	; 1
    245a:	31 05       	cpc	r19, r1
    245c:	49 f0       	breq	.+18     	; 0x2470 <ADC_voidInit+0xf0>
    245e:	0f c0       	rjmp	.+30     	; 0x247e <ADC_voidInit+0xfe>
	{

	case ADC_Auto_Trigger:

		SET_BIT(ADCSRA_REG,5);
    2460:	a6 e2       	ldi	r26, 0x26	; 38
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e6 e2       	ldi	r30, 0x26	; 38
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	80 62       	ori	r24, 0x20	; 32
    246c:	8c 93       	st	X, r24
    246e:	07 c0       	rjmp	.+14     	; 0x247e <ADC_voidInit+0xfe>

		break;


	case ADC_Single_Conversion:
		CLR_BIT(ADCSRA_REG,5);
    2470:	a6 e2       	ldi	r26, 0x26	; 38
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	e6 e2       	ldi	r30, 0x26	; 38
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	8f 7d       	andi	r24, 0xDF	; 223
    247c:	8c 93       	st	X, r24
		break;

	}


	switch(Copy_u8ADC_Adjust)
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	3d 83       	std	Y+5, r19	; 0x05
    2486:	2c 83       	std	Y+4, r18	; 0x04
    2488:	8c 81       	ldd	r24, Y+4	; 0x04
    248a:	9d 81       	ldd	r25, Y+5	; 0x05
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	31 f0       	breq	.+12     	; 0x249c <ADC_voidInit+0x11c>
    2490:	2c 81       	ldd	r18, Y+4	; 0x04
    2492:	3d 81       	ldd	r19, Y+5	; 0x05
    2494:	21 30       	cpi	r18, 0x01	; 1
    2496:	31 05       	cpc	r19, r1
    2498:	49 f0       	breq	.+18     	; 0x24ac <ADC_voidInit+0x12c>
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <ADC_voidInit+0x13a>
	{

	case ADC_Left_Adjust:
		SET_BIT(ADMUX_REG,5);
    249c:	a7 e2       	ldi	r26, 0x27	; 39
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e7 e2       	ldi	r30, 0x27	; 39
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	80 62       	ori	r24, 0x20	; 32
    24a8:	8c 93       	st	X, r24
    24aa:	07 c0       	rjmp	.+14     	; 0x24ba <ADC_voidInit+0x13a>

		break;


	case ADC_Right_Adjust:
		CLR_BIT(ADMUX_REG,5);
    24ac:	a7 e2       	ldi	r26, 0x27	; 39
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e7 e2       	ldi	r30, 0x27	; 39
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	8f 7d       	andi	r24, 0xDF	; 223
    24b8:	8c 93       	st	X, r24
		break;
	}

	//Enable ADC
	SET_BIT(ADCSRA_REG,7);
    24ba:	a6 e2       	ldi	r26, 0x26	; 38
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e6 e2       	ldi	r30, 0x26	; 38
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	80 68       	ori	r24, 0x80	; 128
    24c6:	8c 93       	st	X, r24





}
    24c8:	29 96       	adiw	r28, 0x09	; 9
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 Copy_u8ADC_Channel)
{
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	00 d0       	rcall	.+0      	; 0x24e0 <ADC_voidStartConversion+0x6>
    24e0:	0f 92       	push	r0
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	89 83       	std	Y+1, r24	; 0x01


	//Select Channel
	switch(Copy_u8ADC_Channel)
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	3b 83       	std	Y+3, r19	; 0x03
    24f0:	2a 83       	std	Y+2, r18	; 0x02
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	9b 81       	ldd	r25, Y+3	; 0x03
    24f6:	83 30       	cpi	r24, 0x03	; 3
    24f8:	91 05       	cpc	r25, r1
    24fa:	09 f4       	brne	.+2      	; 0x24fe <ADC_voidStartConversion+0x24>
    24fc:	70 c0       	rjmp	.+224    	; 0x25de <ADC_voidStartConversion+0x104>
    24fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2500:	3b 81       	ldd	r19, Y+3	; 0x03
    2502:	24 30       	cpi	r18, 0x04	; 4
    2504:	31 05       	cpc	r19, r1
    2506:	84 f4       	brge	.+32     	; 0x2528 <ADC_voidStartConversion+0x4e>
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	9b 81       	ldd	r25, Y+3	; 0x03
    250c:	81 30       	cpi	r24, 0x01	; 1
    250e:	91 05       	cpc	r25, r1
    2510:	d1 f1       	breq	.+116    	; 0x2586 <ADC_voidStartConversion+0xac>
    2512:	2a 81       	ldd	r18, Y+2	; 0x02
    2514:	3b 81       	ldd	r19, Y+3	; 0x03
    2516:	22 30       	cpi	r18, 0x02	; 2
    2518:	31 05       	cpc	r19, r1
    251a:	0c f0       	brlt	.+2      	; 0x251e <ADC_voidStartConversion+0x44>
    251c:	4a c0       	rjmp	.+148    	; 0x25b2 <ADC_voidStartConversion+0xd8>
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	9b 81       	ldd	r25, Y+3	; 0x03
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	d1 f0       	breq	.+52     	; 0x255a <ADC_voidStartConversion+0x80>
    2526:	c8 c0       	rjmp	.+400    	; 0x26b8 <ADC_voidStartConversion+0x1de>
    2528:	2a 81       	ldd	r18, Y+2	; 0x02
    252a:	3b 81       	ldd	r19, Y+3	; 0x03
    252c:	25 30       	cpi	r18, 0x05	; 5
    252e:	31 05       	cpc	r19, r1
    2530:	09 f4       	brne	.+2      	; 0x2534 <ADC_voidStartConversion+0x5a>
    2532:	81 c0       	rjmp	.+258    	; 0x2636 <ADC_voidStartConversion+0x15c>
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	9b 81       	ldd	r25, Y+3	; 0x03
    2538:	85 30       	cpi	r24, 0x05	; 5
    253a:	91 05       	cpc	r25, r1
    253c:	0c f4       	brge	.+2      	; 0x2540 <ADC_voidStartConversion+0x66>
    253e:	65 c0       	rjmp	.+202    	; 0x260a <ADC_voidStartConversion+0x130>
    2540:	2a 81       	ldd	r18, Y+2	; 0x02
    2542:	3b 81       	ldd	r19, Y+3	; 0x03
    2544:	26 30       	cpi	r18, 0x06	; 6
    2546:	31 05       	cpc	r19, r1
    2548:	09 f4       	brne	.+2      	; 0x254c <ADC_voidStartConversion+0x72>
    254a:	8b c0       	rjmp	.+278    	; 0x2662 <ADC_voidStartConversion+0x188>
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	9b 81       	ldd	r25, Y+3	; 0x03
    2550:	87 30       	cpi	r24, 0x07	; 7
    2552:	91 05       	cpc	r25, r1
    2554:	09 f4       	brne	.+2      	; 0x2558 <ADC_voidStartConversion+0x7e>
    2556:	9b c0       	rjmp	.+310    	; 0x268e <ADC_voidStartConversion+0x1b4>
    2558:	af c0       	rjmp	.+350    	; 0x26b8 <ADC_voidStartConversion+0x1de>
	{

	case ADC_Channel_0:

		CLR_BIT(ADMUX_REG,0);
    255a:	a7 e2       	ldi	r26, 0x27	; 39
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e7 e2       	ldi	r30, 0x27	; 39
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	8e 7f       	andi	r24, 0xFE	; 254
    2566:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,1);
    2568:	a7 e2       	ldi	r26, 0x27	; 39
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e7 e2       	ldi	r30, 0x27	; 39
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8d 7f       	andi	r24, 0xFD	; 253
    2574:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,2);
    2576:	a7 e2       	ldi	r26, 0x27	; 39
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e7 e2       	ldi	r30, 0x27	; 39
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	8b 7f       	andi	r24, 0xFB	; 251
    2582:	8c 93       	st	X, r24
    2584:	99 c0       	rjmp	.+306    	; 0x26b8 <ADC_voidStartConversion+0x1de>

		break;


	case ADC_Channel_1:
		SET_BIT(ADMUX_REG,0);
    2586:	a7 e2       	ldi	r26, 0x27	; 39
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e7 e2       	ldi	r30, 0x27	; 39
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	81 60       	ori	r24, 0x01	; 1
    2592:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,1);
    2594:	a7 e2       	ldi	r26, 0x27	; 39
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	e7 e2       	ldi	r30, 0x27	; 39
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	8d 7f       	andi	r24, 0xFD	; 253
    25a0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,2);
    25a2:	a7 e2       	ldi	r26, 0x27	; 39
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e7 e2       	ldi	r30, 0x27	; 39
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	8b 7f       	andi	r24, 0xFB	; 251
    25ae:	8c 93       	st	X, r24
    25b0:	83 c0       	rjmp	.+262    	; 0x26b8 <ADC_voidStartConversion+0x1de>

		break;

	case ADC_Channel_2:

		CLR_BIT(ADMUX_REG,0);
    25b2:	a7 e2       	ldi	r26, 0x27	; 39
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e7 e2       	ldi	r30, 0x27	; 39
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	8e 7f       	andi	r24, 0xFE	; 254
    25be:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,1);
    25c0:	a7 e2       	ldi	r26, 0x27	; 39
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e7 e2       	ldi	r30, 0x27	; 39
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	82 60       	ori	r24, 0x02	; 2
    25cc:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,2);
    25ce:	a7 e2       	ldi	r26, 0x27	; 39
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e7 e2       	ldi	r30, 0x27	; 39
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	8b 7f       	andi	r24, 0xFB	; 251
    25da:	8c 93       	st	X, r24
    25dc:	6d c0       	rjmp	.+218    	; 0x26b8 <ADC_voidStartConversion+0x1de>

		break;

	case ADC_Channel_3:

		SET_BIT(ADMUX_REG,0);
    25de:	a7 e2       	ldi	r26, 0x27	; 39
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e7 e2       	ldi	r30, 0x27	; 39
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	81 60       	ori	r24, 0x01	; 1
    25ea:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,1);
    25ec:	a7 e2       	ldi	r26, 0x27	; 39
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e7 e2       	ldi	r30, 0x27	; 39
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	82 60       	ori	r24, 0x02	; 2
    25f8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,2);
    25fa:	a7 e2       	ldi	r26, 0x27	; 39
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e7 e2       	ldi	r30, 0x27	; 39
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	8b 7f       	andi	r24, 0xFB	; 251
    2606:	8c 93       	st	X, r24
    2608:	57 c0       	rjmp	.+174    	; 0x26b8 <ADC_voidStartConversion+0x1de>

		break;
	case ADC_Channel_4:


		CLR_BIT(ADMUX_REG,0);
    260a:	a7 e2       	ldi	r26, 0x27	; 39
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e7 e2       	ldi	r30, 0x27	; 39
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	8e 7f       	andi	r24, 0xFE	; 254
    2616:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,1);
    2618:	a7 e2       	ldi	r26, 0x27	; 39
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e7 e2       	ldi	r30, 0x27	; 39
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	8d 7f       	andi	r24, 0xFD	; 253
    2624:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,2);
    2626:	a7 e2       	ldi	r26, 0x27	; 39
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e7 e2       	ldi	r30, 0x27	; 39
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	84 60       	ori	r24, 0x04	; 4
    2632:	8c 93       	st	X, r24
    2634:	41 c0       	rjmp	.+130    	; 0x26b8 <ADC_voidStartConversion+0x1de>
		break;
	case ADC_Channel_5:
		SET_BIT(ADMUX_REG,0);
    2636:	a7 e2       	ldi	r26, 0x27	; 39
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e7 e2       	ldi	r30, 0x27	; 39
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	81 60       	ori	r24, 0x01	; 1
    2642:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,1);
    2644:	a7 e2       	ldi	r26, 0x27	; 39
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	e7 e2       	ldi	r30, 0x27	; 39
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	8d 7f       	andi	r24, 0xFD	; 253
    2650:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,2);
    2652:	a7 e2       	ldi	r26, 0x27	; 39
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	e7 e2       	ldi	r30, 0x27	; 39
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	84 60       	ori	r24, 0x04	; 4
    265e:	8c 93       	st	X, r24
    2660:	2b c0       	rjmp	.+86     	; 0x26b8 <ADC_voidStartConversion+0x1de>

		break;

	case ADC_Channel_6:

		CLR_BIT(ADMUX_REG,0);
    2662:	a7 e2       	ldi	r26, 0x27	; 39
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	e7 e2       	ldi	r30, 0x27	; 39
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	8e 7f       	andi	r24, 0xFE	; 254
    266e:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,1);
    2670:	a7 e2       	ldi	r26, 0x27	; 39
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e7 e2       	ldi	r30, 0x27	; 39
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	82 60       	ori	r24, 0x02	; 2
    267c:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,2);
    267e:	a7 e2       	ldi	r26, 0x27	; 39
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	e7 e2       	ldi	r30, 0x27	; 39
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	84 60       	ori	r24, 0x04	; 4
    268a:	8c 93       	st	X, r24
    268c:	15 c0       	rjmp	.+42     	; 0x26b8 <ADC_voidStartConversion+0x1de>
		break;



	case ADC_Channel_7:
		SET_BIT(ADMUX_REG,0);
    268e:	a7 e2       	ldi	r26, 0x27	; 39
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e7 e2       	ldi	r30, 0x27	; 39
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	81 60       	ori	r24, 0x01	; 1
    269a:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,1);
    269c:	a7 e2       	ldi	r26, 0x27	; 39
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e7 e2       	ldi	r30, 0x27	; 39
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	82 60       	ori	r24, 0x02	; 2
    26a8:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,2);
    26aa:	a7 e2       	ldi	r26, 0x27	; 39
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	e7 e2       	ldi	r30, 0x27	; 39
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	84 60       	ori	r24, 0x04	; 4
    26b6:	8c 93       	st	X, r24

		break;
	}

	//Single Conversion Start
	SET_BIT(ADCSRA_REG,6);
    26b8:	a6 e2       	ldi	r26, 0x26	; 38
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e6 e2       	ldi	r30, 0x26	; 38
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	80 64       	ori	r24, 0x40	; 64
    26c4:	8c 93       	st	X, r24


}
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <ADC_voidRead>:

u16 ADC_voidRead(){
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <ADC_voidRead+0x6>
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62

	u16 Local_Data;
	//wait for end of conversion
	while(GET_BIT(ADCSRA_REG,4)!=1);
    26dc:	e6 e2       	ldi	r30, 0x26	; 38
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	82 95       	swap	r24
    26e4:	8f 70       	andi	r24, 0x0F	; 15
    26e6:	88 2f       	mov	r24, r24
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	81 70       	andi	r24, 0x01	; 1
    26ec:	90 70       	andi	r25, 0x00	; 0
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	a9 f3       	breq	.-22     	; 0x26dc <ADC_voidRead+0xa>

	//clear flag
	SET_BIT(ADCSRA_REG,4);
    26f2:	a6 e2       	ldi	r26, 0x26	; 38
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	e6 e2       	ldi	r30, 0x26	; 38
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	80 61       	ori	r24, 0x10	; 16
    26fe:	8c 93       	st	X, r24

	if(GET_BIT(ADMUX_REG,5)==0)
    2700:	e7 e2       	ldi	r30, 0x27	; 39
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	82 95       	swap	r24
    2708:	86 95       	lsr	r24
    270a:	87 70       	andi	r24, 0x07	; 7
    270c:	88 2f       	mov	r24, r24
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	81 70       	andi	r24, 0x01	; 1
    2712:	90 70       	andi	r25, 0x00	; 0
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	39 f4       	brne	.+14     	; 0x2726 <ADC_voidRead+0x54>
	{
		Local_Data =ADCLH_REG;
    2718:	e4 e2       	ldi	r30, 0x24	; 36
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	91 81       	ldd	r25, Z+1	; 0x01
    2720:	9a 83       	std	Y+2, r25	; 0x02
    2722:	89 83       	std	Y+1, r24	; 0x01
    2724:	1b c0       	rjmp	.+54     	; 0x275c <ADC_voidRead+0x8a>

	}else
	{
		Local_Data=(ADCL_REG>>6);
    2726:	e4 e2       	ldi	r30, 0x24	; 36
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	82 95       	swap	r24
    272e:	86 95       	lsr	r24
    2730:	86 95       	lsr	r24
    2732:	83 70       	andi	r24, 0x03	; 3
    2734:	88 2f       	mov	r24, r24
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9a 83       	std	Y+2, r25	; 0x02
    273a:	89 83       	std	Y+1, r24	; 0x01
		Local_Data|=(ADCH_REG<<2);
    273c:	e5 e2       	ldi	r30, 0x25	; 37
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	88 2f       	mov	r24, r24
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	88 0f       	add	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	9c 01       	movw	r18, r24
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	82 2b       	or	r24, r18
    2756:	93 2b       	or	r25, r19
    2758:	9a 83       	std	Y+2, r25	; 0x02
    275a:	89 83       	std	Y+1, r24	; 0x01
	}


	//return data stored
	return Local_Data;
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	9a 81       	ldd	r25, Y+2	; 0x02

}
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <Stepper_voidInit>:
#include"Stepper_Private.h"
#include <util/delay.h>


void Stepper_voidInit()
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_OUTPUT);
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	41 e0       	ldi	r20, 0x01	; 1
    2778:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_PORT,STEPPER_Pink_PIN,DIO_OUTPUT);
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	61 e0       	ldi	r22, 0x01	; 1
    2780:	41 e0       	ldi	r20, 0x01	; 1
    2782:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_OUTPUT);
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	62 e0       	ldi	r22, 0x02	; 2
    278a:	41 e0       	ldi	r20, 0x01	; 1
    278c:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_PORT,STEPPER_Orange_PIN,DIO_OUTPUT);
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	63 e0       	ldi	r22, 0x03	; 3
    2794:	41 e0       	ldi	r20, 0x01	; 1
    2796:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>


		DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	60 e0       	ldi	r22, 0x00	; 0
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	61 e0       	ldi	r22, 0x01	; 1
    27a8:	40 e0       	ldi	r20, 0x00	; 0
    27aa:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	62 e0       	ldi	r22, 0x02	; 2
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	63 e0       	ldi	r22, 0x03	; 3
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>


}
    27c2:	cf 91       	pop	r28
    27c4:	df 91       	pop	r29
    27c6:	08 95       	ret

000027c8 <Stepper_voidON>:
void Stepper_voidON(u8 Copy_u8StepMode,u8 Copy_u8Direction,u16 Copy_u16Degree)
{
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <Stepper_voidON+0x6>
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <Stepper_voidON+0x8>
    27d0:	00 d0       	rcall	.+0      	; 0x27d2 <Stepper_voidON+0xa>
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	8b 83       	std	Y+3, r24	; 0x03
    27d8:	6c 83       	std	Y+4, r22	; 0x04
    27da:	5e 83       	std	Y+6, r21	; 0x06
    27dc:	4d 83       	std	Y+5, r20	; 0x05

	u16 Local_u16Counter;

	if(Copy_u8StepMode==STEPPER_FULL_STEP)
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	88 23       	and	r24, r24
    27e2:	09 f0       	breq	.+2      	; 0x27e6 <Stepper_voidON+0x1e>
    27e4:	4b c0       	rjmp	.+150    	; 0x287c <Stepper_voidON+0xb4>
	{
		if(Copy_u8Direction==STEPPER_ClockWise)
    27e6:	8c 81       	ldd	r24, Y+4	; 0x04
    27e8:	88 23       	and	r24, r24
    27ea:	11 f5       	brne	.+68     	; 0x2830 <Stepper_voidON+0x68>
		{
			for(Local_u16Counter=0;Local_u16Counter<((64*Copy_u16Degree)/45);Local_u16Counter++)
    27ec:	1a 82       	std	Y+2, r1	; 0x02
    27ee:	19 82       	std	Y+1, r1	; 0x01
    27f0:	07 c0       	rjmp	.+14     	; 0x2800 <Stepper_voidON+0x38>
			{

				Stepper_ClockWise_FullStep();
    27f2:	0e 94 92 14 	call	0x2924	; 0x2924 <Stepper_ClockWise_FullStep>

	if(Copy_u8StepMode==STEPPER_FULL_STEP)
	{
		if(Copy_u8Direction==STEPPER_ClockWise)
		{
			for(Local_u16Counter=0;Local_u16Counter<((64*Copy_u16Degree)/45);Local_u16Counter++)
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	9a 81       	ldd	r25, Y+2	; 0x02
    27fa:	01 96       	adiw	r24, 0x01	; 1
    27fc:	9a 83       	std	Y+2, r25	; 0x02
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	8d 81       	ldd	r24, Y+5	; 0x05
    2802:	9e 81       	ldd	r25, Y+6	; 0x06
    2804:	00 24       	eor	r0, r0
    2806:	96 95       	lsr	r25
    2808:	87 95       	ror	r24
    280a:	07 94       	ror	r0
    280c:	96 95       	lsr	r25
    280e:	87 95       	ror	r24
    2810:	07 94       	ror	r0
    2812:	98 2f       	mov	r25, r24
    2814:	80 2d       	mov	r24, r0
    2816:	2d e2       	ldi	r18, 0x2D	; 45
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	b9 01       	movw	r22, r18
    281c:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__udivmodhi4>
    2820:	cb 01       	movw	r24, r22
    2822:	9c 01       	movw	r18, r24
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	9a 81       	ldd	r25, Y+2	; 0x02
    2828:	82 17       	cp	r24, r18
    282a:	93 07       	cpc	r25, r19
    282c:	10 f3       	brcs	.-60     	; 0x27f2 <Stepper_voidON+0x2a>
    282e:	71 c0       	rjmp	.+226    	; 0x2912 <Stepper_voidON+0x14a>

				Stepper_ClockWise_FullStep();
			}


		}else if(Copy_u8Direction==STEPPER_CounterClockWise)
    2830:	8c 81       	ldd	r24, Y+4	; 0x04
    2832:	81 30       	cpi	r24, 0x01	; 1
    2834:	09 f0       	breq	.+2      	; 0x2838 <Stepper_voidON+0x70>
    2836:	6d c0       	rjmp	.+218    	; 0x2912 <Stepper_voidON+0x14a>
		{
			for(Local_u16Counter=0;Local_u16Counter<((64*Copy_u16Degree)/45);Local_u16Counter++)
    2838:	1a 82       	std	Y+2, r1	; 0x02
    283a:	19 82       	std	Y+1, r1	; 0x01
    283c:	07 c0       	rjmp	.+14     	; 0x284c <Stepper_voidON+0x84>
			{

				Stepper_CounterClockWise_FullStep();
    283e:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <Stepper_CounterClockWise_FullStep>
			}


		}else if(Copy_u8Direction==STEPPER_CounterClockWise)
		{
			for(Local_u16Counter=0;Local_u16Counter<((64*Copy_u16Degree)/45);Local_u16Counter++)
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	9a 81       	ldd	r25, Y+2	; 0x02
    2846:	01 96       	adiw	r24, 0x01	; 1
    2848:	9a 83       	std	Y+2, r25	; 0x02
    284a:	89 83       	std	Y+1, r24	; 0x01
    284c:	8d 81       	ldd	r24, Y+5	; 0x05
    284e:	9e 81       	ldd	r25, Y+6	; 0x06
    2850:	00 24       	eor	r0, r0
    2852:	96 95       	lsr	r25
    2854:	87 95       	ror	r24
    2856:	07 94       	ror	r0
    2858:	96 95       	lsr	r25
    285a:	87 95       	ror	r24
    285c:	07 94       	ror	r0
    285e:	98 2f       	mov	r25, r24
    2860:	80 2d       	mov	r24, r0
    2862:	2d e2       	ldi	r18, 0x2D	; 45
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	b9 01       	movw	r22, r18
    2868:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__udivmodhi4>
    286c:	cb 01       	movw	r24, r22
    286e:	9c 01       	movw	r18, r24
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	9a 81       	ldd	r25, Y+2	; 0x02
    2874:	82 17       	cp	r24, r18
    2876:	93 07       	cpc	r25, r19
    2878:	10 f3       	brcs	.-60     	; 0x283e <Stepper_voidON+0x76>
    287a:	4b c0       	rjmp	.+150    	; 0x2912 <Stepper_voidON+0x14a>
		}



	}
	else if(Copy_u8StepMode==STEPPER_HALF_STEP)
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	81 30       	cpi	r24, 0x01	; 1
    2880:	09 f0       	breq	.+2      	; 0x2884 <Stepper_voidON+0xbc>
    2882:	47 c0       	rjmp	.+142    	; 0x2912 <Stepper_voidON+0x14a>
	{
		if(Copy_u8Direction==STEPPER_ClockWise)
    2884:	8c 81       	ldd	r24, Y+4	; 0x04
    2886:	88 23       	and	r24, r24
    2888:	09 f5       	brne	.+66     	; 0x28cc <Stepper_voidON+0x104>
		{
			for(Local_u16Counter=0;Local_u16Counter<((32*Copy_u16Degree)/45);Local_u16Counter++)
    288a:	1a 82       	std	Y+2, r1	; 0x02
    288c:	19 82       	std	Y+1, r1	; 0x01
    288e:	07 c0       	rjmp	.+14     	; 0x289e <Stepper_voidON+0xd6>
			{

				Stepper_ClockWise_HalfStep();
    2890:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <Stepper_ClockWise_HalfStep>
	}
	else if(Copy_u8StepMode==STEPPER_HALF_STEP)
	{
		if(Copy_u8Direction==STEPPER_ClockWise)
		{
			for(Local_u16Counter=0;Local_u16Counter<((32*Copy_u16Degree)/45);Local_u16Counter++)
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	01 96       	adiw	r24, 0x01	; 1
    289a:	9a 83       	std	Y+2, r25	; 0x02
    289c:	89 83       	std	Y+1, r24	; 0x01
    289e:	8d 81       	ldd	r24, Y+5	; 0x05
    28a0:	9e 81       	ldd	r25, Y+6	; 0x06
    28a2:	88 0f       	add	r24, r24
    28a4:	99 1f       	adc	r25, r25
    28a6:	82 95       	swap	r24
    28a8:	92 95       	swap	r25
    28aa:	90 7f       	andi	r25, 0xF0	; 240
    28ac:	98 27       	eor	r25, r24
    28ae:	80 7f       	andi	r24, 0xF0	; 240
    28b0:	98 27       	eor	r25, r24
    28b2:	2d e2       	ldi	r18, 0x2D	; 45
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	b9 01       	movw	r22, r18
    28b8:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__udivmodhi4>
    28bc:	cb 01       	movw	r24, r22
    28be:	9c 01       	movw	r18, r24
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	9a 81       	ldd	r25, Y+2	; 0x02
    28c4:	82 17       	cp	r24, r18
    28c6:	93 07       	cpc	r25, r19
    28c8:	18 f3       	brcs	.-58     	; 0x2890 <Stepper_voidON+0xc8>
    28ca:	23 c0       	rjmp	.+70     	; 0x2912 <Stepper_voidON+0x14a>

				Stepper_ClockWise_HalfStep();
			}


		}else if(Copy_u8Direction==STEPPER_CounterClockWise)
    28cc:	8c 81       	ldd	r24, Y+4	; 0x04
    28ce:	81 30       	cpi	r24, 0x01	; 1
    28d0:	01 f5       	brne	.+64     	; 0x2912 <Stepper_voidON+0x14a>
		{
			for(Local_u16Counter=0;Local_u16Counter<((32*Copy_u16Degree)/45);Local_u16Counter++)
    28d2:	1a 82       	std	Y+2, r1	; 0x02
    28d4:	19 82       	std	Y+1, r1	; 0x01
    28d6:	07 c0       	rjmp	.+14     	; 0x28e6 <Stepper_voidON+0x11e>
			{

				Stepper_CounterClockWise_HalfStep();
    28d8:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <Stepper_CounterClockWise_HalfStep>
			}


		}else if(Copy_u8Direction==STEPPER_CounterClockWise)
		{
			for(Local_u16Counter=0;Local_u16Counter<((32*Copy_u16Degree)/45);Local_u16Counter++)
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	9a 81       	ldd	r25, Y+2	; 0x02
    28e0:	01 96       	adiw	r24, 0x01	; 1
    28e2:	9a 83       	std	Y+2, r25	; 0x02
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	8d 81       	ldd	r24, Y+5	; 0x05
    28e8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	82 95       	swap	r24
    28f0:	92 95       	swap	r25
    28f2:	90 7f       	andi	r25, 0xF0	; 240
    28f4:	98 27       	eor	r25, r24
    28f6:	80 7f       	andi	r24, 0xF0	; 240
    28f8:	98 27       	eor	r25, r24
    28fa:	2d e2       	ldi	r18, 0x2D	; 45
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	b9 01       	movw	r22, r18
    2900:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__udivmodhi4>
    2904:	cb 01       	movw	r24, r22
    2906:	9c 01       	movw	r18, r24
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	9a 81       	ldd	r25, Y+2	; 0x02
    290c:	82 17       	cp	r24, r18
    290e:	93 07       	cpc	r25, r19
    2910:	18 f3       	brcs	.-58     	; 0x28d8 <Stepper_voidON+0x110>

		}


	}
}
    2912:	26 96       	adiw	r28, 0x06	; 6
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	cd bf       	out	0x3d, r28	; 61
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <Stepper_ClockWise_FullStep>:


void Stepper_ClockWise_FullStep()
{
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	e8 97       	sbiw	r28, 0x38	; 56
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
	//Step1
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	60 e0       	ldi	r22, 0x00	; 0
    293c:	40 e0       	ldi	r20, 0x00	; 0
    293e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	61 e0       	ldi	r22, 0x01	; 1
    2946:	41 e0       	ldi	r20, 0x01	; 1
    2948:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	62 e0       	ldi	r22, 0x02	; 2
    2950:	41 e0       	ldi	r20, 0x01	; 1
    2952:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	63 e0       	ldi	r22, 0x03	; 3
    295a:	41 e0       	ldi	r20, 0x01	; 1
    295c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	aa e7       	ldi	r26, 0x7A	; 122
    2966:	b4 e4       	ldi	r27, 0x44	; 68
    2968:	8d ab       	std	Y+53, r24	; 0x35
    296a:	9e ab       	std	Y+54, r25	; 0x36
    296c:	af ab       	std	Y+55, r26	; 0x37
    296e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2970:	6d a9       	ldd	r22, Y+53	; 0x35
    2972:	7e a9       	ldd	r23, Y+54	; 0x36
    2974:	8f a9       	ldd	r24, Y+55	; 0x37
    2976:	98 ad       	ldd	r25, Y+56	; 0x38
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	4a ef       	ldi	r20, 0xFA	; 250
    297e:	54 e4       	ldi	r21, 0x44	; 68
    2980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	89 ab       	std	Y+49, r24	; 0x31
    298a:	9a ab       	std	Y+50, r25	; 0x32
    298c:	ab ab       	std	Y+51, r26	; 0x33
    298e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2990:	69 a9       	ldd	r22, Y+49	; 0x31
    2992:	7a a9       	ldd	r23, Y+50	; 0x32
    2994:	8b a9       	ldd	r24, Y+51	; 0x33
    2996:	9c a9       	ldd	r25, Y+52	; 0x34
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	40 e8       	ldi	r20, 0x80	; 128
    299e:	5f e3       	ldi	r21, 0x3F	; 63
    29a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29a4:	88 23       	and	r24, r24
    29a6:	2c f4       	brge	.+10     	; 0x29b2 <Stepper_ClockWise_FullStep+0x8e>
		__ticks = 1;
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	98 ab       	std	Y+48, r25	; 0x30
    29ae:	8f a7       	std	Y+47, r24	; 0x2f
    29b0:	3f c0       	rjmp	.+126    	; 0x2a30 <Stepper_ClockWise_FullStep+0x10c>
	else if (__tmp > 65535)
    29b2:	69 a9       	ldd	r22, Y+49	; 0x31
    29b4:	7a a9       	ldd	r23, Y+50	; 0x32
    29b6:	8b a9       	ldd	r24, Y+51	; 0x33
    29b8:	9c a9       	ldd	r25, Y+52	; 0x34
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	3f ef       	ldi	r19, 0xFF	; 255
    29be:	4f e7       	ldi	r20, 0x7F	; 127
    29c0:	57 e4       	ldi	r21, 0x47	; 71
    29c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29c6:	18 16       	cp	r1, r24
    29c8:	4c f5       	brge	.+82     	; 0x2a1c <Stepper_ClockWise_FullStep+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ca:	6d a9       	ldd	r22, Y+53	; 0x35
    29cc:	7e a9       	ldd	r23, Y+54	; 0x36
    29ce:	8f a9       	ldd	r24, Y+55	; 0x37
    29d0:	98 ad       	ldd	r25, Y+56	; 0x38
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e2       	ldi	r20, 0x20	; 32
    29d8:	51 e4       	ldi	r21, 0x41	; 65
    29da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	bc 01       	movw	r22, r24
    29e4:	cd 01       	movw	r24, r26
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	98 ab       	std	Y+48, r25	; 0x30
    29f0:	8f a7       	std	Y+47, r24	; 0x2f
    29f2:	0f c0       	rjmp	.+30     	; 0x2a12 <Stepper_ClockWise_FullStep+0xee>
    29f4:	88 ec       	ldi	r24, 0xC8	; 200
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	9e a7       	std	Y+46, r25	; 0x2e
    29fa:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    29fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <Stepper_ClockWise_FullStep+0xdc>
    2a04:	9e a7       	std	Y+46, r25	; 0x2e
    2a06:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a08:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a0a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	98 ab       	std	Y+48, r25	; 0x30
    2a10:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a14:	98 a9       	ldd	r25, Y+48	; 0x30
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	69 f7       	brne	.-38     	; 0x29f4 <Stepper_ClockWise_FullStep+0xd0>
    2a1a:	14 c0       	rjmp	.+40     	; 0x2a44 <Stepper_ClockWise_FullStep+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a1e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a20:	8b a9       	ldd	r24, Y+51	; 0x33
    2a22:	9c a9       	ldd	r25, Y+52	; 0x34
    2a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	98 ab       	std	Y+48, r25	; 0x30
    2a2e:	8f a7       	std	Y+47, r24	; 0x2f
    2a30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a32:	98 a9       	ldd	r25, Y+48	; 0x30
    2a34:	9c a7       	std	Y+44, r25	; 0x2c
    2a36:	8b a7       	std	Y+43, r24	; 0x2b
    2a38:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <Stepper_ClockWise_FullStep+0x118>
    2a40:	9c a7       	std	Y+44, r25	; 0x2c
    2a42:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(freq);

	//Step2
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	60 e0       	ldi	r22, 0x00	; 0
    2a48:	41 e0       	ldi	r20, 0x01	; 1
    2a4a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	61 e0       	ldi	r22, 0x01	; 1
    2a52:	40 e0       	ldi	r20, 0x00	; 0
    2a54:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	62 e0       	ldi	r22, 0x02	; 2
    2a5c:	41 e0       	ldi	r20, 0x01	; 1
    2a5e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	63 e0       	ldi	r22, 0x03	; 3
    2a66:	41 e0       	ldi	r20, 0x01	; 1
    2a68:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	aa e7       	ldi	r26, 0x7A	; 122
    2a72:	b4 e4       	ldi	r27, 0x44	; 68
    2a74:	8f a3       	std	Y+39, r24	; 0x27
    2a76:	98 a7       	std	Y+40, r25	; 0x28
    2a78:	a9 a7       	std	Y+41, r26	; 0x29
    2a7a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a7e:	78 a5       	ldd	r23, Y+40	; 0x28
    2a80:	89 a5       	ldd	r24, Y+41	; 0x29
    2a82:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	4a ef       	ldi	r20, 0xFA	; 250
    2a8a:	54 e4       	ldi	r21, 0x44	; 68
    2a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	8b a3       	std	Y+35, r24	; 0x23
    2a96:	9c a3       	std	Y+36, r25	; 0x24
    2a98:	ad a3       	std	Y+37, r26	; 0x25
    2a9a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa0:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa2:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e8       	ldi	r20, 0x80	; 128
    2aaa:	5f e3       	ldi	r21, 0x3F	; 63
    2aac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ab0:	88 23       	and	r24, r24
    2ab2:	2c f4       	brge	.+10     	; 0x2abe <Stepper_ClockWise_FullStep+0x19a>
		__ticks = 1;
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	9a a3       	std	Y+34, r25	; 0x22
    2aba:	89 a3       	std	Y+33, r24	; 0x21
    2abc:	3f c0       	rjmp	.+126    	; 0x2b3c <Stepper_ClockWise_FullStep+0x218>
	else if (__tmp > 65535)
    2abe:	6b a1       	ldd	r22, Y+35	; 0x23
    2ac0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	3f ef       	ldi	r19, 0xFF	; 255
    2aca:	4f e7       	ldi	r20, 0x7F	; 127
    2acc:	57 e4       	ldi	r21, 0x47	; 71
    2ace:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ad2:	18 16       	cp	r1, r24
    2ad4:	4c f5       	brge	.+82     	; 0x2b28 <Stepper_ClockWise_FullStep+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ad8:	78 a5       	ldd	r23, Y+40	; 0x28
    2ada:	89 a5       	ldd	r24, Y+41	; 0x29
    2adc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e2       	ldi	r20, 0x20	; 32
    2ae4:	51 e4       	ldi	r21, 0x41	; 65
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	9a a3       	std	Y+34, r25	; 0x22
    2afc:	89 a3       	std	Y+33, r24	; 0x21
    2afe:	0f c0       	rjmp	.+30     	; 0x2b1e <Stepper_ClockWise_FullStep+0x1fa>
    2b00:	88 ec       	ldi	r24, 0xC8	; 200
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	98 a3       	std	Y+32, r25	; 0x20
    2b06:	8f 8f       	std	Y+31, r24	; 0x1f
    2b08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b0a:	98 a1       	ldd	r25, Y+32	; 0x20
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <Stepper_ClockWise_FullStep+0x1e8>
    2b10:	98 a3       	std	Y+32, r25	; 0x20
    2b12:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b14:	89 a1       	ldd	r24, Y+33	; 0x21
    2b16:	9a a1       	ldd	r25, Y+34	; 0x22
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	9a a3       	std	Y+34, r25	; 0x22
    2b1c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b20:	9a a1       	ldd	r25, Y+34	; 0x22
    2b22:	00 97       	sbiw	r24, 0x00	; 0
    2b24:	69 f7       	brne	.-38     	; 0x2b00 <Stepper_ClockWise_FullStep+0x1dc>
    2b26:	14 c0       	rjmp	.+40     	; 0x2b50 <Stepper_ClockWise_FullStep+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b28:	6b a1       	ldd	r22, Y+35	; 0x23
    2b2a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b2c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b2e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	9a a3       	std	Y+34, r25	; 0x22
    2b3a:	89 a3       	std	Y+33, r24	; 0x21
    2b3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b40:	9e 8f       	std	Y+30, r25	; 0x1e
    2b42:	8d 8f       	std	Y+29, r24	; 0x1d
    2b44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <Stepper_ClockWise_FullStep+0x224>
    2b4c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b4e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(freq);


	//Step3
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	60 e0       	ldi	r22, 0x00	; 0
    2b54:	41 e0       	ldi	r20, 0x01	; 1
    2b56:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	61 e0       	ldi	r22, 0x01	; 1
    2b5e:	41 e0       	ldi	r20, 0x01	; 1
    2b60:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	62 e0       	ldi	r22, 0x02	; 2
    2b68:	40 e0       	ldi	r20, 0x00	; 0
    2b6a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	63 e0       	ldi	r22, 0x03	; 3
    2b72:	41 e0       	ldi	r20, 0x01	; 1
    2b74:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	aa e7       	ldi	r26, 0x7A	; 122
    2b7e:	b4 e4       	ldi	r27, 0x44	; 68
    2b80:	89 8f       	std	Y+25, r24	; 0x19
    2b82:	9a 8f       	std	Y+26, r25	; 0x1a
    2b84:	ab 8f       	std	Y+27, r26	; 0x1b
    2b86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b88:	69 8d       	ldd	r22, Y+25	; 0x19
    2b8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	4a ef       	ldi	r20, 0xFA	; 250
    2b96:	54 e4       	ldi	r21, 0x44	; 68
    2b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	8d 8b       	std	Y+21, r24	; 0x15
    2ba2:	9e 8b       	std	Y+22, r25	; 0x16
    2ba4:	af 8b       	std	Y+23, r26	; 0x17
    2ba6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    2baa:	7e 89       	ldd	r23, Y+22	; 0x16
    2bac:	8f 89       	ldd	r24, Y+23	; 0x17
    2bae:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e8       	ldi	r20, 0x80	; 128
    2bb6:	5f e3       	ldi	r21, 0x3F	; 63
    2bb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bbc:	88 23       	and	r24, r24
    2bbe:	2c f4       	brge	.+10     	; 0x2bca <Stepper_ClockWise_FullStep+0x2a6>
		__ticks = 1;
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	9c 8b       	std	Y+20, r25	; 0x14
    2bc6:	8b 8b       	std	Y+19, r24	; 0x13
    2bc8:	3f c0       	rjmp	.+126    	; 0x2c48 <Stepper_ClockWise_FullStep+0x324>
	else if (__tmp > 65535)
    2bca:	6d 89       	ldd	r22, Y+21	; 0x15
    2bcc:	7e 89       	ldd	r23, Y+22	; 0x16
    2bce:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd0:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	3f ef       	ldi	r19, 0xFF	; 255
    2bd6:	4f e7       	ldi	r20, 0x7F	; 127
    2bd8:	57 e4       	ldi	r21, 0x47	; 71
    2bda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bde:	18 16       	cp	r1, r24
    2be0:	4c f5       	brge	.+82     	; 0x2c34 <Stepper_ClockWise_FullStep+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be2:	69 8d       	ldd	r22, Y+25	; 0x19
    2be4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2be6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2be8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e2       	ldi	r20, 0x20	; 32
    2bf0:	51 e4       	ldi	r21, 0x41	; 65
    2bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	cd 01       	movw	r24, r26
    2bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	9c 8b       	std	Y+20, r25	; 0x14
    2c08:	8b 8b       	std	Y+19, r24	; 0x13
    2c0a:	0f c0       	rjmp	.+30     	; 0x2c2a <Stepper_ClockWise_FullStep+0x306>
    2c0c:	88 ec       	ldi	r24, 0xC8	; 200
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	9a 8b       	std	Y+18, r25	; 0x12
    2c12:	89 8b       	std	Y+17, r24	; 0x11
    2c14:	89 89       	ldd	r24, Y+17	; 0x11
    2c16:	9a 89       	ldd	r25, Y+18	; 0x12
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	f1 f7       	brne	.-4      	; 0x2c18 <Stepper_ClockWise_FullStep+0x2f4>
    2c1c:	9a 8b       	std	Y+18, r25	; 0x12
    2c1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c20:	8b 89       	ldd	r24, Y+19	; 0x13
    2c22:	9c 89       	ldd	r25, Y+20	; 0x14
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	9c 8b       	std	Y+20, r25	; 0x14
    2c28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c2e:	00 97       	sbiw	r24, 0x00	; 0
    2c30:	69 f7       	brne	.-38     	; 0x2c0c <Stepper_ClockWise_FullStep+0x2e8>
    2c32:	14 c0       	rjmp	.+40     	; 0x2c5c <Stepper_ClockWise_FullStep+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c34:	6d 89       	ldd	r22, Y+21	; 0x15
    2c36:	7e 89       	ldd	r23, Y+22	; 0x16
    2c38:	8f 89       	ldd	r24, Y+23	; 0x17
    2c3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9c 8b       	std	Y+20, r25	; 0x14
    2c46:	8b 8b       	std	Y+19, r24	; 0x13
    2c48:	8b 89       	ldd	r24, Y+19	; 0x13
    2c4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c4c:	98 8b       	std	Y+16, r25	; 0x10
    2c4e:	8f 87       	std	Y+15, r24	; 0x0f
    2c50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c52:	98 89       	ldd	r25, Y+16	; 0x10
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <Stepper_ClockWise_FullStep+0x330>
    2c58:	98 8b       	std	Y+16, r25	; 0x10
    2c5a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(freq);


	//Step4
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	60 e0       	ldi	r22, 0x00	; 0
    2c60:	41 e0       	ldi	r20, 0x01	; 1
    2c62:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	61 e0       	ldi	r22, 0x01	; 1
    2c6a:	41 e0       	ldi	r20, 0x01	; 1
    2c6c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	62 e0       	ldi	r22, 0x02	; 2
    2c74:	41 e0       	ldi	r20, 0x01	; 1
    2c76:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	63 e0       	ldi	r22, 0x03	; 3
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	aa e7       	ldi	r26, 0x7A	; 122
    2c8a:	b4 e4       	ldi	r27, 0x44	; 68
    2c8c:	8b 87       	std	Y+11, r24	; 0x0b
    2c8e:	9c 87       	std	Y+12, r25	; 0x0c
    2c90:	ad 87       	std	Y+13, r26	; 0x0d
    2c92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	4a ef       	ldi	r20, 0xFA	; 250
    2ca2:	54 e4       	ldi	r21, 0x44	; 68
    2ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	8f 83       	std	Y+7, r24	; 0x07
    2cae:	98 87       	std	Y+8, r25	; 0x08
    2cb0:	a9 87       	std	Y+9, r26	; 0x09
    2cb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb6:	78 85       	ldd	r23, Y+8	; 0x08
    2cb8:	89 85       	ldd	r24, Y+9	; 0x09
    2cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e8       	ldi	r20, 0x80	; 128
    2cc2:	5f e3       	ldi	r21, 0x3F	; 63
    2cc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cc8:	88 23       	and	r24, r24
    2cca:	2c f4       	brge	.+10     	; 0x2cd6 <Stepper_ClockWise_FullStep+0x3b2>
		__ticks = 1;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	9e 83       	std	Y+6, r25	; 0x06
    2cd2:	8d 83       	std	Y+5, r24	; 0x05
    2cd4:	3f c0       	rjmp	.+126    	; 0x2d54 <Stepper_ClockWise_FullStep+0x430>
	else if (__tmp > 65535)
    2cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd8:	78 85       	ldd	r23, Y+8	; 0x08
    2cda:	89 85       	ldd	r24, Y+9	; 0x09
    2cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	3f ef       	ldi	r19, 0xFF	; 255
    2ce2:	4f e7       	ldi	r20, 0x7F	; 127
    2ce4:	57 e4       	ldi	r21, 0x47	; 71
    2ce6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cea:	18 16       	cp	r1, r24
    2cec:	4c f5       	brge	.+82     	; 0x2d40 <Stepper_ClockWise_FullStep+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	40 e2       	ldi	r20, 0x20	; 32
    2cfc:	51 e4       	ldi	r21, 0x41	; 65
    2cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	bc 01       	movw	r22, r24
    2d08:	cd 01       	movw	r24, r26
    2d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	9e 83       	std	Y+6, r25	; 0x06
    2d14:	8d 83       	std	Y+5, r24	; 0x05
    2d16:	0f c0       	rjmp	.+30     	; 0x2d36 <Stepper_ClockWise_FullStep+0x412>
    2d18:	88 ec       	ldi	r24, 0xC8	; 200
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	9c 83       	std	Y+4, r25	; 0x04
    2d1e:	8b 83       	std	Y+3, r24	; 0x03
    2d20:	8b 81       	ldd	r24, Y+3	; 0x03
    2d22:	9c 81       	ldd	r25, Y+4	; 0x04
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <Stepper_ClockWise_FullStep+0x400>
    2d28:	9c 83       	std	Y+4, r25	; 0x04
    2d2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	9e 83       	std	Y+6, r25	; 0x06
    2d34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d36:	8d 81       	ldd	r24, Y+5	; 0x05
    2d38:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3a:	00 97       	sbiw	r24, 0x00	; 0
    2d3c:	69 f7       	brne	.-38     	; 0x2d18 <Stepper_ClockWise_FullStep+0x3f4>
    2d3e:	14 c0       	rjmp	.+40     	; 0x2d68 <Stepper_ClockWise_FullStep+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d40:	6f 81       	ldd	r22, Y+7	; 0x07
    2d42:	78 85       	ldd	r23, Y+8	; 0x08
    2d44:	89 85       	ldd	r24, Y+9	; 0x09
    2d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	9e 83       	std	Y+6, r25	; 0x06
    2d52:	8d 83       	std	Y+5, r24	; 0x05
    2d54:	8d 81       	ldd	r24, Y+5	; 0x05
    2d56:	9e 81       	ldd	r25, Y+6	; 0x06
    2d58:	9a 83       	std	Y+2, r25	; 0x02
    2d5a:	89 83       	std	Y+1, r24	; 0x01
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <Stepper_ClockWise_FullStep+0x43c>
    2d64:	9a 83       	std	Y+2, r25	; 0x02
    2d66:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(freq);



}
    2d68:	e8 96       	adiw	r28, 0x38	; 56
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	f8 94       	cli
    2d6e:	de bf       	out	0x3e, r29	; 62
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	cd bf       	out	0x3d, r28	; 61
    2d74:	cf 91       	pop	r28
    2d76:	df 91       	pop	r29
    2d78:	08 95       	ret

00002d7a <Stepper_CounterClockWise_FullStep>:
void Stepper_CounterClockWise_FullStep()
{
    2d7a:	df 93       	push	r29
    2d7c:	cf 93       	push	r28
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
    2d82:	e8 97       	sbiw	r28, 0x38	; 56
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	de bf       	out	0x3e, r29	; 62
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	cd bf       	out	0x3d, r28	; 61

	//Step1
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	60 e0       	ldi	r22, 0x00	; 0
    2d92:	40 e0       	ldi	r20, 0x00	; 0
    2d94:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	61 e0       	ldi	r22, 0x01	; 1
    2d9c:	40 e0       	ldi	r20, 0x00	; 0
    2d9e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	62 e0       	ldi	r22, 0x02	; 2
    2da6:	40 e0       	ldi	r20, 0x00	; 0
    2da8:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	63 e0       	ldi	r22, 0x03	; 3
    2db0:	41 e0       	ldi	r20, 0x01	; 1
    2db2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	aa e7       	ldi	r26, 0x7A	; 122
    2dbc:	b4 e4       	ldi	r27, 0x44	; 68
    2dbe:	8d ab       	std	Y+53, r24	; 0x35
    2dc0:	9e ab       	std	Y+54, r25	; 0x36
    2dc2:	af ab       	std	Y+55, r26	; 0x37
    2dc4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc6:	6d a9       	ldd	r22, Y+53	; 0x35
    2dc8:	7e a9       	ldd	r23, Y+54	; 0x36
    2dca:	8f a9       	ldd	r24, Y+55	; 0x37
    2dcc:	98 ad       	ldd	r25, Y+56	; 0x38
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	4a ef       	ldi	r20, 0xFA	; 250
    2dd4:	54 e4       	ldi	r21, 0x44	; 68
    2dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	89 ab       	std	Y+49, r24	; 0x31
    2de0:	9a ab       	std	Y+50, r25	; 0x32
    2de2:	ab ab       	std	Y+51, r26	; 0x33
    2de4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2de6:	69 a9       	ldd	r22, Y+49	; 0x31
    2de8:	7a a9       	ldd	r23, Y+50	; 0x32
    2dea:	8b a9       	ldd	r24, Y+51	; 0x33
    2dec:	9c a9       	ldd	r25, Y+52	; 0x34
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e8       	ldi	r20, 0x80	; 128
    2df4:	5f e3       	ldi	r21, 0x3F	; 63
    2df6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dfa:	88 23       	and	r24, r24
    2dfc:	2c f4       	brge	.+10     	; 0x2e08 <Stepper_CounterClockWise_FullStep+0x8e>
		__ticks = 1;
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	98 ab       	std	Y+48, r25	; 0x30
    2e04:	8f a7       	std	Y+47, r24	; 0x2f
    2e06:	3f c0       	rjmp	.+126    	; 0x2e86 <Stepper_CounterClockWise_FullStep+0x10c>
	else if (__tmp > 65535)
    2e08:	69 a9       	ldd	r22, Y+49	; 0x31
    2e0a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e0c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e0e:	9c a9       	ldd	r25, Y+52	; 0x34
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	3f ef       	ldi	r19, 0xFF	; 255
    2e14:	4f e7       	ldi	r20, 0x7F	; 127
    2e16:	57 e4       	ldi	r21, 0x47	; 71
    2e18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e1c:	18 16       	cp	r1, r24
    2e1e:	4c f5       	brge	.+82     	; 0x2e72 <Stepper_CounterClockWise_FullStep+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e20:	6d a9       	ldd	r22, Y+53	; 0x35
    2e22:	7e a9       	ldd	r23, Y+54	; 0x36
    2e24:	8f a9       	ldd	r24, Y+55	; 0x37
    2e26:	98 ad       	ldd	r25, Y+56	; 0x38
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e2       	ldi	r20, 0x20	; 32
    2e2e:	51 e4       	ldi	r21, 0x41	; 65
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	bc 01       	movw	r22, r24
    2e3a:	cd 01       	movw	r24, r26
    2e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	98 ab       	std	Y+48, r25	; 0x30
    2e46:	8f a7       	std	Y+47, r24	; 0x2f
    2e48:	0f c0       	rjmp	.+30     	; 0x2e68 <Stepper_CounterClockWise_FullStep+0xee>
    2e4a:	88 ec       	ldi	r24, 0xC8	; 200
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9e a7       	std	Y+46, r25	; 0x2e
    2e50:	8d a7       	std	Y+45, r24	; 0x2d
    2e52:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e54:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	f1 f7       	brne	.-4      	; 0x2e56 <Stepper_CounterClockWise_FullStep+0xdc>
    2e5a:	9e a7       	std	Y+46, r25	; 0x2e
    2e5c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e60:	98 a9       	ldd	r25, Y+48	; 0x30
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	98 ab       	std	Y+48, r25	; 0x30
    2e66:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e68:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e6a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e6c:	00 97       	sbiw	r24, 0x00	; 0
    2e6e:	69 f7       	brne	.-38     	; 0x2e4a <Stepper_CounterClockWise_FullStep+0xd0>
    2e70:	14 c0       	rjmp	.+40     	; 0x2e9a <Stepper_CounterClockWise_FullStep+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e72:	69 a9       	ldd	r22, Y+49	; 0x31
    2e74:	7a a9       	ldd	r23, Y+50	; 0x32
    2e76:	8b a9       	ldd	r24, Y+51	; 0x33
    2e78:	9c a9       	ldd	r25, Y+52	; 0x34
    2e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	98 ab       	std	Y+48, r25	; 0x30
    2e84:	8f a7       	std	Y+47, r24	; 0x2f
    2e86:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e88:	98 a9       	ldd	r25, Y+48	; 0x30
    2e8a:	9c a7       	std	Y+44, r25	; 0x2c
    2e8c:	8b a7       	std	Y+43, r24	; 0x2b
    2e8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e90:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <Stepper_CounterClockWise_FullStep+0x118>
    2e96:	9c a7       	std	Y+44, r25	; 0x2c
    2e98:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(freq);

	//Step2
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	60 e0       	ldi	r22, 0x00	; 0
    2e9e:	40 e0       	ldi	r20, 0x00	; 0
    2ea0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	61 e0       	ldi	r22, 0x01	; 1
    2ea8:	40 e0       	ldi	r20, 0x00	; 0
    2eaa:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	62 e0       	ldi	r22, 0x02	; 2
    2eb2:	41 e0       	ldi	r20, 0x01	; 1
    2eb4:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	63 e0       	ldi	r22, 0x03	; 3
    2ebc:	40 e0       	ldi	r20, 0x00	; 0
    2ebe:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	aa e7       	ldi	r26, 0x7A	; 122
    2ec8:	b4 e4       	ldi	r27, 0x44	; 68
    2eca:	8f a3       	std	Y+39, r24	; 0x27
    2ecc:	98 a7       	std	Y+40, r25	; 0x28
    2ece:	a9 a7       	std	Y+41, r26	; 0x29
    2ed0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ed4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ed6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ed8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	4a ef       	ldi	r20, 0xFA	; 250
    2ee0:	54 e4       	ldi	r21, 0x44	; 68
    2ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	8b a3       	std	Y+35, r24	; 0x23
    2eec:	9c a3       	std	Y+36, r25	; 0x24
    2eee:	ad a3       	std	Y+37, r26	; 0x25
    2ef0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ef2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ef4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ef6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ef8:	9e a1       	ldd	r25, Y+38	; 0x26
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e8       	ldi	r20, 0x80	; 128
    2f00:	5f e3       	ldi	r21, 0x3F	; 63
    2f02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f06:	88 23       	and	r24, r24
    2f08:	2c f4       	brge	.+10     	; 0x2f14 <Stepper_CounterClockWise_FullStep+0x19a>
		__ticks = 1;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	9a a3       	std	Y+34, r25	; 0x22
    2f10:	89 a3       	std	Y+33, r24	; 0x21
    2f12:	3f c0       	rjmp	.+126    	; 0x2f92 <Stepper_CounterClockWise_FullStep+0x218>
	else if (__tmp > 65535)
    2f14:	6b a1       	ldd	r22, Y+35	; 0x23
    2f16:	7c a1       	ldd	r23, Y+36	; 0x24
    2f18:	8d a1       	ldd	r24, Y+37	; 0x25
    2f1a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	3f ef       	ldi	r19, 0xFF	; 255
    2f20:	4f e7       	ldi	r20, 0x7F	; 127
    2f22:	57 e4       	ldi	r21, 0x47	; 71
    2f24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f28:	18 16       	cp	r1, r24
    2f2a:	4c f5       	brge	.+82     	; 0x2f7e <Stepper_CounterClockWise_FullStep+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2c:	6f a1       	ldd	r22, Y+39	; 0x27
    2f2e:	78 a5       	ldd	r23, Y+40	; 0x28
    2f30:	89 a5       	ldd	r24, Y+41	; 0x29
    2f32:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	40 e2       	ldi	r20, 0x20	; 32
    2f3a:	51 e4       	ldi	r21, 0x41	; 65
    2f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	bc 01       	movw	r22, r24
    2f46:	cd 01       	movw	r24, r26
    2f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	9a a3       	std	Y+34, r25	; 0x22
    2f52:	89 a3       	std	Y+33, r24	; 0x21
    2f54:	0f c0       	rjmp	.+30     	; 0x2f74 <Stepper_CounterClockWise_FullStep+0x1fa>
    2f56:	88 ec       	ldi	r24, 0xC8	; 200
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	98 a3       	std	Y+32, r25	; 0x20
    2f5c:	8f 8f       	std	Y+31, r24	; 0x1f
    2f5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f60:	98 a1       	ldd	r25, Y+32	; 0x20
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	f1 f7       	brne	.-4      	; 0x2f62 <Stepper_CounterClockWise_FullStep+0x1e8>
    2f66:	98 a3       	std	Y+32, r25	; 0x20
    2f68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	9a a3       	std	Y+34, r25	; 0x22
    2f72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f74:	89 a1       	ldd	r24, Y+33	; 0x21
    2f76:	9a a1       	ldd	r25, Y+34	; 0x22
    2f78:	00 97       	sbiw	r24, 0x00	; 0
    2f7a:	69 f7       	brne	.-38     	; 0x2f56 <Stepper_CounterClockWise_FullStep+0x1dc>
    2f7c:	14 c0       	rjmp	.+40     	; 0x2fa6 <Stepper_CounterClockWise_FullStep+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2f80:	7c a1       	ldd	r23, Y+36	; 0x24
    2f82:	8d a1       	ldd	r24, Y+37	; 0x25
    2f84:	9e a1       	ldd	r25, Y+38	; 0x26
    2f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	9a a3       	std	Y+34, r25	; 0x22
    2f90:	89 a3       	std	Y+33, r24	; 0x21
    2f92:	89 a1       	ldd	r24, Y+33	; 0x21
    2f94:	9a a1       	ldd	r25, Y+34	; 0x22
    2f96:	9e 8f       	std	Y+30, r25	; 0x1e
    2f98:	8d 8f       	std	Y+29, r24	; 0x1d
    2f9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	f1 f7       	brne	.-4      	; 0x2f9e <Stepper_CounterClockWise_FullStep+0x224>
    2fa2:	9e 8f       	std	Y+30, r25	; 0x1e
    2fa4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(freq);

	//Step3
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	60 e0       	ldi	r22, 0x00	; 0
    2faa:	40 e0       	ldi	r20, 0x00	; 0
    2fac:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	61 e0       	ldi	r22, 0x01	; 1
    2fb4:	41 e0       	ldi	r20, 0x01	; 1
    2fb6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	62 e0       	ldi	r22, 0x02	; 2
    2fbe:	40 e0       	ldi	r20, 0x00	; 0
    2fc0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	63 e0       	ldi	r22, 0x03	; 3
    2fc8:	40 e0       	ldi	r20, 0x00	; 0
    2fca:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	aa e7       	ldi	r26, 0x7A	; 122
    2fd4:	b4 e4       	ldi	r27, 0x44	; 68
    2fd6:	89 8f       	std	Y+25, r24	; 0x19
    2fd8:	9a 8f       	std	Y+26, r25	; 0x1a
    2fda:	ab 8f       	std	Y+27, r26	; 0x1b
    2fdc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fde:	69 8d       	ldd	r22, Y+25	; 0x19
    2fe0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fe2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fe4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	4a ef       	ldi	r20, 0xFA	; 250
    2fec:	54 e4       	ldi	r21, 0x44	; 68
    2fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	8d 8b       	std	Y+21, r24	; 0x15
    2ff8:	9e 8b       	std	Y+22, r25	; 0x16
    2ffa:	af 8b       	std	Y+23, r26	; 0x17
    2ffc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ffe:	6d 89       	ldd	r22, Y+21	; 0x15
    3000:	7e 89       	ldd	r23, Y+22	; 0x16
    3002:	8f 89       	ldd	r24, Y+23	; 0x17
    3004:	98 8d       	ldd	r25, Y+24	; 0x18
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e8       	ldi	r20, 0x80	; 128
    300c:	5f e3       	ldi	r21, 0x3F	; 63
    300e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3012:	88 23       	and	r24, r24
    3014:	2c f4       	brge	.+10     	; 0x3020 <Stepper_CounterClockWise_FullStep+0x2a6>
		__ticks = 1;
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	9c 8b       	std	Y+20, r25	; 0x14
    301c:	8b 8b       	std	Y+19, r24	; 0x13
    301e:	3f c0       	rjmp	.+126    	; 0x309e <Stepper_CounterClockWise_FullStep+0x324>
	else if (__tmp > 65535)
    3020:	6d 89       	ldd	r22, Y+21	; 0x15
    3022:	7e 89       	ldd	r23, Y+22	; 0x16
    3024:	8f 89       	ldd	r24, Y+23	; 0x17
    3026:	98 8d       	ldd	r25, Y+24	; 0x18
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	3f ef       	ldi	r19, 0xFF	; 255
    302c:	4f e7       	ldi	r20, 0x7F	; 127
    302e:	57 e4       	ldi	r21, 0x47	; 71
    3030:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3034:	18 16       	cp	r1, r24
    3036:	4c f5       	brge	.+82     	; 0x308a <Stepper_CounterClockWise_FullStep+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3038:	69 8d       	ldd	r22, Y+25	; 0x19
    303a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    303c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    303e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	40 e2       	ldi	r20, 0x20	; 32
    3046:	51 e4       	ldi	r21, 0x41	; 65
    3048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	bc 01       	movw	r22, r24
    3052:	cd 01       	movw	r24, r26
    3054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	9c 8b       	std	Y+20, r25	; 0x14
    305e:	8b 8b       	std	Y+19, r24	; 0x13
    3060:	0f c0       	rjmp	.+30     	; 0x3080 <Stepper_CounterClockWise_FullStep+0x306>
    3062:	88 ec       	ldi	r24, 0xC8	; 200
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	9a 8b       	std	Y+18, r25	; 0x12
    3068:	89 8b       	std	Y+17, r24	; 0x11
    306a:	89 89       	ldd	r24, Y+17	; 0x11
    306c:	9a 89       	ldd	r25, Y+18	; 0x12
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	f1 f7       	brne	.-4      	; 0x306e <Stepper_CounterClockWise_FullStep+0x2f4>
    3072:	9a 8b       	std	Y+18, r25	; 0x12
    3074:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3076:	8b 89       	ldd	r24, Y+19	; 0x13
    3078:	9c 89       	ldd	r25, Y+20	; 0x14
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	9c 8b       	std	Y+20, r25	; 0x14
    307e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3080:	8b 89       	ldd	r24, Y+19	; 0x13
    3082:	9c 89       	ldd	r25, Y+20	; 0x14
    3084:	00 97       	sbiw	r24, 0x00	; 0
    3086:	69 f7       	brne	.-38     	; 0x3062 <Stepper_CounterClockWise_FullStep+0x2e8>
    3088:	14 c0       	rjmp	.+40     	; 0x30b2 <Stepper_CounterClockWise_FullStep+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    308a:	6d 89       	ldd	r22, Y+21	; 0x15
    308c:	7e 89       	ldd	r23, Y+22	; 0x16
    308e:	8f 89       	ldd	r24, Y+23	; 0x17
    3090:	98 8d       	ldd	r25, Y+24	; 0x18
    3092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	9c 8b       	std	Y+20, r25	; 0x14
    309c:	8b 8b       	std	Y+19, r24	; 0x13
    309e:	8b 89       	ldd	r24, Y+19	; 0x13
    30a0:	9c 89       	ldd	r25, Y+20	; 0x14
    30a2:	98 8b       	std	Y+16, r25	; 0x10
    30a4:	8f 87       	std	Y+15, r24	; 0x0f
    30a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30a8:	98 89       	ldd	r25, Y+16	; 0x10
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	f1 f7       	brne	.-4      	; 0x30aa <Stepper_CounterClockWise_FullStep+0x330>
    30ae:	98 8b       	std	Y+16, r25	; 0x10
    30b0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(freq);

	//Step4
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	60 e0       	ldi	r22, 0x00	; 0
    30b6:	41 e0       	ldi	r20, 0x01	; 1
    30b8:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	61 e0       	ldi	r22, 0x01	; 1
    30c0:	40 e0       	ldi	r20, 0x00	; 0
    30c2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	62 e0       	ldi	r22, 0x02	; 2
    30ca:	40 e0       	ldi	r20, 0x00	; 0
    30cc:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	63 e0       	ldi	r22, 0x03	; 3
    30d4:	40 e0       	ldi	r20, 0x00	; 0
    30d6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	aa e7       	ldi	r26, 0x7A	; 122
    30e0:	b4 e4       	ldi	r27, 0x44	; 68
    30e2:	8b 87       	std	Y+11, r24	; 0x0b
    30e4:	9c 87       	std	Y+12, r25	; 0x0c
    30e6:	ad 87       	std	Y+13, r26	; 0x0d
    30e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	4a ef       	ldi	r20, 0xFA	; 250
    30f8:	54 e4       	ldi	r21, 0x44	; 68
    30fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	8f 83       	std	Y+7, r24	; 0x07
    3104:	98 87       	std	Y+8, r25	; 0x08
    3106:	a9 87       	std	Y+9, r26	; 0x09
    3108:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    310a:	6f 81       	ldd	r22, Y+7	; 0x07
    310c:	78 85       	ldd	r23, Y+8	; 0x08
    310e:	89 85       	ldd	r24, Y+9	; 0x09
    3110:	9a 85       	ldd	r25, Y+10	; 0x0a
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e8       	ldi	r20, 0x80	; 128
    3118:	5f e3       	ldi	r21, 0x3F	; 63
    311a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    311e:	88 23       	and	r24, r24
    3120:	2c f4       	brge	.+10     	; 0x312c <Stepper_CounterClockWise_FullStep+0x3b2>
		__ticks = 1;
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	9e 83       	std	Y+6, r25	; 0x06
    3128:	8d 83       	std	Y+5, r24	; 0x05
    312a:	3f c0       	rjmp	.+126    	; 0x31aa <Stepper_CounterClockWise_FullStep+0x430>
	else if (__tmp > 65535)
    312c:	6f 81       	ldd	r22, Y+7	; 0x07
    312e:	78 85       	ldd	r23, Y+8	; 0x08
    3130:	89 85       	ldd	r24, Y+9	; 0x09
    3132:	9a 85       	ldd	r25, Y+10	; 0x0a
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	3f ef       	ldi	r19, 0xFF	; 255
    3138:	4f e7       	ldi	r20, 0x7F	; 127
    313a:	57 e4       	ldi	r21, 0x47	; 71
    313c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3140:	18 16       	cp	r1, r24
    3142:	4c f5       	brge	.+82     	; 0x3196 <Stepper_CounterClockWise_FullStep+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3144:	6b 85       	ldd	r22, Y+11	; 0x0b
    3146:	7c 85       	ldd	r23, Y+12	; 0x0c
    3148:	8d 85       	ldd	r24, Y+13	; 0x0d
    314a:	9e 85       	ldd	r25, Y+14	; 0x0e
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	40 e2       	ldi	r20, 0x20	; 32
    3152:	51 e4       	ldi	r21, 0x41	; 65
    3154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	bc 01       	movw	r22, r24
    315e:	cd 01       	movw	r24, r26
    3160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	9e 83       	std	Y+6, r25	; 0x06
    316a:	8d 83       	std	Y+5, r24	; 0x05
    316c:	0f c0       	rjmp	.+30     	; 0x318c <Stepper_CounterClockWise_FullStep+0x412>
    316e:	88 ec       	ldi	r24, 0xC8	; 200
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	9c 83       	std	Y+4, r25	; 0x04
    3174:	8b 83       	std	Y+3, r24	; 0x03
    3176:	8b 81       	ldd	r24, Y+3	; 0x03
    3178:	9c 81       	ldd	r25, Y+4	; 0x04
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	f1 f7       	brne	.-4      	; 0x317a <Stepper_CounterClockWise_FullStep+0x400>
    317e:	9c 83       	std	Y+4, r25	; 0x04
    3180:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3182:	8d 81       	ldd	r24, Y+5	; 0x05
    3184:	9e 81       	ldd	r25, Y+6	; 0x06
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	9e 83       	std	Y+6, r25	; 0x06
    318a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318c:	8d 81       	ldd	r24, Y+5	; 0x05
    318e:	9e 81       	ldd	r25, Y+6	; 0x06
    3190:	00 97       	sbiw	r24, 0x00	; 0
    3192:	69 f7       	brne	.-38     	; 0x316e <Stepper_CounterClockWise_FullStep+0x3f4>
    3194:	14 c0       	rjmp	.+40     	; 0x31be <Stepper_CounterClockWise_FullStep+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3196:	6f 81       	ldd	r22, Y+7	; 0x07
    3198:	78 85       	ldd	r23, Y+8	; 0x08
    319a:	89 85       	ldd	r24, Y+9	; 0x09
    319c:	9a 85       	ldd	r25, Y+10	; 0x0a
    319e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	9e 83       	std	Y+6, r25	; 0x06
    31a8:	8d 83       	std	Y+5, r24	; 0x05
    31aa:	8d 81       	ldd	r24, Y+5	; 0x05
    31ac:	9e 81       	ldd	r25, Y+6	; 0x06
    31ae:	9a 83       	std	Y+2, r25	; 0x02
    31b0:	89 83       	std	Y+1, r24	; 0x01
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	9a 81       	ldd	r25, Y+2	; 0x02
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	f1 f7       	brne	.-4      	; 0x31b6 <Stepper_CounterClockWise_FullStep+0x43c>
    31ba:	9a 83       	std	Y+2, r25	; 0x02
    31bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(freq);
}
    31be:	e8 96       	adiw	r28, 0x38	; 56
    31c0:	0f b6       	in	r0, 0x3f	; 63
    31c2:	f8 94       	cli
    31c4:	de bf       	out	0x3e, r29	; 62
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	cd bf       	out	0x3d, r28	; 61
    31ca:	cf 91       	pop	r28
    31cc:	df 91       	pop	r29
    31ce:	08 95       	ret

000031d0 <Stepper_ClockWise_HalfStep>:


void Stepper_ClockWise_HalfStep()
{
    31d0:	0f 93       	push	r16
    31d2:	1f 93       	push	r17
    31d4:	df 93       	push	r29
    31d6:	cf 93       	push	r28
    31d8:	cd b7       	in	r28, 0x3d	; 61
    31da:	de b7       	in	r29, 0x3e	; 62
    31dc:	c0 57       	subi	r28, 0x70	; 112
    31de:	d0 40       	sbci	r29, 0x00	; 0
    31e0:	0f b6       	in	r0, 0x3f	; 63
    31e2:	f8 94       	cli
    31e4:	de bf       	out	0x3e, r29	; 62
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	cd bf       	out	0x3d, r28	; 61
	//Step1
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	60 e0       	ldi	r22, 0x00	; 0
    31ee:	41 e0       	ldi	r20, 0x01	; 1
    31f0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	61 e0       	ldi	r22, 0x01	; 1
    31f8:	40 e0       	ldi	r20, 0x00	; 0
    31fa:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	62 e0       	ldi	r22, 0x02	; 2
    3202:	40 e0       	ldi	r20, 0x00	; 0
    3204:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	63 e0       	ldi	r22, 0x03	; 3
    320c:	41 e0       	ldi	r20, 0x01	; 1
    320e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    3212:	fe 01       	movw	r30, r28
    3214:	e3 59       	subi	r30, 0x93	; 147
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	aa e7       	ldi	r26, 0x7A	; 122
    321e:	b4 e4       	ldi	r27, 0x44	; 68
    3220:	80 83       	st	Z, r24
    3222:	91 83       	std	Z+1, r25	; 0x01
    3224:	a2 83       	std	Z+2, r26	; 0x02
    3226:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3228:	8e 01       	movw	r16, r28
    322a:	07 59       	subi	r16, 0x97	; 151
    322c:	1f 4f       	sbci	r17, 0xFF	; 255
    322e:	fe 01       	movw	r30, r28
    3230:	e3 59       	subi	r30, 0x93	; 147
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	60 81       	ld	r22, Z
    3236:	71 81       	ldd	r23, Z+1	; 0x01
    3238:	82 81       	ldd	r24, Z+2	; 0x02
    323a:	93 81       	ldd	r25, Z+3	; 0x03
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	4a ef       	ldi	r20, 0xFA	; 250
    3242:	54 e4       	ldi	r21, 0x44	; 68
    3244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	f8 01       	movw	r30, r16
    324e:	80 83       	st	Z, r24
    3250:	91 83       	std	Z+1, r25	; 0x01
    3252:	a2 83       	std	Z+2, r26	; 0x02
    3254:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3256:	fe 01       	movw	r30, r28
    3258:	e7 59       	subi	r30, 0x97	; 151
    325a:	ff 4f       	sbci	r31, 0xFF	; 255
    325c:	60 81       	ld	r22, Z
    325e:	71 81       	ldd	r23, Z+1	; 0x01
    3260:	82 81       	ldd	r24, Z+2	; 0x02
    3262:	93 81       	ldd	r25, Z+3	; 0x03
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	40 e8       	ldi	r20, 0x80	; 128
    326a:	5f e3       	ldi	r21, 0x3F	; 63
    326c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3270:	88 23       	and	r24, r24
    3272:	44 f4       	brge	.+16     	; 0x3284 <Stepper_ClockWise_HalfStep+0xb4>
		__ticks = 1;
    3274:	fe 01       	movw	r30, r28
    3276:	e9 59       	subi	r30, 0x99	; 153
    3278:	ff 4f       	sbci	r31, 0xFF	; 255
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	91 83       	std	Z+1, r25	; 0x01
    3280:	80 83       	st	Z, r24
    3282:	64 c0       	rjmp	.+200    	; 0x334c <Stepper_ClockWise_HalfStep+0x17c>
	else if (__tmp > 65535)
    3284:	fe 01       	movw	r30, r28
    3286:	e7 59       	subi	r30, 0x97	; 151
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	60 81       	ld	r22, Z
    328c:	71 81       	ldd	r23, Z+1	; 0x01
    328e:	82 81       	ldd	r24, Z+2	; 0x02
    3290:	93 81       	ldd	r25, Z+3	; 0x03
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	3f ef       	ldi	r19, 0xFF	; 255
    3296:	4f e7       	ldi	r20, 0x7F	; 127
    3298:	57 e4       	ldi	r21, 0x47	; 71
    329a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    329e:	18 16       	cp	r1, r24
    32a0:	0c f0       	brlt	.+2      	; 0x32a4 <Stepper_ClockWise_HalfStep+0xd4>
    32a2:	43 c0       	rjmp	.+134    	; 0x332a <Stepper_ClockWise_HalfStep+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a4:	fe 01       	movw	r30, r28
    32a6:	e3 59       	subi	r30, 0x93	; 147
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	60 81       	ld	r22, Z
    32ac:	71 81       	ldd	r23, Z+1	; 0x01
    32ae:	82 81       	ldd	r24, Z+2	; 0x02
    32b0:	93 81       	ldd	r25, Z+3	; 0x03
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	40 e2       	ldi	r20, 0x20	; 32
    32b8:	51 e4       	ldi	r21, 0x41	; 65
    32ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	8e 01       	movw	r16, r28
    32c4:	09 59       	subi	r16, 0x99	; 153
    32c6:	1f 4f       	sbci	r17, 0xFF	; 255
    32c8:	bc 01       	movw	r22, r24
    32ca:	cd 01       	movw	r24, r26
    32cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	f8 01       	movw	r30, r16
    32d6:	91 83       	std	Z+1, r25	; 0x01
    32d8:	80 83       	st	Z, r24
    32da:	1f c0       	rjmp	.+62     	; 0x331a <Stepper_ClockWise_HalfStep+0x14a>
    32dc:	fe 01       	movw	r30, r28
    32de:	eb 59       	subi	r30, 0x9B	; 155
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	88 ec       	ldi	r24, 0xC8	; 200
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	91 83       	std	Z+1, r25	; 0x01
    32e8:	80 83       	st	Z, r24
    32ea:	fe 01       	movw	r30, r28
    32ec:	eb 59       	subi	r30, 0x9B	; 155
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	80 81       	ld	r24, Z
    32f2:	91 81       	ldd	r25, Z+1	; 0x01
    32f4:	01 97       	sbiw	r24, 0x01	; 1
    32f6:	f1 f7       	brne	.-4      	; 0x32f4 <Stepper_ClockWise_HalfStep+0x124>
    32f8:	fe 01       	movw	r30, r28
    32fa:	eb 59       	subi	r30, 0x9B	; 155
    32fc:	ff 4f       	sbci	r31, 0xFF	; 255
    32fe:	91 83       	std	Z+1, r25	; 0x01
    3300:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3302:	de 01       	movw	r26, r28
    3304:	a9 59       	subi	r26, 0x99	; 153
    3306:	bf 4f       	sbci	r27, 0xFF	; 255
    3308:	fe 01       	movw	r30, r28
    330a:	e9 59       	subi	r30, 0x99	; 153
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	80 81       	ld	r24, Z
    3310:	91 81       	ldd	r25, Z+1	; 0x01
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	11 96       	adiw	r26, 0x01	; 1
    3316:	9c 93       	st	X, r25
    3318:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    331a:	fe 01       	movw	r30, r28
    331c:	e9 59       	subi	r30, 0x99	; 153
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	80 81       	ld	r24, Z
    3322:	91 81       	ldd	r25, Z+1	; 0x01
    3324:	00 97       	sbiw	r24, 0x00	; 0
    3326:	d1 f6       	brne	.-76     	; 0x32dc <Stepper_ClockWise_HalfStep+0x10c>
    3328:	27 c0       	rjmp	.+78     	; 0x3378 <Stepper_ClockWise_HalfStep+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    332a:	8e 01       	movw	r16, r28
    332c:	09 59       	subi	r16, 0x99	; 153
    332e:	1f 4f       	sbci	r17, 0xFF	; 255
    3330:	fe 01       	movw	r30, r28
    3332:	e7 59       	subi	r30, 0x97	; 151
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	60 81       	ld	r22, Z
    3338:	71 81       	ldd	r23, Z+1	; 0x01
    333a:	82 81       	ldd	r24, Z+2	; 0x02
    333c:	93 81       	ldd	r25, Z+3	; 0x03
    333e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	f8 01       	movw	r30, r16
    3348:	91 83       	std	Z+1, r25	; 0x01
    334a:	80 83       	st	Z, r24
    334c:	de 01       	movw	r26, r28
    334e:	ad 59       	subi	r26, 0x9D	; 157
    3350:	bf 4f       	sbci	r27, 0xFF	; 255
    3352:	fe 01       	movw	r30, r28
    3354:	e9 59       	subi	r30, 0x99	; 153
    3356:	ff 4f       	sbci	r31, 0xFF	; 255
    3358:	80 81       	ld	r24, Z
    335a:	91 81       	ldd	r25, Z+1	; 0x01
    335c:	8d 93       	st	X+, r24
    335e:	9c 93       	st	X, r25
    3360:	fe 01       	movw	r30, r28
    3362:	ed 59       	subi	r30, 0x9D	; 157
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	80 81       	ld	r24, Z
    3368:	91 81       	ldd	r25, Z+1	; 0x01
    336a:	01 97       	sbiw	r24, 0x01	; 1
    336c:	f1 f7       	brne	.-4      	; 0x336a <Stepper_ClockWise_HalfStep+0x19a>
    336e:	fe 01       	movw	r30, r28
    3370:	ed 59       	subi	r30, 0x9D	; 157
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	91 83       	std	Z+1, r25	; 0x01
    3376:	80 83       	st	Z, r24
	_delay_ms(freq);

	//Step2
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	60 e0       	ldi	r22, 0x00	; 0
    337c:	41 e0       	ldi	r20, 0x01	; 1
    337e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	61 e0       	ldi	r22, 0x01	; 1
    3386:	40 e0       	ldi	r20, 0x00	; 0
    3388:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	62 e0       	ldi	r22, 0x02	; 2
    3390:	40 e0       	ldi	r20, 0x00	; 0
    3392:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	63 e0       	ldi	r22, 0x03	; 3
    339a:	40 e0       	ldi	r20, 0x00	; 0
    339c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    33a0:	fe 01       	movw	r30, r28
    33a2:	e1 5a       	subi	r30, 0xA1	; 161
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	aa e7       	ldi	r26, 0x7A	; 122
    33ac:	b4 e4       	ldi	r27, 0x44	; 68
    33ae:	80 83       	st	Z, r24
    33b0:	91 83       	std	Z+1, r25	; 0x01
    33b2:	a2 83       	std	Z+2, r26	; 0x02
    33b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b6:	8e 01       	movw	r16, r28
    33b8:	05 5a       	subi	r16, 0xA5	; 165
    33ba:	1f 4f       	sbci	r17, 0xFF	; 255
    33bc:	fe 01       	movw	r30, r28
    33be:	e1 5a       	subi	r30, 0xA1	; 161
    33c0:	ff 4f       	sbci	r31, 0xFF	; 255
    33c2:	60 81       	ld	r22, Z
    33c4:	71 81       	ldd	r23, Z+1	; 0x01
    33c6:	82 81       	ldd	r24, Z+2	; 0x02
    33c8:	93 81       	ldd	r25, Z+3	; 0x03
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	4a ef       	ldi	r20, 0xFA	; 250
    33d0:	54 e4       	ldi	r21, 0x44	; 68
    33d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	f8 01       	movw	r30, r16
    33dc:	80 83       	st	Z, r24
    33de:	91 83       	std	Z+1, r25	; 0x01
    33e0:	a2 83       	std	Z+2, r26	; 0x02
    33e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33e4:	fe 01       	movw	r30, r28
    33e6:	e5 5a       	subi	r30, 0xA5	; 165
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	60 81       	ld	r22, Z
    33ec:	71 81       	ldd	r23, Z+1	; 0x01
    33ee:	82 81       	ldd	r24, Z+2	; 0x02
    33f0:	93 81       	ldd	r25, Z+3	; 0x03
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	40 e8       	ldi	r20, 0x80	; 128
    33f8:	5f e3       	ldi	r21, 0x3F	; 63
    33fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33fe:	88 23       	and	r24, r24
    3400:	44 f4       	brge	.+16     	; 0x3412 <Stepper_ClockWise_HalfStep+0x242>
		__ticks = 1;
    3402:	fe 01       	movw	r30, r28
    3404:	e7 5a       	subi	r30, 0xA7	; 167
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	91 83       	std	Z+1, r25	; 0x01
    340e:	80 83       	st	Z, r24
    3410:	64 c0       	rjmp	.+200    	; 0x34da <Stepper_ClockWise_HalfStep+0x30a>
	else if (__tmp > 65535)
    3412:	fe 01       	movw	r30, r28
    3414:	e5 5a       	subi	r30, 0xA5	; 165
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	60 81       	ld	r22, Z
    341a:	71 81       	ldd	r23, Z+1	; 0x01
    341c:	82 81       	ldd	r24, Z+2	; 0x02
    341e:	93 81       	ldd	r25, Z+3	; 0x03
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	3f ef       	ldi	r19, 0xFF	; 255
    3424:	4f e7       	ldi	r20, 0x7F	; 127
    3426:	57 e4       	ldi	r21, 0x47	; 71
    3428:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    342c:	18 16       	cp	r1, r24
    342e:	0c f0       	brlt	.+2      	; 0x3432 <Stepper_ClockWise_HalfStep+0x262>
    3430:	43 c0       	rjmp	.+134    	; 0x34b8 <Stepper_ClockWise_HalfStep+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3432:	fe 01       	movw	r30, r28
    3434:	e1 5a       	subi	r30, 0xA1	; 161
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	60 81       	ld	r22, Z
    343a:	71 81       	ldd	r23, Z+1	; 0x01
    343c:	82 81       	ldd	r24, Z+2	; 0x02
    343e:	93 81       	ldd	r25, Z+3	; 0x03
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	40 e2       	ldi	r20, 0x20	; 32
    3446:	51 e4       	ldi	r21, 0x41	; 65
    3448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	8e 01       	movw	r16, r28
    3452:	07 5a       	subi	r16, 0xA7	; 167
    3454:	1f 4f       	sbci	r17, 0xFF	; 255
    3456:	bc 01       	movw	r22, r24
    3458:	cd 01       	movw	r24, r26
    345a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	f8 01       	movw	r30, r16
    3464:	91 83       	std	Z+1, r25	; 0x01
    3466:	80 83       	st	Z, r24
    3468:	1f c0       	rjmp	.+62     	; 0x34a8 <Stepper_ClockWise_HalfStep+0x2d8>
    346a:	fe 01       	movw	r30, r28
    346c:	e9 5a       	subi	r30, 0xA9	; 169
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	88 ec       	ldi	r24, 0xC8	; 200
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	91 83       	std	Z+1, r25	; 0x01
    3476:	80 83       	st	Z, r24
    3478:	fe 01       	movw	r30, r28
    347a:	e9 5a       	subi	r30, 0xA9	; 169
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	80 81       	ld	r24, Z
    3480:	91 81       	ldd	r25, Z+1	; 0x01
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	f1 f7       	brne	.-4      	; 0x3482 <Stepper_ClockWise_HalfStep+0x2b2>
    3486:	fe 01       	movw	r30, r28
    3488:	e9 5a       	subi	r30, 0xA9	; 169
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	91 83       	std	Z+1, r25	; 0x01
    348e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3490:	de 01       	movw	r26, r28
    3492:	a7 5a       	subi	r26, 0xA7	; 167
    3494:	bf 4f       	sbci	r27, 0xFF	; 255
    3496:	fe 01       	movw	r30, r28
    3498:	e7 5a       	subi	r30, 0xA7	; 167
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	80 81       	ld	r24, Z
    349e:	91 81       	ldd	r25, Z+1	; 0x01
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	11 96       	adiw	r26, 0x01	; 1
    34a4:	9c 93       	st	X, r25
    34a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a8:	fe 01       	movw	r30, r28
    34aa:	e7 5a       	subi	r30, 0xA7	; 167
    34ac:	ff 4f       	sbci	r31, 0xFF	; 255
    34ae:	80 81       	ld	r24, Z
    34b0:	91 81       	ldd	r25, Z+1	; 0x01
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	d1 f6       	brne	.-76     	; 0x346a <Stepper_ClockWise_HalfStep+0x29a>
    34b6:	27 c0       	rjmp	.+78     	; 0x3506 <Stepper_ClockWise_HalfStep+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b8:	8e 01       	movw	r16, r28
    34ba:	07 5a       	subi	r16, 0xA7	; 167
    34bc:	1f 4f       	sbci	r17, 0xFF	; 255
    34be:	fe 01       	movw	r30, r28
    34c0:	e5 5a       	subi	r30, 0xA5	; 165
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	60 81       	ld	r22, Z
    34c6:	71 81       	ldd	r23, Z+1	; 0x01
    34c8:	82 81       	ldd	r24, Z+2	; 0x02
    34ca:	93 81       	ldd	r25, Z+3	; 0x03
    34cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	f8 01       	movw	r30, r16
    34d6:	91 83       	std	Z+1, r25	; 0x01
    34d8:	80 83       	st	Z, r24
    34da:	de 01       	movw	r26, r28
    34dc:	ab 5a       	subi	r26, 0xAB	; 171
    34de:	bf 4f       	sbci	r27, 0xFF	; 255
    34e0:	fe 01       	movw	r30, r28
    34e2:	e7 5a       	subi	r30, 0xA7	; 167
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	80 81       	ld	r24, Z
    34e8:	91 81       	ldd	r25, Z+1	; 0x01
    34ea:	8d 93       	st	X+, r24
    34ec:	9c 93       	st	X, r25
    34ee:	fe 01       	movw	r30, r28
    34f0:	eb 5a       	subi	r30, 0xAB	; 171
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	80 81       	ld	r24, Z
    34f6:	91 81       	ldd	r25, Z+1	; 0x01
    34f8:	01 97       	sbiw	r24, 0x01	; 1
    34fa:	f1 f7       	brne	.-4      	; 0x34f8 <Stepper_ClockWise_HalfStep+0x328>
    34fc:	fe 01       	movw	r30, r28
    34fe:	eb 5a       	subi	r30, 0xAB	; 171
    3500:	ff 4f       	sbci	r31, 0xFF	; 255
    3502:	91 83       	std	Z+1, r25	; 0x01
    3504:	80 83       	st	Z, r24
	_delay_ms(freq);



	//Step3
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	60 e0       	ldi	r22, 0x00	; 0
    350a:	41 e0       	ldi	r20, 0x01	; 1
    350c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	61 e0       	ldi	r22, 0x01	; 1
    3514:	41 e0       	ldi	r20, 0x01	; 1
    3516:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	62 e0       	ldi	r22, 0x02	; 2
    351e:	40 e0       	ldi	r20, 0x00	; 0
    3520:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	63 e0       	ldi	r22, 0x03	; 3
    3528:	40 e0       	ldi	r20, 0x00	; 0
    352a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    352e:	fe 01       	movw	r30, r28
    3530:	ef 5a       	subi	r30, 0xAF	; 175
    3532:	ff 4f       	sbci	r31, 0xFF	; 255
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	aa e7       	ldi	r26, 0x7A	; 122
    353a:	b4 e4       	ldi	r27, 0x44	; 68
    353c:	80 83       	st	Z, r24
    353e:	91 83       	std	Z+1, r25	; 0x01
    3540:	a2 83       	std	Z+2, r26	; 0x02
    3542:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3544:	8e 01       	movw	r16, r28
    3546:	03 5b       	subi	r16, 0xB3	; 179
    3548:	1f 4f       	sbci	r17, 0xFF	; 255
    354a:	fe 01       	movw	r30, r28
    354c:	ef 5a       	subi	r30, 0xAF	; 175
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	60 81       	ld	r22, Z
    3552:	71 81       	ldd	r23, Z+1	; 0x01
    3554:	82 81       	ldd	r24, Z+2	; 0x02
    3556:	93 81       	ldd	r25, Z+3	; 0x03
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	4a ef       	ldi	r20, 0xFA	; 250
    355e:	54 e4       	ldi	r21, 0x44	; 68
    3560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	f8 01       	movw	r30, r16
    356a:	80 83       	st	Z, r24
    356c:	91 83       	std	Z+1, r25	; 0x01
    356e:	a2 83       	std	Z+2, r26	; 0x02
    3570:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3572:	fe 01       	movw	r30, r28
    3574:	e3 5b       	subi	r30, 0xB3	; 179
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	60 81       	ld	r22, Z
    357a:	71 81       	ldd	r23, Z+1	; 0x01
    357c:	82 81       	ldd	r24, Z+2	; 0x02
    357e:	93 81       	ldd	r25, Z+3	; 0x03
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	40 e8       	ldi	r20, 0x80	; 128
    3586:	5f e3       	ldi	r21, 0x3F	; 63
    3588:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    358c:	88 23       	and	r24, r24
    358e:	44 f4       	brge	.+16     	; 0x35a0 <Stepper_ClockWise_HalfStep+0x3d0>
		__ticks = 1;
    3590:	fe 01       	movw	r30, r28
    3592:	e5 5b       	subi	r30, 0xB5	; 181
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	81 e0       	ldi	r24, 0x01	; 1
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	91 83       	std	Z+1, r25	; 0x01
    359c:	80 83       	st	Z, r24
    359e:	64 c0       	rjmp	.+200    	; 0x3668 <Stepper_ClockWise_HalfStep+0x498>
	else if (__tmp > 65535)
    35a0:	fe 01       	movw	r30, r28
    35a2:	e3 5b       	subi	r30, 0xB3	; 179
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	60 81       	ld	r22, Z
    35a8:	71 81       	ldd	r23, Z+1	; 0x01
    35aa:	82 81       	ldd	r24, Z+2	; 0x02
    35ac:	93 81       	ldd	r25, Z+3	; 0x03
    35ae:	20 e0       	ldi	r18, 0x00	; 0
    35b0:	3f ef       	ldi	r19, 0xFF	; 255
    35b2:	4f e7       	ldi	r20, 0x7F	; 127
    35b4:	57 e4       	ldi	r21, 0x47	; 71
    35b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ba:	18 16       	cp	r1, r24
    35bc:	0c f0       	brlt	.+2      	; 0x35c0 <Stepper_ClockWise_HalfStep+0x3f0>
    35be:	43 c0       	rjmp	.+134    	; 0x3646 <Stepper_ClockWise_HalfStep+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c0:	fe 01       	movw	r30, r28
    35c2:	ef 5a       	subi	r30, 0xAF	; 175
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	60 81       	ld	r22, Z
    35c8:	71 81       	ldd	r23, Z+1	; 0x01
    35ca:	82 81       	ldd	r24, Z+2	; 0x02
    35cc:	93 81       	ldd	r25, Z+3	; 0x03
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	40 e2       	ldi	r20, 0x20	; 32
    35d4:	51 e4       	ldi	r21, 0x41	; 65
    35d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35da:	dc 01       	movw	r26, r24
    35dc:	cb 01       	movw	r24, r22
    35de:	8e 01       	movw	r16, r28
    35e0:	05 5b       	subi	r16, 0xB5	; 181
    35e2:	1f 4f       	sbci	r17, 0xFF	; 255
    35e4:	bc 01       	movw	r22, r24
    35e6:	cd 01       	movw	r24, r26
    35e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	f8 01       	movw	r30, r16
    35f2:	91 83       	std	Z+1, r25	; 0x01
    35f4:	80 83       	st	Z, r24
    35f6:	1f c0       	rjmp	.+62     	; 0x3636 <Stepper_ClockWise_HalfStep+0x466>
    35f8:	fe 01       	movw	r30, r28
    35fa:	e7 5b       	subi	r30, 0xB7	; 183
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	88 ec       	ldi	r24, 0xC8	; 200
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	91 83       	std	Z+1, r25	; 0x01
    3604:	80 83       	st	Z, r24
    3606:	fe 01       	movw	r30, r28
    3608:	e7 5b       	subi	r30, 0xB7	; 183
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	80 81       	ld	r24, Z
    360e:	91 81       	ldd	r25, Z+1	; 0x01
    3610:	01 97       	sbiw	r24, 0x01	; 1
    3612:	f1 f7       	brne	.-4      	; 0x3610 <Stepper_ClockWise_HalfStep+0x440>
    3614:	fe 01       	movw	r30, r28
    3616:	e7 5b       	subi	r30, 0xB7	; 183
    3618:	ff 4f       	sbci	r31, 0xFF	; 255
    361a:	91 83       	std	Z+1, r25	; 0x01
    361c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361e:	de 01       	movw	r26, r28
    3620:	a5 5b       	subi	r26, 0xB5	; 181
    3622:	bf 4f       	sbci	r27, 0xFF	; 255
    3624:	fe 01       	movw	r30, r28
    3626:	e5 5b       	subi	r30, 0xB5	; 181
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	80 81       	ld	r24, Z
    362c:	91 81       	ldd	r25, Z+1	; 0x01
    362e:	01 97       	sbiw	r24, 0x01	; 1
    3630:	11 96       	adiw	r26, 0x01	; 1
    3632:	9c 93       	st	X, r25
    3634:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3636:	fe 01       	movw	r30, r28
    3638:	e5 5b       	subi	r30, 0xB5	; 181
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	80 81       	ld	r24, Z
    363e:	91 81       	ldd	r25, Z+1	; 0x01
    3640:	00 97       	sbiw	r24, 0x00	; 0
    3642:	d1 f6       	brne	.-76     	; 0x35f8 <Stepper_ClockWise_HalfStep+0x428>
    3644:	27 c0       	rjmp	.+78     	; 0x3694 <Stepper_ClockWise_HalfStep+0x4c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3646:	8e 01       	movw	r16, r28
    3648:	05 5b       	subi	r16, 0xB5	; 181
    364a:	1f 4f       	sbci	r17, 0xFF	; 255
    364c:	fe 01       	movw	r30, r28
    364e:	e3 5b       	subi	r30, 0xB3	; 179
    3650:	ff 4f       	sbci	r31, 0xFF	; 255
    3652:	60 81       	ld	r22, Z
    3654:	71 81       	ldd	r23, Z+1	; 0x01
    3656:	82 81       	ldd	r24, Z+2	; 0x02
    3658:	93 81       	ldd	r25, Z+3	; 0x03
    365a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	f8 01       	movw	r30, r16
    3664:	91 83       	std	Z+1, r25	; 0x01
    3666:	80 83       	st	Z, r24
    3668:	de 01       	movw	r26, r28
    366a:	a9 5b       	subi	r26, 0xB9	; 185
    366c:	bf 4f       	sbci	r27, 0xFF	; 255
    366e:	fe 01       	movw	r30, r28
    3670:	e5 5b       	subi	r30, 0xB5	; 181
    3672:	ff 4f       	sbci	r31, 0xFF	; 255
    3674:	80 81       	ld	r24, Z
    3676:	91 81       	ldd	r25, Z+1	; 0x01
    3678:	8d 93       	st	X+, r24
    367a:	9c 93       	st	X, r25
    367c:	fe 01       	movw	r30, r28
    367e:	e9 5b       	subi	r30, 0xB9	; 185
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	80 81       	ld	r24, Z
    3684:	91 81       	ldd	r25, Z+1	; 0x01
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	f1 f7       	brne	.-4      	; 0x3686 <Stepper_ClockWise_HalfStep+0x4b6>
    368a:	fe 01       	movw	r30, r28
    368c:	e9 5b       	subi	r30, 0xB9	; 185
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	91 83       	std	Z+1, r25	; 0x01
    3692:	80 83       	st	Z, r24
	_delay_ms(freq);


	//Step4
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	60 e0       	ldi	r22, 0x00	; 0
    3698:	40 e0       	ldi	r20, 0x00	; 0
    369a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	61 e0       	ldi	r22, 0x01	; 1
    36a2:	41 e0       	ldi	r20, 0x01	; 1
    36a4:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    36a8:	81 e0       	ldi	r24, 0x01	; 1
    36aa:	62 e0       	ldi	r22, 0x02	; 2
    36ac:	40 e0       	ldi	r20, 0x00	; 0
    36ae:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	63 e0       	ldi	r22, 0x03	; 3
    36b6:	40 e0       	ldi	r20, 0x00	; 0
    36b8:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    36bc:	fe 01       	movw	r30, r28
    36be:	ed 5b       	subi	r30, 0xBD	; 189
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	aa e7       	ldi	r26, 0x7A	; 122
    36c8:	b4 e4       	ldi	r27, 0x44	; 68
    36ca:	80 83       	st	Z, r24
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	a2 83       	std	Z+2, r26	; 0x02
    36d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d2:	8e 01       	movw	r16, r28
    36d4:	01 5c       	subi	r16, 0xC1	; 193
    36d6:	1f 4f       	sbci	r17, 0xFF	; 255
    36d8:	fe 01       	movw	r30, r28
    36da:	ed 5b       	subi	r30, 0xBD	; 189
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	60 81       	ld	r22, Z
    36e0:	71 81       	ldd	r23, Z+1	; 0x01
    36e2:	82 81       	ldd	r24, Z+2	; 0x02
    36e4:	93 81       	ldd	r25, Z+3	; 0x03
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	4a ef       	ldi	r20, 0xFA	; 250
    36ec:	54 e4       	ldi	r21, 0x44	; 68
    36ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	f8 01       	movw	r30, r16
    36f8:	80 83       	st	Z, r24
    36fa:	91 83       	std	Z+1, r25	; 0x01
    36fc:	a2 83       	std	Z+2, r26	; 0x02
    36fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3700:	fe 01       	movw	r30, r28
    3702:	ff 96       	adiw	r30, 0x3f	; 63
    3704:	60 81       	ld	r22, Z
    3706:	71 81       	ldd	r23, Z+1	; 0x01
    3708:	82 81       	ldd	r24, Z+2	; 0x02
    370a:	93 81       	ldd	r25, Z+3	; 0x03
    370c:	20 e0       	ldi	r18, 0x00	; 0
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	40 e8       	ldi	r20, 0x80	; 128
    3712:	5f e3       	ldi	r21, 0x3F	; 63
    3714:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3718:	88 23       	and	r24, r24
    371a:	2c f4       	brge	.+10     	; 0x3726 <Stepper_ClockWise_HalfStep+0x556>
		__ticks = 1;
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	9e af       	std	Y+62, r25	; 0x3e
    3722:	8d af       	std	Y+61, r24	; 0x3d
    3724:	46 c0       	rjmp	.+140    	; 0x37b2 <Stepper_ClockWise_HalfStep+0x5e2>
	else if (__tmp > 65535)
    3726:	fe 01       	movw	r30, r28
    3728:	ff 96       	adiw	r30, 0x3f	; 63
    372a:	60 81       	ld	r22, Z
    372c:	71 81       	ldd	r23, Z+1	; 0x01
    372e:	82 81       	ldd	r24, Z+2	; 0x02
    3730:	93 81       	ldd	r25, Z+3	; 0x03
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	3f ef       	ldi	r19, 0xFF	; 255
    3736:	4f e7       	ldi	r20, 0x7F	; 127
    3738:	57 e4       	ldi	r21, 0x47	; 71
    373a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    373e:	18 16       	cp	r1, r24
    3740:	64 f5       	brge	.+88     	; 0x379a <Stepper_ClockWise_HalfStep+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3742:	fe 01       	movw	r30, r28
    3744:	ed 5b       	subi	r30, 0xBD	; 189
    3746:	ff 4f       	sbci	r31, 0xFF	; 255
    3748:	60 81       	ld	r22, Z
    374a:	71 81       	ldd	r23, Z+1	; 0x01
    374c:	82 81       	ldd	r24, Z+2	; 0x02
    374e:	93 81       	ldd	r25, Z+3	; 0x03
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	40 e2       	ldi	r20, 0x20	; 32
    3756:	51 e4       	ldi	r21, 0x41	; 65
    3758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	bc 01       	movw	r22, r24
    3762:	cd 01       	movw	r24, r26
    3764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	9e af       	std	Y+62, r25	; 0x3e
    376e:	8d af       	std	Y+61, r24	; 0x3d
    3770:	0f c0       	rjmp	.+30     	; 0x3790 <Stepper_ClockWise_HalfStep+0x5c0>
    3772:	88 ec       	ldi	r24, 0xC8	; 200
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	9c af       	std	Y+60, r25	; 0x3c
    3778:	8b af       	std	Y+59, r24	; 0x3b
    377a:	8b ad       	ldd	r24, Y+59	; 0x3b
    377c:	9c ad       	ldd	r25, Y+60	; 0x3c
    377e:	01 97       	sbiw	r24, 0x01	; 1
    3780:	f1 f7       	brne	.-4      	; 0x377e <Stepper_ClockWise_HalfStep+0x5ae>
    3782:	9c af       	std	Y+60, r25	; 0x3c
    3784:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3786:	8d ad       	ldd	r24, Y+61	; 0x3d
    3788:	9e ad       	ldd	r25, Y+62	; 0x3e
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	9e af       	std	Y+62, r25	; 0x3e
    378e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3790:	8d ad       	ldd	r24, Y+61	; 0x3d
    3792:	9e ad       	ldd	r25, Y+62	; 0x3e
    3794:	00 97       	sbiw	r24, 0x00	; 0
    3796:	69 f7       	brne	.-38     	; 0x3772 <Stepper_ClockWise_HalfStep+0x5a2>
    3798:	16 c0       	rjmp	.+44     	; 0x37c6 <Stepper_ClockWise_HalfStep+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379a:	fe 01       	movw	r30, r28
    379c:	ff 96       	adiw	r30, 0x3f	; 63
    379e:	60 81       	ld	r22, Z
    37a0:	71 81       	ldd	r23, Z+1	; 0x01
    37a2:	82 81       	ldd	r24, Z+2	; 0x02
    37a4:	93 81       	ldd	r25, Z+3	; 0x03
    37a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	9e af       	std	Y+62, r25	; 0x3e
    37b0:	8d af       	std	Y+61, r24	; 0x3d
    37b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    37b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    37b6:	9a af       	std	Y+58, r25	; 0x3a
    37b8:	89 af       	std	Y+57, r24	; 0x39
    37ba:	89 ad       	ldd	r24, Y+57	; 0x39
    37bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    37be:	01 97       	sbiw	r24, 0x01	; 1
    37c0:	f1 f7       	brne	.-4      	; 0x37be <Stepper_ClockWise_HalfStep+0x5ee>
    37c2:	9a af       	std	Y+58, r25	; 0x3a
    37c4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(freq);


	//Step5
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	60 e0       	ldi	r22, 0x00	; 0
    37ca:	40 e0       	ldi	r20, 0x00	; 0
    37cc:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	61 e0       	ldi	r22, 0x01	; 1
    37d4:	41 e0       	ldi	r20, 0x01	; 1
    37d6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	62 e0       	ldi	r22, 0x02	; 2
    37de:	41 e0       	ldi	r20, 0x01	; 1
    37e0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	63 e0       	ldi	r22, 0x03	; 3
    37e8:	40 e0       	ldi	r20, 0x00	; 0
    37ea:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    37ee:	80 e0       	ldi	r24, 0x00	; 0
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	aa e7       	ldi	r26, 0x7A	; 122
    37f4:	b4 e4       	ldi	r27, 0x44	; 68
    37f6:	8d ab       	std	Y+53, r24	; 0x35
    37f8:	9e ab       	std	Y+54, r25	; 0x36
    37fa:	af ab       	std	Y+55, r26	; 0x37
    37fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37fe:	6d a9       	ldd	r22, Y+53	; 0x35
    3800:	7e a9       	ldd	r23, Y+54	; 0x36
    3802:	8f a9       	ldd	r24, Y+55	; 0x37
    3804:	98 ad       	ldd	r25, Y+56	; 0x38
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	4a ef       	ldi	r20, 0xFA	; 250
    380c:	54 e4       	ldi	r21, 0x44	; 68
    380e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	89 ab       	std	Y+49, r24	; 0x31
    3818:	9a ab       	std	Y+50, r25	; 0x32
    381a:	ab ab       	std	Y+51, r26	; 0x33
    381c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    381e:	69 a9       	ldd	r22, Y+49	; 0x31
    3820:	7a a9       	ldd	r23, Y+50	; 0x32
    3822:	8b a9       	ldd	r24, Y+51	; 0x33
    3824:	9c a9       	ldd	r25, Y+52	; 0x34
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	40 e8       	ldi	r20, 0x80	; 128
    382c:	5f e3       	ldi	r21, 0x3F	; 63
    382e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3832:	88 23       	and	r24, r24
    3834:	2c f4       	brge	.+10     	; 0x3840 <Stepper_ClockWise_HalfStep+0x670>
		__ticks = 1;
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	98 ab       	std	Y+48, r25	; 0x30
    383c:	8f a7       	std	Y+47, r24	; 0x2f
    383e:	3f c0       	rjmp	.+126    	; 0x38be <Stepper_ClockWise_HalfStep+0x6ee>
	else if (__tmp > 65535)
    3840:	69 a9       	ldd	r22, Y+49	; 0x31
    3842:	7a a9       	ldd	r23, Y+50	; 0x32
    3844:	8b a9       	ldd	r24, Y+51	; 0x33
    3846:	9c a9       	ldd	r25, Y+52	; 0x34
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	3f ef       	ldi	r19, 0xFF	; 255
    384c:	4f e7       	ldi	r20, 0x7F	; 127
    384e:	57 e4       	ldi	r21, 0x47	; 71
    3850:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3854:	18 16       	cp	r1, r24
    3856:	4c f5       	brge	.+82     	; 0x38aa <Stepper_ClockWise_HalfStep+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3858:	6d a9       	ldd	r22, Y+53	; 0x35
    385a:	7e a9       	ldd	r23, Y+54	; 0x36
    385c:	8f a9       	ldd	r24, Y+55	; 0x37
    385e:	98 ad       	ldd	r25, Y+56	; 0x38
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	40 e2       	ldi	r20, 0x20	; 32
    3866:	51 e4       	ldi	r21, 0x41	; 65
    3868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    386c:	dc 01       	movw	r26, r24
    386e:	cb 01       	movw	r24, r22
    3870:	bc 01       	movw	r22, r24
    3872:	cd 01       	movw	r24, r26
    3874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	98 ab       	std	Y+48, r25	; 0x30
    387e:	8f a7       	std	Y+47, r24	; 0x2f
    3880:	0f c0       	rjmp	.+30     	; 0x38a0 <Stepper_ClockWise_HalfStep+0x6d0>
    3882:	88 ec       	ldi	r24, 0xC8	; 200
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	9e a7       	std	Y+46, r25	; 0x2e
    3888:	8d a7       	std	Y+45, r24	; 0x2d
    388a:	8d a5       	ldd	r24, Y+45	; 0x2d
    388c:	9e a5       	ldd	r25, Y+46	; 0x2e
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	f1 f7       	brne	.-4      	; 0x388e <Stepper_ClockWise_HalfStep+0x6be>
    3892:	9e a7       	std	Y+46, r25	; 0x2e
    3894:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3896:	8f a5       	ldd	r24, Y+47	; 0x2f
    3898:	98 a9       	ldd	r25, Y+48	; 0x30
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	98 ab       	std	Y+48, r25	; 0x30
    389e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    38a2:	98 a9       	ldd	r25, Y+48	; 0x30
    38a4:	00 97       	sbiw	r24, 0x00	; 0
    38a6:	69 f7       	brne	.-38     	; 0x3882 <Stepper_ClockWise_HalfStep+0x6b2>
    38a8:	14 c0       	rjmp	.+40     	; 0x38d2 <Stepper_ClockWise_HalfStep+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38aa:	69 a9       	ldd	r22, Y+49	; 0x31
    38ac:	7a a9       	ldd	r23, Y+50	; 0x32
    38ae:	8b a9       	ldd	r24, Y+51	; 0x33
    38b0:	9c a9       	ldd	r25, Y+52	; 0x34
    38b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b6:	dc 01       	movw	r26, r24
    38b8:	cb 01       	movw	r24, r22
    38ba:	98 ab       	std	Y+48, r25	; 0x30
    38bc:	8f a7       	std	Y+47, r24	; 0x2f
    38be:	8f a5       	ldd	r24, Y+47	; 0x2f
    38c0:	98 a9       	ldd	r25, Y+48	; 0x30
    38c2:	9c a7       	std	Y+44, r25	; 0x2c
    38c4:	8b a7       	std	Y+43, r24	; 0x2b
    38c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    38c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    38ca:	01 97       	sbiw	r24, 0x01	; 1
    38cc:	f1 f7       	brne	.-4      	; 0x38ca <Stepper_ClockWise_HalfStep+0x6fa>
    38ce:	9c a7       	std	Y+44, r25	; 0x2c
    38d0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(freq);

	//Step6
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	60 e0       	ldi	r22, 0x00	; 0
    38d6:	40 e0       	ldi	r20, 0x00	; 0
    38d8:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	61 e0       	ldi	r22, 0x01	; 1
    38e0:	40 e0       	ldi	r20, 0x00	; 0
    38e2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	62 e0       	ldi	r22, 0x02	; 2
    38ea:	41 e0       	ldi	r20, 0x01	; 1
    38ec:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	63 e0       	ldi	r22, 0x03	; 3
    38f4:	40 e0       	ldi	r20, 0x00	; 0
    38f6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	aa e7       	ldi	r26, 0x7A	; 122
    3900:	b4 e4       	ldi	r27, 0x44	; 68
    3902:	8f a3       	std	Y+39, r24	; 0x27
    3904:	98 a7       	std	Y+40, r25	; 0x28
    3906:	a9 a7       	std	Y+41, r26	; 0x29
    3908:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    390a:	6f a1       	ldd	r22, Y+39	; 0x27
    390c:	78 a5       	ldd	r23, Y+40	; 0x28
    390e:	89 a5       	ldd	r24, Y+41	; 0x29
    3910:	9a a5       	ldd	r25, Y+42	; 0x2a
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	4a ef       	ldi	r20, 0xFA	; 250
    3918:	54 e4       	ldi	r21, 0x44	; 68
    391a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	8b a3       	std	Y+35, r24	; 0x23
    3924:	9c a3       	std	Y+36, r25	; 0x24
    3926:	ad a3       	std	Y+37, r26	; 0x25
    3928:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    392a:	6b a1       	ldd	r22, Y+35	; 0x23
    392c:	7c a1       	ldd	r23, Y+36	; 0x24
    392e:	8d a1       	ldd	r24, Y+37	; 0x25
    3930:	9e a1       	ldd	r25, Y+38	; 0x26
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	40 e8       	ldi	r20, 0x80	; 128
    3938:	5f e3       	ldi	r21, 0x3F	; 63
    393a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    393e:	88 23       	and	r24, r24
    3940:	2c f4       	brge	.+10     	; 0x394c <Stepper_ClockWise_HalfStep+0x77c>
		__ticks = 1;
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	9a a3       	std	Y+34, r25	; 0x22
    3948:	89 a3       	std	Y+33, r24	; 0x21
    394a:	3f c0       	rjmp	.+126    	; 0x39ca <Stepper_ClockWise_HalfStep+0x7fa>
	else if (__tmp > 65535)
    394c:	6b a1       	ldd	r22, Y+35	; 0x23
    394e:	7c a1       	ldd	r23, Y+36	; 0x24
    3950:	8d a1       	ldd	r24, Y+37	; 0x25
    3952:	9e a1       	ldd	r25, Y+38	; 0x26
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	3f ef       	ldi	r19, 0xFF	; 255
    3958:	4f e7       	ldi	r20, 0x7F	; 127
    395a:	57 e4       	ldi	r21, 0x47	; 71
    395c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3960:	18 16       	cp	r1, r24
    3962:	4c f5       	brge	.+82     	; 0x39b6 <Stepper_ClockWise_HalfStep+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3964:	6f a1       	ldd	r22, Y+39	; 0x27
    3966:	78 a5       	ldd	r23, Y+40	; 0x28
    3968:	89 a5       	ldd	r24, Y+41	; 0x29
    396a:	9a a5       	ldd	r25, Y+42	; 0x2a
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	40 e2       	ldi	r20, 0x20	; 32
    3972:	51 e4       	ldi	r21, 0x41	; 65
    3974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	bc 01       	movw	r22, r24
    397e:	cd 01       	movw	r24, r26
    3980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	9a a3       	std	Y+34, r25	; 0x22
    398a:	89 a3       	std	Y+33, r24	; 0x21
    398c:	0f c0       	rjmp	.+30     	; 0x39ac <Stepper_ClockWise_HalfStep+0x7dc>
    398e:	88 ec       	ldi	r24, 0xC8	; 200
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	98 a3       	std	Y+32, r25	; 0x20
    3994:	8f 8f       	std	Y+31, r24	; 0x1f
    3996:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3998:	98 a1       	ldd	r25, Y+32	; 0x20
    399a:	01 97       	sbiw	r24, 0x01	; 1
    399c:	f1 f7       	brne	.-4      	; 0x399a <Stepper_ClockWise_HalfStep+0x7ca>
    399e:	98 a3       	std	Y+32, r25	; 0x20
    39a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a2:	89 a1       	ldd	r24, Y+33	; 0x21
    39a4:	9a a1       	ldd	r25, Y+34	; 0x22
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	9a a3       	std	Y+34, r25	; 0x22
    39aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ac:	89 a1       	ldd	r24, Y+33	; 0x21
    39ae:	9a a1       	ldd	r25, Y+34	; 0x22
    39b0:	00 97       	sbiw	r24, 0x00	; 0
    39b2:	69 f7       	brne	.-38     	; 0x398e <Stepper_ClockWise_HalfStep+0x7be>
    39b4:	14 c0       	rjmp	.+40     	; 0x39de <Stepper_ClockWise_HalfStep+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b6:	6b a1       	ldd	r22, Y+35	; 0x23
    39b8:	7c a1       	ldd	r23, Y+36	; 0x24
    39ba:	8d a1       	ldd	r24, Y+37	; 0x25
    39bc:	9e a1       	ldd	r25, Y+38	; 0x26
    39be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	9a a3       	std	Y+34, r25	; 0x22
    39c8:	89 a3       	std	Y+33, r24	; 0x21
    39ca:	89 a1       	ldd	r24, Y+33	; 0x21
    39cc:	9a a1       	ldd	r25, Y+34	; 0x22
    39ce:	9e 8f       	std	Y+30, r25	; 0x1e
    39d0:	8d 8f       	std	Y+29, r24	; 0x1d
    39d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39d6:	01 97       	sbiw	r24, 0x01	; 1
    39d8:	f1 f7       	brne	.-4      	; 0x39d6 <Stepper_ClockWise_HalfStep+0x806>
    39da:	9e 8f       	std	Y+30, r25	; 0x1e
    39dc:	8d 8f       	std	Y+29, r24	; 0x1d




	//Step7
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	60 e0       	ldi	r22, 0x00	; 0
    39e2:	40 e0       	ldi	r20, 0x00	; 0
    39e4:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	61 e0       	ldi	r22, 0x01	; 1
    39ec:	40 e0       	ldi	r20, 0x00	; 0
    39ee:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	62 e0       	ldi	r22, 0x02	; 2
    39f6:	41 e0       	ldi	r20, 0x01	; 1
    39f8:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	63 e0       	ldi	r22, 0x03	; 3
    3a00:	41 e0       	ldi	r20, 0x01	; 1
    3a02:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	aa e7       	ldi	r26, 0x7A	; 122
    3a0c:	b4 e4       	ldi	r27, 0x44	; 68
    3a0e:	89 8f       	std	Y+25, r24	; 0x19
    3a10:	9a 8f       	std	Y+26, r25	; 0x1a
    3a12:	ab 8f       	std	Y+27, r26	; 0x1b
    3a14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a16:	69 8d       	ldd	r22, Y+25	; 0x19
    3a18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	4a ef       	ldi	r20, 0xFA	; 250
    3a24:	54 e4       	ldi	r21, 0x44	; 68
    3a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	8d 8b       	std	Y+21, r24	; 0x15
    3a30:	9e 8b       	std	Y+22, r25	; 0x16
    3a32:	af 8b       	std	Y+23, r26	; 0x17
    3a34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a36:	6d 89       	ldd	r22, Y+21	; 0x15
    3a38:	7e 89       	ldd	r23, Y+22	; 0x16
    3a3a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a3c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	40 e8       	ldi	r20, 0x80	; 128
    3a44:	5f e3       	ldi	r21, 0x3F	; 63
    3a46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a4a:	88 23       	and	r24, r24
    3a4c:	2c f4       	brge	.+10     	; 0x3a58 <Stepper_ClockWise_HalfStep+0x888>
		__ticks = 1;
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	9c 8b       	std	Y+20, r25	; 0x14
    3a54:	8b 8b       	std	Y+19, r24	; 0x13
    3a56:	3f c0       	rjmp	.+126    	; 0x3ad6 <Stepper_ClockWise_HalfStep+0x906>
	else if (__tmp > 65535)
    3a58:	6d 89       	ldd	r22, Y+21	; 0x15
    3a5a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a5e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	3f ef       	ldi	r19, 0xFF	; 255
    3a64:	4f e7       	ldi	r20, 0x7F	; 127
    3a66:	57 e4       	ldi	r21, 0x47	; 71
    3a68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a6c:	18 16       	cp	r1, r24
    3a6e:	4c f5       	brge	.+82     	; 0x3ac2 <Stepper_ClockWise_HalfStep+0x8f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a70:	69 8d       	ldd	r22, Y+25	; 0x19
    3a72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e2       	ldi	r20, 0x20	; 32
    3a7e:	51 e4       	ldi	r21, 0x41	; 65
    3a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	bc 01       	movw	r22, r24
    3a8a:	cd 01       	movw	r24, r26
    3a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	9c 8b       	std	Y+20, r25	; 0x14
    3a96:	8b 8b       	std	Y+19, r24	; 0x13
    3a98:	0f c0       	rjmp	.+30     	; 0x3ab8 <Stepper_ClockWise_HalfStep+0x8e8>
    3a9a:	88 ec       	ldi	r24, 0xC8	; 200
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	9a 8b       	std	Y+18, r25	; 0x12
    3aa0:	89 8b       	std	Y+17, r24	; 0x11
    3aa2:	89 89       	ldd	r24, Y+17	; 0x11
    3aa4:	9a 89       	ldd	r25, Y+18	; 0x12
    3aa6:	01 97       	sbiw	r24, 0x01	; 1
    3aa8:	f1 f7       	brne	.-4      	; 0x3aa6 <Stepper_ClockWise_HalfStep+0x8d6>
    3aaa:	9a 8b       	std	Y+18, r25	; 0x12
    3aac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aae:	8b 89       	ldd	r24, Y+19	; 0x13
    3ab0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ab2:	01 97       	sbiw	r24, 0x01	; 1
    3ab4:	9c 8b       	std	Y+20, r25	; 0x14
    3ab6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aba:	9c 89       	ldd	r25, Y+20	; 0x14
    3abc:	00 97       	sbiw	r24, 0x00	; 0
    3abe:	69 f7       	brne	.-38     	; 0x3a9a <Stepper_ClockWise_HalfStep+0x8ca>
    3ac0:	14 c0       	rjmp	.+40     	; 0x3aea <Stepper_ClockWise_HalfStep+0x91a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    3ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    3ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    3aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	9c 8b       	std	Y+20, r25	; 0x14
    3ad4:	8b 8b       	std	Y+19, r24	; 0x13
    3ad6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ad8:	9c 89       	ldd	r25, Y+20	; 0x14
    3ada:	98 8b       	std	Y+16, r25	; 0x10
    3adc:	8f 87       	std	Y+15, r24	; 0x0f
    3ade:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ae0:	98 89       	ldd	r25, Y+16	; 0x10
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	f1 f7       	brne	.-4      	; 0x3ae2 <Stepper_ClockWise_HalfStep+0x912>
    3ae6:	98 8b       	std	Y+16, r25	; 0x10
    3ae8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(freq);



	//Step8
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	60 e0       	ldi	r22, 0x00	; 0
    3aee:	40 e0       	ldi	r20, 0x00	; 0
    3af0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	61 e0       	ldi	r22, 0x01	; 1
    3af8:	40 e0       	ldi	r20, 0x00	; 0
    3afa:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	62 e0       	ldi	r22, 0x02	; 2
    3b02:	40 e0       	ldi	r20, 0x00	; 0
    3b04:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	63 e0       	ldi	r22, 0x03	; 3
    3b0c:	41 e0       	ldi	r20, 0x01	; 1
    3b0e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	aa e7       	ldi	r26, 0x7A	; 122
    3b18:	b4 e4       	ldi	r27, 0x44	; 68
    3b1a:	8b 87       	std	Y+11, r24	; 0x0b
    3b1c:	9c 87       	std	Y+12, r25	; 0x0c
    3b1e:	ad 87       	std	Y+13, r26	; 0x0d
    3b20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b22:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b24:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	4a ef       	ldi	r20, 0xFA	; 250
    3b30:	54 e4       	ldi	r21, 0x44	; 68
    3b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	8f 83       	std	Y+7, r24	; 0x07
    3b3c:	98 87       	std	Y+8, r25	; 0x08
    3b3e:	a9 87       	std	Y+9, r26	; 0x09
    3b40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b42:	6f 81       	ldd	r22, Y+7	; 0x07
    3b44:	78 85       	ldd	r23, Y+8	; 0x08
    3b46:	89 85       	ldd	r24, Y+9	; 0x09
    3b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	40 e8       	ldi	r20, 0x80	; 128
    3b50:	5f e3       	ldi	r21, 0x3F	; 63
    3b52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b56:	88 23       	and	r24, r24
    3b58:	2c f4       	brge	.+10     	; 0x3b64 <Stepper_ClockWise_HalfStep+0x994>
		__ticks = 1;
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	9e 83       	std	Y+6, r25	; 0x06
    3b60:	8d 83       	std	Y+5, r24	; 0x05
    3b62:	3f c0       	rjmp	.+126    	; 0x3be2 <Stepper_ClockWise_HalfStep+0xa12>
	else if (__tmp > 65535)
    3b64:	6f 81       	ldd	r22, Y+7	; 0x07
    3b66:	78 85       	ldd	r23, Y+8	; 0x08
    3b68:	89 85       	ldd	r24, Y+9	; 0x09
    3b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	3f ef       	ldi	r19, 0xFF	; 255
    3b70:	4f e7       	ldi	r20, 0x7F	; 127
    3b72:	57 e4       	ldi	r21, 0x47	; 71
    3b74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b78:	18 16       	cp	r1, r24
    3b7a:	4c f5       	brge	.+82     	; 0x3bce <Stepper_ClockWise_HalfStep+0x9fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	40 e2       	ldi	r20, 0x20	; 32
    3b8a:	51 e4       	ldi	r21, 0x41	; 65
    3b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	bc 01       	movw	r22, r24
    3b96:	cd 01       	movw	r24, r26
    3b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	9e 83       	std	Y+6, r25	; 0x06
    3ba2:	8d 83       	std	Y+5, r24	; 0x05
    3ba4:	0f c0       	rjmp	.+30     	; 0x3bc4 <Stepper_ClockWise_HalfStep+0x9f4>
    3ba6:	88 ec       	ldi	r24, 0xC8	; 200
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	9c 83       	std	Y+4, r25	; 0x04
    3bac:	8b 83       	std	Y+3, r24	; 0x03
    3bae:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	f1 f7       	brne	.-4      	; 0x3bb2 <Stepper_ClockWise_HalfStep+0x9e2>
    3bb6:	9c 83       	std	Y+4, r25	; 0x04
    3bb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bba:	8d 81       	ldd	r24, Y+5	; 0x05
    3bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bbe:	01 97       	sbiw	r24, 0x01	; 1
    3bc0:	9e 83       	std	Y+6, r25	; 0x06
    3bc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc8:	00 97       	sbiw	r24, 0x00	; 0
    3bca:	69 f7       	brne	.-38     	; 0x3ba6 <Stepper_ClockWise_HalfStep+0x9d6>
    3bcc:	14 c0       	rjmp	.+40     	; 0x3bf6 <Stepper_ClockWise_HalfStep+0xa26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bce:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd0:	78 85       	ldd	r23, Y+8	; 0x08
    3bd2:	89 85       	ldd	r24, Y+9	; 0x09
    3bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	9e 83       	std	Y+6, r25	; 0x06
    3be0:	8d 83       	std	Y+5, r24	; 0x05
    3be2:	8d 81       	ldd	r24, Y+5	; 0x05
    3be4:	9e 81       	ldd	r25, Y+6	; 0x06
    3be6:	9a 83       	std	Y+2, r25	; 0x02
    3be8:	89 83       	std	Y+1, r24	; 0x01
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	9a 81       	ldd	r25, Y+2	; 0x02
    3bee:	01 97       	sbiw	r24, 0x01	; 1
    3bf0:	f1 f7       	brne	.-4      	; 0x3bee <Stepper_ClockWise_HalfStep+0xa1e>
    3bf2:	9a 83       	std	Y+2, r25	; 0x02
    3bf4:	89 83       	std	Y+1, r24	; 0x01





}
    3bf6:	c0 59       	subi	r28, 0x90	; 144
    3bf8:	df 4f       	sbci	r29, 0xFF	; 255
    3bfa:	0f b6       	in	r0, 0x3f	; 63
    3bfc:	f8 94       	cli
    3bfe:	de bf       	out	0x3e, r29	; 62
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	cd bf       	out	0x3d, r28	; 61
    3c04:	cf 91       	pop	r28
    3c06:	df 91       	pop	r29
    3c08:	1f 91       	pop	r17
    3c0a:	0f 91       	pop	r16
    3c0c:	08 95       	ret

00003c0e <Stepper_CounterClockWise_HalfStep>:
void Stepper_CounterClockWise_HalfStep()
{
    3c0e:	0f 93       	push	r16
    3c10:	1f 93       	push	r17
    3c12:	df 93       	push	r29
    3c14:	cf 93       	push	r28
    3c16:	cd b7       	in	r28, 0x3d	; 61
    3c18:	de b7       	in	r29, 0x3e	; 62
    3c1a:	c0 57       	subi	r28, 0x70	; 112
    3c1c:	d0 40       	sbci	r29, 0x00	; 0
    3c1e:	0f b6       	in	r0, 0x3f	; 63
    3c20:	f8 94       	cli
    3c22:	de bf       	out	0x3e, r29	; 62
    3c24:	0f be       	out	0x3f, r0	; 63
    3c26:	cd bf       	out	0x3d, r28	; 61

	//Step1
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	60 e0       	ldi	r22, 0x00	; 0
    3c2c:	41 e0       	ldi	r20, 0x01	; 1
    3c2e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    3c32:	81 e0       	ldi	r24, 0x01	; 1
    3c34:	61 e0       	ldi	r22, 0x01	; 1
    3c36:	40 e0       	ldi	r20, 0x00	; 0
    3c38:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	62 e0       	ldi	r22, 0x02	; 2
    3c40:	40 e0       	ldi	r20, 0x00	; 0
    3c42:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    3c46:	81 e0       	ldi	r24, 0x01	; 1
    3c48:	63 e0       	ldi	r22, 0x03	; 3
    3c4a:	41 e0       	ldi	r20, 0x01	; 1
    3c4c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    3c50:	fe 01       	movw	r30, r28
    3c52:	e3 59       	subi	r30, 0x93	; 147
    3c54:	ff 4f       	sbci	r31, 0xFF	; 255
    3c56:	80 e0       	ldi	r24, 0x00	; 0
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	aa e7       	ldi	r26, 0x7A	; 122
    3c5c:	b4 e4       	ldi	r27, 0x44	; 68
    3c5e:	80 83       	st	Z, r24
    3c60:	91 83       	std	Z+1, r25	; 0x01
    3c62:	a2 83       	std	Z+2, r26	; 0x02
    3c64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c66:	8e 01       	movw	r16, r28
    3c68:	07 59       	subi	r16, 0x97	; 151
    3c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	e3 59       	subi	r30, 0x93	; 147
    3c70:	ff 4f       	sbci	r31, 0xFF	; 255
    3c72:	60 81       	ld	r22, Z
    3c74:	71 81       	ldd	r23, Z+1	; 0x01
    3c76:	82 81       	ldd	r24, Z+2	; 0x02
    3c78:	93 81       	ldd	r25, Z+3	; 0x03
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	4a ef       	ldi	r20, 0xFA	; 250
    3c80:	54 e4       	ldi	r21, 0x44	; 68
    3c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	f8 01       	movw	r30, r16
    3c8c:	80 83       	st	Z, r24
    3c8e:	91 83       	std	Z+1, r25	; 0x01
    3c90:	a2 83       	std	Z+2, r26	; 0x02
    3c92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c94:	fe 01       	movw	r30, r28
    3c96:	e7 59       	subi	r30, 0x97	; 151
    3c98:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9a:	60 81       	ld	r22, Z
    3c9c:	71 81       	ldd	r23, Z+1	; 0x01
    3c9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ca0:	93 81       	ldd	r25, Z+3	; 0x03
    3ca2:	20 e0       	ldi	r18, 0x00	; 0
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	40 e8       	ldi	r20, 0x80	; 128
    3ca8:	5f e3       	ldi	r21, 0x3F	; 63
    3caa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cae:	88 23       	and	r24, r24
    3cb0:	44 f4       	brge	.+16     	; 0x3cc2 <Stepper_CounterClockWise_HalfStep+0xb4>
		__ticks = 1;
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	e9 59       	subi	r30, 0x99	; 153
    3cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	91 83       	std	Z+1, r25	; 0x01
    3cbe:	80 83       	st	Z, r24
    3cc0:	64 c0       	rjmp	.+200    	; 0x3d8a <Stepper_CounterClockWise_HalfStep+0x17c>
	else if (__tmp > 65535)
    3cc2:	fe 01       	movw	r30, r28
    3cc4:	e7 59       	subi	r30, 0x97	; 151
    3cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc8:	60 81       	ld	r22, Z
    3cca:	71 81       	ldd	r23, Z+1	; 0x01
    3ccc:	82 81       	ldd	r24, Z+2	; 0x02
    3cce:	93 81       	ldd	r25, Z+3	; 0x03
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	3f ef       	ldi	r19, 0xFF	; 255
    3cd4:	4f e7       	ldi	r20, 0x7F	; 127
    3cd6:	57 e4       	ldi	r21, 0x47	; 71
    3cd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cdc:	18 16       	cp	r1, r24
    3cde:	0c f0       	brlt	.+2      	; 0x3ce2 <Stepper_CounterClockWise_HalfStep+0xd4>
    3ce0:	43 c0       	rjmp	.+134    	; 0x3d68 <Stepper_CounterClockWise_HalfStep+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	e3 59       	subi	r30, 0x93	; 147
    3ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce8:	60 81       	ld	r22, Z
    3cea:	71 81       	ldd	r23, Z+1	; 0x01
    3cec:	82 81       	ldd	r24, Z+2	; 0x02
    3cee:	93 81       	ldd	r25, Z+3	; 0x03
    3cf0:	20 e0       	ldi	r18, 0x00	; 0
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	40 e2       	ldi	r20, 0x20	; 32
    3cf6:	51 e4       	ldi	r21, 0x41	; 65
    3cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	8e 01       	movw	r16, r28
    3d02:	09 59       	subi	r16, 0x99	; 153
    3d04:	1f 4f       	sbci	r17, 0xFF	; 255
    3d06:	bc 01       	movw	r22, r24
    3d08:	cd 01       	movw	r24, r26
    3d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d0e:	dc 01       	movw	r26, r24
    3d10:	cb 01       	movw	r24, r22
    3d12:	f8 01       	movw	r30, r16
    3d14:	91 83       	std	Z+1, r25	; 0x01
    3d16:	80 83       	st	Z, r24
    3d18:	1f c0       	rjmp	.+62     	; 0x3d58 <Stepper_CounterClockWise_HalfStep+0x14a>
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	eb 59       	subi	r30, 0x9B	; 155
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	88 ec       	ldi	r24, 0xC8	; 200
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	91 83       	std	Z+1, r25	; 0x01
    3d26:	80 83       	st	Z, r24
    3d28:	fe 01       	movw	r30, r28
    3d2a:	eb 59       	subi	r30, 0x9B	; 155
    3d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2e:	80 81       	ld	r24, Z
    3d30:	91 81       	ldd	r25, Z+1	; 0x01
    3d32:	01 97       	sbiw	r24, 0x01	; 1
    3d34:	f1 f7       	brne	.-4      	; 0x3d32 <Stepper_CounterClockWise_HalfStep+0x124>
    3d36:	fe 01       	movw	r30, r28
    3d38:	eb 59       	subi	r30, 0x9B	; 155
    3d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3c:	91 83       	std	Z+1, r25	; 0x01
    3d3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d40:	de 01       	movw	r26, r28
    3d42:	a9 59       	subi	r26, 0x99	; 153
    3d44:	bf 4f       	sbci	r27, 0xFF	; 255
    3d46:	fe 01       	movw	r30, r28
    3d48:	e9 59       	subi	r30, 0x99	; 153
    3d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4c:	80 81       	ld	r24, Z
    3d4e:	91 81       	ldd	r25, Z+1	; 0x01
    3d50:	01 97       	sbiw	r24, 0x01	; 1
    3d52:	11 96       	adiw	r26, 0x01	; 1
    3d54:	9c 93       	st	X, r25
    3d56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e9 59       	subi	r30, 0x99	; 153
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	80 81       	ld	r24, Z
    3d60:	91 81       	ldd	r25, Z+1	; 0x01
    3d62:	00 97       	sbiw	r24, 0x00	; 0
    3d64:	d1 f6       	brne	.-76     	; 0x3d1a <Stepper_CounterClockWise_HalfStep+0x10c>
    3d66:	27 c0       	rjmp	.+78     	; 0x3db6 <Stepper_CounterClockWise_HalfStep+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d68:	8e 01       	movw	r16, r28
    3d6a:	09 59       	subi	r16, 0x99	; 153
    3d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d6e:	fe 01       	movw	r30, r28
    3d70:	e7 59       	subi	r30, 0x97	; 151
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	60 81       	ld	r22, Z
    3d76:	71 81       	ldd	r23, Z+1	; 0x01
    3d78:	82 81       	ldd	r24, Z+2	; 0x02
    3d7a:	93 81       	ldd	r25, Z+3	; 0x03
    3d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d80:	dc 01       	movw	r26, r24
    3d82:	cb 01       	movw	r24, r22
    3d84:	f8 01       	movw	r30, r16
    3d86:	91 83       	std	Z+1, r25	; 0x01
    3d88:	80 83       	st	Z, r24
    3d8a:	de 01       	movw	r26, r28
    3d8c:	ad 59       	subi	r26, 0x9D	; 157
    3d8e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d90:	fe 01       	movw	r30, r28
    3d92:	e9 59       	subi	r30, 0x99	; 153
    3d94:	ff 4f       	sbci	r31, 0xFF	; 255
    3d96:	80 81       	ld	r24, Z
    3d98:	91 81       	ldd	r25, Z+1	; 0x01
    3d9a:	8d 93       	st	X+, r24
    3d9c:	9c 93       	st	X, r25
    3d9e:	fe 01       	movw	r30, r28
    3da0:	ed 59       	subi	r30, 0x9D	; 157
    3da2:	ff 4f       	sbci	r31, 0xFF	; 255
    3da4:	80 81       	ld	r24, Z
    3da6:	91 81       	ldd	r25, Z+1	; 0x01
    3da8:	01 97       	sbiw	r24, 0x01	; 1
    3daa:	f1 f7       	brne	.-4      	; 0x3da8 <Stepper_CounterClockWise_HalfStep+0x19a>
    3dac:	fe 01       	movw	r30, r28
    3dae:	ed 59       	subi	r30, 0x9D	; 157
    3db0:	ff 4f       	sbci	r31, 0xFF	; 255
    3db2:	91 83       	std	Z+1, r25	; 0x01
    3db4:	80 83       	st	Z, r24
	_delay_ms(freq);


	//Step2
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	60 e0       	ldi	r22, 0x00	; 0
    3dba:	41 e0       	ldi	r20, 0x01	; 1
    3dbc:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	61 e0       	ldi	r22, 0x01	; 1
    3dc4:	40 e0       	ldi	r20, 0x00	; 0
    3dc6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    3dca:	81 e0       	ldi	r24, 0x01	; 1
    3dcc:	62 e0       	ldi	r22, 0x02	; 2
    3dce:	40 e0       	ldi	r20, 0x00	; 0
    3dd0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	63 e0       	ldi	r22, 0x03	; 3
    3dd8:	40 e0       	ldi	r20, 0x00	; 0
    3dda:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    3dde:	fe 01       	movw	r30, r28
    3de0:	e1 5a       	subi	r30, 0xA1	; 161
    3de2:	ff 4f       	sbci	r31, 0xFF	; 255
    3de4:	80 e0       	ldi	r24, 0x00	; 0
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	aa e7       	ldi	r26, 0x7A	; 122
    3dea:	b4 e4       	ldi	r27, 0x44	; 68
    3dec:	80 83       	st	Z, r24
    3dee:	91 83       	std	Z+1, r25	; 0x01
    3df0:	a2 83       	std	Z+2, r26	; 0x02
    3df2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3df4:	8e 01       	movw	r16, r28
    3df6:	05 5a       	subi	r16, 0xA5	; 165
    3df8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	e1 5a       	subi	r30, 0xA1	; 161
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	60 81       	ld	r22, Z
    3e02:	71 81       	ldd	r23, Z+1	; 0x01
    3e04:	82 81       	ldd	r24, Z+2	; 0x02
    3e06:	93 81       	ldd	r25, Z+3	; 0x03
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	4a ef       	ldi	r20, 0xFA	; 250
    3e0e:	54 e4       	ldi	r21, 0x44	; 68
    3e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e14:	dc 01       	movw	r26, r24
    3e16:	cb 01       	movw	r24, r22
    3e18:	f8 01       	movw	r30, r16
    3e1a:	80 83       	st	Z, r24
    3e1c:	91 83       	std	Z+1, r25	; 0x01
    3e1e:	a2 83       	std	Z+2, r26	; 0x02
    3e20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e22:	fe 01       	movw	r30, r28
    3e24:	e5 5a       	subi	r30, 0xA5	; 165
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	60 81       	ld	r22, Z
    3e2a:	71 81       	ldd	r23, Z+1	; 0x01
    3e2c:	82 81       	ldd	r24, Z+2	; 0x02
    3e2e:	93 81       	ldd	r25, Z+3	; 0x03
    3e30:	20 e0       	ldi	r18, 0x00	; 0
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	40 e8       	ldi	r20, 0x80	; 128
    3e36:	5f e3       	ldi	r21, 0x3F	; 63
    3e38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e3c:	88 23       	and	r24, r24
    3e3e:	44 f4       	brge	.+16     	; 0x3e50 <Stepper_CounterClockWise_HalfStep+0x242>
		__ticks = 1;
    3e40:	fe 01       	movw	r30, r28
    3e42:	e7 5a       	subi	r30, 0xA7	; 167
    3e44:	ff 4f       	sbci	r31, 0xFF	; 255
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	91 83       	std	Z+1, r25	; 0x01
    3e4c:	80 83       	st	Z, r24
    3e4e:	64 c0       	rjmp	.+200    	; 0x3f18 <Stepper_CounterClockWise_HalfStep+0x30a>
	else if (__tmp > 65535)
    3e50:	fe 01       	movw	r30, r28
    3e52:	e5 5a       	subi	r30, 0xA5	; 165
    3e54:	ff 4f       	sbci	r31, 0xFF	; 255
    3e56:	60 81       	ld	r22, Z
    3e58:	71 81       	ldd	r23, Z+1	; 0x01
    3e5a:	82 81       	ldd	r24, Z+2	; 0x02
    3e5c:	93 81       	ldd	r25, Z+3	; 0x03
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	3f ef       	ldi	r19, 0xFF	; 255
    3e62:	4f e7       	ldi	r20, 0x7F	; 127
    3e64:	57 e4       	ldi	r21, 0x47	; 71
    3e66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e6a:	18 16       	cp	r1, r24
    3e6c:	0c f0       	brlt	.+2      	; 0x3e70 <Stepper_CounterClockWise_HalfStep+0x262>
    3e6e:	43 c0       	rjmp	.+134    	; 0x3ef6 <Stepper_CounterClockWise_HalfStep+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e70:	fe 01       	movw	r30, r28
    3e72:	e1 5a       	subi	r30, 0xA1	; 161
    3e74:	ff 4f       	sbci	r31, 0xFF	; 255
    3e76:	60 81       	ld	r22, Z
    3e78:	71 81       	ldd	r23, Z+1	; 0x01
    3e7a:	82 81       	ldd	r24, Z+2	; 0x02
    3e7c:	93 81       	ldd	r25, Z+3	; 0x03
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	40 e2       	ldi	r20, 0x20	; 32
    3e84:	51 e4       	ldi	r21, 0x41	; 65
    3e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	8e 01       	movw	r16, r28
    3e90:	07 5a       	subi	r16, 0xA7	; 167
    3e92:	1f 4f       	sbci	r17, 0xFF	; 255
    3e94:	bc 01       	movw	r22, r24
    3e96:	cd 01       	movw	r24, r26
    3e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	f8 01       	movw	r30, r16
    3ea2:	91 83       	std	Z+1, r25	; 0x01
    3ea4:	80 83       	st	Z, r24
    3ea6:	1f c0       	rjmp	.+62     	; 0x3ee6 <Stepper_CounterClockWise_HalfStep+0x2d8>
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	e9 5a       	subi	r30, 0xA9	; 169
    3eac:	ff 4f       	sbci	r31, 0xFF	; 255
    3eae:	88 ec       	ldi	r24, 0xC8	; 200
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	91 83       	std	Z+1, r25	; 0x01
    3eb4:	80 83       	st	Z, r24
    3eb6:	fe 01       	movw	r30, r28
    3eb8:	e9 5a       	subi	r30, 0xA9	; 169
    3eba:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebc:	80 81       	ld	r24, Z
    3ebe:	91 81       	ldd	r25, Z+1	; 0x01
    3ec0:	01 97       	sbiw	r24, 0x01	; 1
    3ec2:	f1 f7       	brne	.-4      	; 0x3ec0 <Stepper_CounterClockWise_HalfStep+0x2b2>
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	e9 5a       	subi	r30, 0xA9	; 169
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	91 83       	std	Z+1, r25	; 0x01
    3ecc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ece:	de 01       	movw	r26, r28
    3ed0:	a7 5a       	subi	r26, 0xA7	; 167
    3ed2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	e7 5a       	subi	r30, 0xA7	; 167
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	80 81       	ld	r24, Z
    3edc:	91 81       	ldd	r25, Z+1	; 0x01
    3ede:	01 97       	sbiw	r24, 0x01	; 1
    3ee0:	11 96       	adiw	r26, 0x01	; 1
    3ee2:	9c 93       	st	X, r25
    3ee4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ee6:	fe 01       	movw	r30, r28
    3ee8:	e7 5a       	subi	r30, 0xA7	; 167
    3eea:	ff 4f       	sbci	r31, 0xFF	; 255
    3eec:	80 81       	ld	r24, Z
    3eee:	91 81       	ldd	r25, Z+1	; 0x01
    3ef0:	00 97       	sbiw	r24, 0x00	; 0
    3ef2:	d1 f6       	brne	.-76     	; 0x3ea8 <Stepper_CounterClockWise_HalfStep+0x29a>
    3ef4:	27 c0       	rjmp	.+78     	; 0x3f44 <Stepper_CounterClockWise_HalfStep+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ef6:	8e 01       	movw	r16, r28
    3ef8:	07 5a       	subi	r16, 0xA7	; 167
    3efa:	1f 4f       	sbci	r17, 0xFF	; 255
    3efc:	fe 01       	movw	r30, r28
    3efe:	e5 5a       	subi	r30, 0xA5	; 165
    3f00:	ff 4f       	sbci	r31, 0xFF	; 255
    3f02:	60 81       	ld	r22, Z
    3f04:	71 81       	ldd	r23, Z+1	; 0x01
    3f06:	82 81       	ldd	r24, Z+2	; 0x02
    3f08:	93 81       	ldd	r25, Z+3	; 0x03
    3f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	f8 01       	movw	r30, r16
    3f14:	91 83       	std	Z+1, r25	; 0x01
    3f16:	80 83       	st	Z, r24
    3f18:	de 01       	movw	r26, r28
    3f1a:	ab 5a       	subi	r26, 0xAB	; 171
    3f1c:	bf 4f       	sbci	r27, 0xFF	; 255
    3f1e:	fe 01       	movw	r30, r28
    3f20:	e7 5a       	subi	r30, 0xA7	; 167
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	80 81       	ld	r24, Z
    3f26:	91 81       	ldd	r25, Z+1	; 0x01
    3f28:	8d 93       	st	X+, r24
    3f2a:	9c 93       	st	X, r25
    3f2c:	fe 01       	movw	r30, r28
    3f2e:	eb 5a       	subi	r30, 0xAB	; 171
    3f30:	ff 4f       	sbci	r31, 0xFF	; 255
    3f32:	80 81       	ld	r24, Z
    3f34:	91 81       	ldd	r25, Z+1	; 0x01
    3f36:	01 97       	sbiw	r24, 0x01	; 1
    3f38:	f1 f7       	brne	.-4      	; 0x3f36 <Stepper_CounterClockWise_HalfStep+0x328>
    3f3a:	fe 01       	movw	r30, r28
    3f3c:	eb 5a       	subi	r30, 0xAB	; 171
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	91 83       	std	Z+1, r25	; 0x01
    3f42:	80 83       	st	Z, r24
	_delay_ms(freq);

	//Step3
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_HIGH);
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	60 e0       	ldi	r22, 0x00	; 0
    3f48:	41 e0       	ldi	r20, 0x01	; 1
    3f4a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	61 e0       	ldi	r22, 0x01	; 1
    3f52:	41 e0       	ldi	r20, 0x01	; 1
    3f54:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	62 e0       	ldi	r22, 0x02	; 2
    3f5c:	40 e0       	ldi	r20, 0x00	; 0
    3f5e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	63 e0       	ldi	r22, 0x03	; 3
    3f66:	40 e0       	ldi	r20, 0x00	; 0
    3f68:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	ef 5a       	subi	r30, 0xAF	; 175
    3f70:	ff 4f       	sbci	r31, 0xFF	; 255
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	aa e7       	ldi	r26, 0x7A	; 122
    3f78:	b4 e4       	ldi	r27, 0x44	; 68
    3f7a:	80 83       	st	Z, r24
    3f7c:	91 83       	std	Z+1, r25	; 0x01
    3f7e:	a2 83       	std	Z+2, r26	; 0x02
    3f80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f82:	8e 01       	movw	r16, r28
    3f84:	03 5b       	subi	r16, 0xB3	; 179
    3f86:	1f 4f       	sbci	r17, 0xFF	; 255
    3f88:	fe 01       	movw	r30, r28
    3f8a:	ef 5a       	subi	r30, 0xAF	; 175
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	60 81       	ld	r22, Z
    3f90:	71 81       	ldd	r23, Z+1	; 0x01
    3f92:	82 81       	ldd	r24, Z+2	; 0x02
    3f94:	93 81       	ldd	r25, Z+3	; 0x03
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	4a ef       	ldi	r20, 0xFA	; 250
    3f9c:	54 e4       	ldi	r21, 0x44	; 68
    3f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	f8 01       	movw	r30, r16
    3fa8:	80 83       	st	Z, r24
    3faa:	91 83       	std	Z+1, r25	; 0x01
    3fac:	a2 83       	std	Z+2, r26	; 0x02
    3fae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	e3 5b       	subi	r30, 0xB3	; 179
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	60 81       	ld	r22, Z
    3fb8:	71 81       	ldd	r23, Z+1	; 0x01
    3fba:	82 81       	ldd	r24, Z+2	; 0x02
    3fbc:	93 81       	ldd	r25, Z+3	; 0x03
    3fbe:	20 e0       	ldi	r18, 0x00	; 0
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	40 e8       	ldi	r20, 0x80	; 128
    3fc4:	5f e3       	ldi	r21, 0x3F	; 63
    3fc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fca:	88 23       	and	r24, r24
    3fcc:	44 f4       	brge	.+16     	; 0x3fde <Stepper_CounterClockWise_HalfStep+0x3d0>
		__ticks = 1;
    3fce:	fe 01       	movw	r30, r28
    3fd0:	e5 5b       	subi	r30, 0xB5	; 181
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	91 83       	std	Z+1, r25	; 0x01
    3fda:	80 83       	st	Z, r24
    3fdc:	64 c0       	rjmp	.+200    	; 0x40a6 <Stepper_CounterClockWise_HalfStep+0x498>
	else if (__tmp > 65535)
    3fde:	fe 01       	movw	r30, r28
    3fe0:	e3 5b       	subi	r30, 0xB3	; 179
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	60 81       	ld	r22, Z
    3fe6:	71 81       	ldd	r23, Z+1	; 0x01
    3fe8:	82 81       	ldd	r24, Z+2	; 0x02
    3fea:	93 81       	ldd	r25, Z+3	; 0x03
    3fec:	20 e0       	ldi	r18, 0x00	; 0
    3fee:	3f ef       	ldi	r19, 0xFF	; 255
    3ff0:	4f e7       	ldi	r20, 0x7F	; 127
    3ff2:	57 e4       	ldi	r21, 0x47	; 71
    3ff4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ff8:	18 16       	cp	r1, r24
    3ffa:	0c f0       	brlt	.+2      	; 0x3ffe <Stepper_CounterClockWise_HalfStep+0x3f0>
    3ffc:	43 c0       	rjmp	.+134    	; 0x4084 <Stepper_CounterClockWise_HalfStep+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ffe:	fe 01       	movw	r30, r28
    4000:	ef 5a       	subi	r30, 0xAF	; 175
    4002:	ff 4f       	sbci	r31, 0xFF	; 255
    4004:	60 81       	ld	r22, Z
    4006:	71 81       	ldd	r23, Z+1	; 0x01
    4008:	82 81       	ldd	r24, Z+2	; 0x02
    400a:	93 81       	ldd	r25, Z+3	; 0x03
    400c:	20 e0       	ldi	r18, 0x00	; 0
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	40 e2       	ldi	r20, 0x20	; 32
    4012:	51 e4       	ldi	r21, 0x41	; 65
    4014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	8e 01       	movw	r16, r28
    401e:	05 5b       	subi	r16, 0xB5	; 181
    4020:	1f 4f       	sbci	r17, 0xFF	; 255
    4022:	bc 01       	movw	r22, r24
    4024:	cd 01       	movw	r24, r26
    4026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	f8 01       	movw	r30, r16
    4030:	91 83       	std	Z+1, r25	; 0x01
    4032:	80 83       	st	Z, r24
    4034:	1f c0       	rjmp	.+62     	; 0x4074 <Stepper_CounterClockWise_HalfStep+0x466>
    4036:	fe 01       	movw	r30, r28
    4038:	e7 5b       	subi	r30, 0xB7	; 183
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	88 ec       	ldi	r24, 0xC8	; 200
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	91 83       	std	Z+1, r25	; 0x01
    4042:	80 83       	st	Z, r24
    4044:	fe 01       	movw	r30, r28
    4046:	e7 5b       	subi	r30, 0xB7	; 183
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	80 81       	ld	r24, Z
    404c:	91 81       	ldd	r25, Z+1	; 0x01
    404e:	01 97       	sbiw	r24, 0x01	; 1
    4050:	f1 f7       	brne	.-4      	; 0x404e <Stepper_CounterClockWise_HalfStep+0x440>
    4052:	fe 01       	movw	r30, r28
    4054:	e7 5b       	subi	r30, 0xB7	; 183
    4056:	ff 4f       	sbci	r31, 0xFF	; 255
    4058:	91 83       	std	Z+1, r25	; 0x01
    405a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    405c:	de 01       	movw	r26, r28
    405e:	a5 5b       	subi	r26, 0xB5	; 181
    4060:	bf 4f       	sbci	r27, 0xFF	; 255
    4062:	fe 01       	movw	r30, r28
    4064:	e5 5b       	subi	r30, 0xB5	; 181
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	80 81       	ld	r24, Z
    406a:	91 81       	ldd	r25, Z+1	; 0x01
    406c:	01 97       	sbiw	r24, 0x01	; 1
    406e:	11 96       	adiw	r26, 0x01	; 1
    4070:	9c 93       	st	X, r25
    4072:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4074:	fe 01       	movw	r30, r28
    4076:	e5 5b       	subi	r30, 0xB5	; 181
    4078:	ff 4f       	sbci	r31, 0xFF	; 255
    407a:	80 81       	ld	r24, Z
    407c:	91 81       	ldd	r25, Z+1	; 0x01
    407e:	00 97       	sbiw	r24, 0x00	; 0
    4080:	d1 f6       	brne	.-76     	; 0x4036 <Stepper_CounterClockWise_HalfStep+0x428>
    4082:	27 c0       	rjmp	.+78     	; 0x40d2 <Stepper_CounterClockWise_HalfStep+0x4c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4084:	8e 01       	movw	r16, r28
    4086:	05 5b       	subi	r16, 0xB5	; 181
    4088:	1f 4f       	sbci	r17, 0xFF	; 255
    408a:	fe 01       	movw	r30, r28
    408c:	e3 5b       	subi	r30, 0xB3	; 179
    408e:	ff 4f       	sbci	r31, 0xFF	; 255
    4090:	60 81       	ld	r22, Z
    4092:	71 81       	ldd	r23, Z+1	; 0x01
    4094:	82 81       	ldd	r24, Z+2	; 0x02
    4096:	93 81       	ldd	r25, Z+3	; 0x03
    4098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    409c:	dc 01       	movw	r26, r24
    409e:	cb 01       	movw	r24, r22
    40a0:	f8 01       	movw	r30, r16
    40a2:	91 83       	std	Z+1, r25	; 0x01
    40a4:	80 83       	st	Z, r24
    40a6:	de 01       	movw	r26, r28
    40a8:	a9 5b       	subi	r26, 0xB9	; 185
    40aa:	bf 4f       	sbci	r27, 0xFF	; 255
    40ac:	fe 01       	movw	r30, r28
    40ae:	e5 5b       	subi	r30, 0xB5	; 181
    40b0:	ff 4f       	sbci	r31, 0xFF	; 255
    40b2:	80 81       	ld	r24, Z
    40b4:	91 81       	ldd	r25, Z+1	; 0x01
    40b6:	8d 93       	st	X+, r24
    40b8:	9c 93       	st	X, r25
    40ba:	fe 01       	movw	r30, r28
    40bc:	e9 5b       	subi	r30, 0xB9	; 185
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	80 81       	ld	r24, Z
    40c2:	91 81       	ldd	r25, Z+1	; 0x01
    40c4:	01 97       	sbiw	r24, 0x01	; 1
    40c6:	f1 f7       	brne	.-4      	; 0x40c4 <Stepper_CounterClockWise_HalfStep+0x4b6>
    40c8:	fe 01       	movw	r30, r28
    40ca:	e9 5b       	subi	r30, 0xB9	; 185
    40cc:	ff 4f       	sbci	r31, 0xFF	; 255
    40ce:	91 83       	std	Z+1, r25	; 0x01
    40d0:	80 83       	st	Z, r24
	_delay_ms(freq);


	//Step4
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    40d2:	81 e0       	ldi	r24, 0x01	; 1
    40d4:	60 e0       	ldi	r22, 0x00	; 0
    40d6:	40 e0       	ldi	r20, 0x00	; 0
    40d8:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    40dc:	81 e0       	ldi	r24, 0x01	; 1
    40de:	61 e0       	ldi	r22, 0x01	; 1
    40e0:	41 e0       	ldi	r20, 0x01	; 1
    40e2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	62 e0       	ldi	r22, 0x02	; 2
    40ea:	40 e0       	ldi	r20, 0x00	; 0
    40ec:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	63 e0       	ldi	r22, 0x03	; 3
    40f4:	40 e0       	ldi	r20, 0x00	; 0
    40f6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    40fa:	fe 01       	movw	r30, r28
    40fc:	ed 5b       	subi	r30, 0xBD	; 189
    40fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4100:	80 e0       	ldi	r24, 0x00	; 0
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	aa e7       	ldi	r26, 0x7A	; 122
    4106:	b4 e4       	ldi	r27, 0x44	; 68
    4108:	80 83       	st	Z, r24
    410a:	91 83       	std	Z+1, r25	; 0x01
    410c:	a2 83       	std	Z+2, r26	; 0x02
    410e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4110:	8e 01       	movw	r16, r28
    4112:	01 5c       	subi	r16, 0xC1	; 193
    4114:	1f 4f       	sbci	r17, 0xFF	; 255
    4116:	fe 01       	movw	r30, r28
    4118:	ed 5b       	subi	r30, 0xBD	; 189
    411a:	ff 4f       	sbci	r31, 0xFF	; 255
    411c:	60 81       	ld	r22, Z
    411e:	71 81       	ldd	r23, Z+1	; 0x01
    4120:	82 81       	ldd	r24, Z+2	; 0x02
    4122:	93 81       	ldd	r25, Z+3	; 0x03
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	4a ef       	ldi	r20, 0xFA	; 250
    412a:	54 e4       	ldi	r21, 0x44	; 68
    412c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	f8 01       	movw	r30, r16
    4136:	80 83       	st	Z, r24
    4138:	91 83       	std	Z+1, r25	; 0x01
    413a:	a2 83       	std	Z+2, r26	; 0x02
    413c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    413e:	fe 01       	movw	r30, r28
    4140:	ff 96       	adiw	r30, 0x3f	; 63
    4142:	60 81       	ld	r22, Z
    4144:	71 81       	ldd	r23, Z+1	; 0x01
    4146:	82 81       	ldd	r24, Z+2	; 0x02
    4148:	93 81       	ldd	r25, Z+3	; 0x03
    414a:	20 e0       	ldi	r18, 0x00	; 0
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	40 e8       	ldi	r20, 0x80	; 128
    4150:	5f e3       	ldi	r21, 0x3F	; 63
    4152:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4156:	88 23       	and	r24, r24
    4158:	2c f4       	brge	.+10     	; 0x4164 <Stepper_CounterClockWise_HalfStep+0x556>
		__ticks = 1;
    415a:	81 e0       	ldi	r24, 0x01	; 1
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	9e af       	std	Y+62, r25	; 0x3e
    4160:	8d af       	std	Y+61, r24	; 0x3d
    4162:	46 c0       	rjmp	.+140    	; 0x41f0 <Stepper_CounterClockWise_HalfStep+0x5e2>
	else if (__tmp > 65535)
    4164:	fe 01       	movw	r30, r28
    4166:	ff 96       	adiw	r30, 0x3f	; 63
    4168:	60 81       	ld	r22, Z
    416a:	71 81       	ldd	r23, Z+1	; 0x01
    416c:	82 81       	ldd	r24, Z+2	; 0x02
    416e:	93 81       	ldd	r25, Z+3	; 0x03
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	3f ef       	ldi	r19, 0xFF	; 255
    4174:	4f e7       	ldi	r20, 0x7F	; 127
    4176:	57 e4       	ldi	r21, 0x47	; 71
    4178:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    417c:	18 16       	cp	r1, r24
    417e:	64 f5       	brge	.+88     	; 0x41d8 <Stepper_CounterClockWise_HalfStep+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4180:	fe 01       	movw	r30, r28
    4182:	ed 5b       	subi	r30, 0xBD	; 189
    4184:	ff 4f       	sbci	r31, 0xFF	; 255
    4186:	60 81       	ld	r22, Z
    4188:	71 81       	ldd	r23, Z+1	; 0x01
    418a:	82 81       	ldd	r24, Z+2	; 0x02
    418c:	93 81       	ldd	r25, Z+3	; 0x03
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	40 e2       	ldi	r20, 0x20	; 32
    4194:	51 e4       	ldi	r21, 0x41	; 65
    4196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	bc 01       	movw	r22, r24
    41a0:	cd 01       	movw	r24, r26
    41a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	9e af       	std	Y+62, r25	; 0x3e
    41ac:	8d af       	std	Y+61, r24	; 0x3d
    41ae:	0f c0       	rjmp	.+30     	; 0x41ce <Stepper_CounterClockWise_HalfStep+0x5c0>
    41b0:	88 ec       	ldi	r24, 0xC8	; 200
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	9c af       	std	Y+60, r25	; 0x3c
    41b6:	8b af       	std	Y+59, r24	; 0x3b
    41b8:	8b ad       	ldd	r24, Y+59	; 0x3b
    41ba:	9c ad       	ldd	r25, Y+60	; 0x3c
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	f1 f7       	brne	.-4      	; 0x41bc <Stepper_CounterClockWise_HalfStep+0x5ae>
    41c0:	9c af       	std	Y+60, r25	; 0x3c
    41c2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    41c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    41c8:	01 97       	sbiw	r24, 0x01	; 1
    41ca:	9e af       	std	Y+62, r25	; 0x3e
    41cc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    41d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    41d2:	00 97       	sbiw	r24, 0x00	; 0
    41d4:	69 f7       	brne	.-38     	; 0x41b0 <Stepper_CounterClockWise_HalfStep+0x5a2>
    41d6:	16 c0       	rjmp	.+44     	; 0x4204 <Stepper_CounterClockWise_HalfStep+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d8:	fe 01       	movw	r30, r28
    41da:	ff 96       	adiw	r30, 0x3f	; 63
    41dc:	60 81       	ld	r22, Z
    41de:	71 81       	ldd	r23, Z+1	; 0x01
    41e0:	82 81       	ldd	r24, Z+2	; 0x02
    41e2:	93 81       	ldd	r25, Z+3	; 0x03
    41e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e8:	dc 01       	movw	r26, r24
    41ea:	cb 01       	movw	r24, r22
    41ec:	9e af       	std	Y+62, r25	; 0x3e
    41ee:	8d af       	std	Y+61, r24	; 0x3d
    41f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    41f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    41f4:	9a af       	std	Y+58, r25	; 0x3a
    41f6:	89 af       	std	Y+57, r24	; 0x39
    41f8:	89 ad       	ldd	r24, Y+57	; 0x39
    41fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    41fc:	01 97       	sbiw	r24, 0x01	; 1
    41fe:	f1 f7       	brne	.-4      	; 0x41fc <Stepper_CounterClockWise_HalfStep+0x5ee>
    4200:	9a af       	std	Y+58, r25	; 0x3a
    4202:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(freq);

	//Step5
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    4204:	81 e0       	ldi	r24, 0x01	; 1
    4206:	60 e0       	ldi	r22, 0x00	; 0
    4208:	40 e0       	ldi	r20, 0x00	; 0
    420a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_HIGH);
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	61 e0       	ldi	r22, 0x01	; 1
    4212:	41 e0       	ldi	r20, 0x01	; 1
    4214:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    4218:	81 e0       	ldi	r24, 0x01	; 1
    421a:	62 e0       	ldi	r22, 0x02	; 2
    421c:	41 e0       	ldi	r20, 0x01	; 1
    421e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    4222:	81 e0       	ldi	r24, 0x01	; 1
    4224:	63 e0       	ldi	r22, 0x03	; 3
    4226:	40 e0       	ldi	r20, 0x00	; 0
    4228:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    422c:	80 e0       	ldi	r24, 0x00	; 0
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	aa e7       	ldi	r26, 0x7A	; 122
    4232:	b4 e4       	ldi	r27, 0x44	; 68
    4234:	8d ab       	std	Y+53, r24	; 0x35
    4236:	9e ab       	std	Y+54, r25	; 0x36
    4238:	af ab       	std	Y+55, r26	; 0x37
    423a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    423c:	6d a9       	ldd	r22, Y+53	; 0x35
    423e:	7e a9       	ldd	r23, Y+54	; 0x36
    4240:	8f a9       	ldd	r24, Y+55	; 0x37
    4242:	98 ad       	ldd	r25, Y+56	; 0x38
    4244:	20 e0       	ldi	r18, 0x00	; 0
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	4a ef       	ldi	r20, 0xFA	; 250
    424a:	54 e4       	ldi	r21, 0x44	; 68
    424c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4250:	dc 01       	movw	r26, r24
    4252:	cb 01       	movw	r24, r22
    4254:	89 ab       	std	Y+49, r24	; 0x31
    4256:	9a ab       	std	Y+50, r25	; 0x32
    4258:	ab ab       	std	Y+51, r26	; 0x33
    425a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    425c:	69 a9       	ldd	r22, Y+49	; 0x31
    425e:	7a a9       	ldd	r23, Y+50	; 0x32
    4260:	8b a9       	ldd	r24, Y+51	; 0x33
    4262:	9c a9       	ldd	r25, Y+52	; 0x34
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	40 e8       	ldi	r20, 0x80	; 128
    426a:	5f e3       	ldi	r21, 0x3F	; 63
    426c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4270:	88 23       	and	r24, r24
    4272:	2c f4       	brge	.+10     	; 0x427e <Stepper_CounterClockWise_HalfStep+0x670>
		__ticks = 1;
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	98 ab       	std	Y+48, r25	; 0x30
    427a:	8f a7       	std	Y+47, r24	; 0x2f
    427c:	3f c0       	rjmp	.+126    	; 0x42fc <Stepper_CounterClockWise_HalfStep+0x6ee>
	else if (__tmp > 65535)
    427e:	69 a9       	ldd	r22, Y+49	; 0x31
    4280:	7a a9       	ldd	r23, Y+50	; 0x32
    4282:	8b a9       	ldd	r24, Y+51	; 0x33
    4284:	9c a9       	ldd	r25, Y+52	; 0x34
    4286:	20 e0       	ldi	r18, 0x00	; 0
    4288:	3f ef       	ldi	r19, 0xFF	; 255
    428a:	4f e7       	ldi	r20, 0x7F	; 127
    428c:	57 e4       	ldi	r21, 0x47	; 71
    428e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4292:	18 16       	cp	r1, r24
    4294:	4c f5       	brge	.+82     	; 0x42e8 <Stepper_CounterClockWise_HalfStep+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4296:	6d a9       	ldd	r22, Y+53	; 0x35
    4298:	7e a9       	ldd	r23, Y+54	; 0x36
    429a:	8f a9       	ldd	r24, Y+55	; 0x37
    429c:	98 ad       	ldd	r25, Y+56	; 0x38
    429e:	20 e0       	ldi	r18, 0x00	; 0
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	40 e2       	ldi	r20, 0x20	; 32
    42a4:	51 e4       	ldi	r21, 0x41	; 65
    42a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42aa:	dc 01       	movw	r26, r24
    42ac:	cb 01       	movw	r24, r22
    42ae:	bc 01       	movw	r22, r24
    42b0:	cd 01       	movw	r24, r26
    42b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b6:	dc 01       	movw	r26, r24
    42b8:	cb 01       	movw	r24, r22
    42ba:	98 ab       	std	Y+48, r25	; 0x30
    42bc:	8f a7       	std	Y+47, r24	; 0x2f
    42be:	0f c0       	rjmp	.+30     	; 0x42de <Stepper_CounterClockWise_HalfStep+0x6d0>
    42c0:	88 ec       	ldi	r24, 0xC8	; 200
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	9e a7       	std	Y+46, r25	; 0x2e
    42c6:	8d a7       	std	Y+45, r24	; 0x2d
    42c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    42ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    42cc:	01 97       	sbiw	r24, 0x01	; 1
    42ce:	f1 f7       	brne	.-4      	; 0x42cc <Stepper_CounterClockWise_HalfStep+0x6be>
    42d0:	9e a7       	std	Y+46, r25	; 0x2e
    42d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    42d6:	98 a9       	ldd	r25, Y+48	; 0x30
    42d8:	01 97       	sbiw	r24, 0x01	; 1
    42da:	98 ab       	std	Y+48, r25	; 0x30
    42dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42de:	8f a5       	ldd	r24, Y+47	; 0x2f
    42e0:	98 a9       	ldd	r25, Y+48	; 0x30
    42e2:	00 97       	sbiw	r24, 0x00	; 0
    42e4:	69 f7       	brne	.-38     	; 0x42c0 <Stepper_CounterClockWise_HalfStep+0x6b2>
    42e6:	14 c0       	rjmp	.+40     	; 0x4310 <Stepper_CounterClockWise_HalfStep+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42e8:	69 a9       	ldd	r22, Y+49	; 0x31
    42ea:	7a a9       	ldd	r23, Y+50	; 0x32
    42ec:	8b a9       	ldd	r24, Y+51	; 0x33
    42ee:	9c a9       	ldd	r25, Y+52	; 0x34
    42f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42f4:	dc 01       	movw	r26, r24
    42f6:	cb 01       	movw	r24, r22
    42f8:	98 ab       	std	Y+48, r25	; 0x30
    42fa:	8f a7       	std	Y+47, r24	; 0x2f
    42fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    42fe:	98 a9       	ldd	r25, Y+48	; 0x30
    4300:	9c a7       	std	Y+44, r25	; 0x2c
    4302:	8b a7       	std	Y+43, r24	; 0x2b
    4304:	8b a5       	ldd	r24, Y+43	; 0x2b
    4306:	9c a5       	ldd	r25, Y+44	; 0x2c
    4308:	01 97       	sbiw	r24, 0x01	; 1
    430a:	f1 f7       	brne	.-4      	; 0x4308 <Stepper_CounterClockWise_HalfStep+0x6fa>
    430c:	9c a7       	std	Y+44, r25	; 0x2c
    430e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(freq);


	//Step6
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    4310:	81 e0       	ldi	r24, 0x01	; 1
    4312:	60 e0       	ldi	r22, 0x00	; 0
    4314:	40 e0       	ldi	r20, 0x00	; 0
    4316:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    431a:	81 e0       	ldi	r24, 0x01	; 1
    431c:	61 e0       	ldi	r22, 0x01	; 1
    431e:	40 e0       	ldi	r20, 0x00	; 0
    4320:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    4324:	81 e0       	ldi	r24, 0x01	; 1
    4326:	62 e0       	ldi	r22, 0x02	; 2
    4328:	41 e0       	ldi	r20, 0x01	; 1
    432a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_LOW);
    432e:	81 e0       	ldi	r24, 0x01	; 1
    4330:	63 e0       	ldi	r22, 0x03	; 3
    4332:	40 e0       	ldi	r20, 0x00	; 0
    4334:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    4338:	80 e0       	ldi	r24, 0x00	; 0
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	aa e7       	ldi	r26, 0x7A	; 122
    433e:	b4 e4       	ldi	r27, 0x44	; 68
    4340:	8f a3       	std	Y+39, r24	; 0x27
    4342:	98 a7       	std	Y+40, r25	; 0x28
    4344:	a9 a7       	std	Y+41, r26	; 0x29
    4346:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4348:	6f a1       	ldd	r22, Y+39	; 0x27
    434a:	78 a5       	ldd	r23, Y+40	; 0x28
    434c:	89 a5       	ldd	r24, Y+41	; 0x29
    434e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	30 e0       	ldi	r19, 0x00	; 0
    4354:	4a ef       	ldi	r20, 0xFA	; 250
    4356:	54 e4       	ldi	r21, 0x44	; 68
    4358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	8b a3       	std	Y+35, r24	; 0x23
    4362:	9c a3       	std	Y+36, r25	; 0x24
    4364:	ad a3       	std	Y+37, r26	; 0x25
    4366:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4368:	6b a1       	ldd	r22, Y+35	; 0x23
    436a:	7c a1       	ldd	r23, Y+36	; 0x24
    436c:	8d a1       	ldd	r24, Y+37	; 0x25
    436e:	9e a1       	ldd	r25, Y+38	; 0x26
    4370:	20 e0       	ldi	r18, 0x00	; 0
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	40 e8       	ldi	r20, 0x80	; 128
    4376:	5f e3       	ldi	r21, 0x3F	; 63
    4378:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    437c:	88 23       	and	r24, r24
    437e:	2c f4       	brge	.+10     	; 0x438a <Stepper_CounterClockWise_HalfStep+0x77c>
		__ticks = 1;
    4380:	81 e0       	ldi	r24, 0x01	; 1
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	9a a3       	std	Y+34, r25	; 0x22
    4386:	89 a3       	std	Y+33, r24	; 0x21
    4388:	3f c0       	rjmp	.+126    	; 0x4408 <Stepper_CounterClockWise_HalfStep+0x7fa>
	else if (__tmp > 65535)
    438a:	6b a1       	ldd	r22, Y+35	; 0x23
    438c:	7c a1       	ldd	r23, Y+36	; 0x24
    438e:	8d a1       	ldd	r24, Y+37	; 0x25
    4390:	9e a1       	ldd	r25, Y+38	; 0x26
    4392:	20 e0       	ldi	r18, 0x00	; 0
    4394:	3f ef       	ldi	r19, 0xFF	; 255
    4396:	4f e7       	ldi	r20, 0x7F	; 127
    4398:	57 e4       	ldi	r21, 0x47	; 71
    439a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    439e:	18 16       	cp	r1, r24
    43a0:	4c f5       	brge	.+82     	; 0x43f4 <Stepper_CounterClockWise_HalfStep+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43a2:	6f a1       	ldd	r22, Y+39	; 0x27
    43a4:	78 a5       	ldd	r23, Y+40	; 0x28
    43a6:	89 a5       	ldd	r24, Y+41	; 0x29
    43a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	40 e2       	ldi	r20, 0x20	; 32
    43b0:	51 e4       	ldi	r21, 0x41	; 65
    43b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	bc 01       	movw	r22, r24
    43bc:	cd 01       	movw	r24, r26
    43be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43c2:	dc 01       	movw	r26, r24
    43c4:	cb 01       	movw	r24, r22
    43c6:	9a a3       	std	Y+34, r25	; 0x22
    43c8:	89 a3       	std	Y+33, r24	; 0x21
    43ca:	0f c0       	rjmp	.+30     	; 0x43ea <Stepper_CounterClockWise_HalfStep+0x7dc>
    43cc:	88 ec       	ldi	r24, 0xC8	; 200
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	98 a3       	std	Y+32, r25	; 0x20
    43d2:	8f 8f       	std	Y+31, r24	; 0x1f
    43d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43d6:	98 a1       	ldd	r25, Y+32	; 0x20
    43d8:	01 97       	sbiw	r24, 0x01	; 1
    43da:	f1 f7       	brne	.-4      	; 0x43d8 <Stepper_CounterClockWise_HalfStep+0x7ca>
    43dc:	98 a3       	std	Y+32, r25	; 0x20
    43de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43e0:	89 a1       	ldd	r24, Y+33	; 0x21
    43e2:	9a a1       	ldd	r25, Y+34	; 0x22
    43e4:	01 97       	sbiw	r24, 0x01	; 1
    43e6:	9a a3       	std	Y+34, r25	; 0x22
    43e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ea:	89 a1       	ldd	r24, Y+33	; 0x21
    43ec:	9a a1       	ldd	r25, Y+34	; 0x22
    43ee:	00 97       	sbiw	r24, 0x00	; 0
    43f0:	69 f7       	brne	.-38     	; 0x43cc <Stepper_CounterClockWise_HalfStep+0x7be>
    43f2:	14 c0       	rjmp	.+40     	; 0x441c <Stepper_CounterClockWise_HalfStep+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43f4:	6b a1       	ldd	r22, Y+35	; 0x23
    43f6:	7c a1       	ldd	r23, Y+36	; 0x24
    43f8:	8d a1       	ldd	r24, Y+37	; 0x25
    43fa:	9e a1       	ldd	r25, Y+38	; 0x26
    43fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4400:	dc 01       	movw	r26, r24
    4402:	cb 01       	movw	r24, r22
    4404:	9a a3       	std	Y+34, r25	; 0x22
    4406:	89 a3       	std	Y+33, r24	; 0x21
    4408:	89 a1       	ldd	r24, Y+33	; 0x21
    440a:	9a a1       	ldd	r25, Y+34	; 0x22
    440c:	9e 8f       	std	Y+30, r25	; 0x1e
    440e:	8d 8f       	std	Y+29, r24	; 0x1d
    4410:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4412:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4414:	01 97       	sbiw	r24, 0x01	; 1
    4416:	f1 f7       	brne	.-4      	; 0x4414 <Stepper_CounterClockWise_HalfStep+0x806>
    4418:	9e 8f       	std	Y+30, r25	; 0x1e
    441a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(freq);


	//Step7
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    441c:	81 e0       	ldi	r24, 0x01	; 1
    441e:	60 e0       	ldi	r22, 0x00	; 0
    4420:	40 e0       	ldi	r20, 0x00	; 0
    4422:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	61 e0       	ldi	r22, 0x01	; 1
    442a:	40 e0       	ldi	r20, 0x00	; 0
    442c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_HIGH);
    4430:	81 e0       	ldi	r24, 0x01	; 1
    4432:	62 e0       	ldi	r22, 0x02	; 2
    4434:	41 e0       	ldi	r20, 0x01	; 1
    4436:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    443a:	81 e0       	ldi	r24, 0x01	; 1
    443c:	63 e0       	ldi	r22, 0x03	; 3
    443e:	41 e0       	ldi	r20, 0x01	; 1
    4440:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    4444:	80 e0       	ldi	r24, 0x00	; 0
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	aa e7       	ldi	r26, 0x7A	; 122
    444a:	b4 e4       	ldi	r27, 0x44	; 68
    444c:	89 8f       	std	Y+25, r24	; 0x19
    444e:	9a 8f       	std	Y+26, r25	; 0x1a
    4450:	ab 8f       	std	Y+27, r26	; 0x1b
    4452:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4454:	69 8d       	ldd	r22, Y+25	; 0x19
    4456:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4458:	8b 8d       	ldd	r24, Y+27	; 0x1b
    445a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	4a ef       	ldi	r20, 0xFA	; 250
    4462:	54 e4       	ldi	r21, 0x44	; 68
    4464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4468:	dc 01       	movw	r26, r24
    446a:	cb 01       	movw	r24, r22
    446c:	8d 8b       	std	Y+21, r24	; 0x15
    446e:	9e 8b       	std	Y+22, r25	; 0x16
    4470:	af 8b       	std	Y+23, r26	; 0x17
    4472:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4474:	6d 89       	ldd	r22, Y+21	; 0x15
    4476:	7e 89       	ldd	r23, Y+22	; 0x16
    4478:	8f 89       	ldd	r24, Y+23	; 0x17
    447a:	98 8d       	ldd	r25, Y+24	; 0x18
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	40 e8       	ldi	r20, 0x80	; 128
    4482:	5f e3       	ldi	r21, 0x3F	; 63
    4484:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4488:	88 23       	and	r24, r24
    448a:	2c f4       	brge	.+10     	; 0x4496 <Stepper_CounterClockWise_HalfStep+0x888>
		__ticks = 1;
    448c:	81 e0       	ldi	r24, 0x01	; 1
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	9c 8b       	std	Y+20, r25	; 0x14
    4492:	8b 8b       	std	Y+19, r24	; 0x13
    4494:	3f c0       	rjmp	.+126    	; 0x4514 <Stepper_CounterClockWise_HalfStep+0x906>
	else if (__tmp > 65535)
    4496:	6d 89       	ldd	r22, Y+21	; 0x15
    4498:	7e 89       	ldd	r23, Y+22	; 0x16
    449a:	8f 89       	ldd	r24, Y+23	; 0x17
    449c:	98 8d       	ldd	r25, Y+24	; 0x18
    449e:	20 e0       	ldi	r18, 0x00	; 0
    44a0:	3f ef       	ldi	r19, 0xFF	; 255
    44a2:	4f e7       	ldi	r20, 0x7F	; 127
    44a4:	57 e4       	ldi	r21, 0x47	; 71
    44a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44aa:	18 16       	cp	r1, r24
    44ac:	4c f5       	brge	.+82     	; 0x4500 <Stepper_CounterClockWise_HalfStep+0x8f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ae:	69 8d       	ldd	r22, Y+25	; 0x19
    44b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44b6:	20 e0       	ldi	r18, 0x00	; 0
    44b8:	30 e0       	ldi	r19, 0x00	; 0
    44ba:	40 e2       	ldi	r20, 0x20	; 32
    44bc:	51 e4       	ldi	r21, 0x41	; 65
    44be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c2:	dc 01       	movw	r26, r24
    44c4:	cb 01       	movw	r24, r22
    44c6:	bc 01       	movw	r22, r24
    44c8:	cd 01       	movw	r24, r26
    44ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ce:	dc 01       	movw	r26, r24
    44d0:	cb 01       	movw	r24, r22
    44d2:	9c 8b       	std	Y+20, r25	; 0x14
    44d4:	8b 8b       	std	Y+19, r24	; 0x13
    44d6:	0f c0       	rjmp	.+30     	; 0x44f6 <Stepper_CounterClockWise_HalfStep+0x8e8>
    44d8:	88 ec       	ldi	r24, 0xC8	; 200
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	9a 8b       	std	Y+18, r25	; 0x12
    44de:	89 8b       	std	Y+17, r24	; 0x11
    44e0:	89 89       	ldd	r24, Y+17	; 0x11
    44e2:	9a 89       	ldd	r25, Y+18	; 0x12
    44e4:	01 97       	sbiw	r24, 0x01	; 1
    44e6:	f1 f7       	brne	.-4      	; 0x44e4 <Stepper_CounterClockWise_HalfStep+0x8d6>
    44e8:	9a 8b       	std	Y+18, r25	; 0x12
    44ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ec:	8b 89       	ldd	r24, Y+19	; 0x13
    44ee:	9c 89       	ldd	r25, Y+20	; 0x14
    44f0:	01 97       	sbiw	r24, 0x01	; 1
    44f2:	9c 8b       	std	Y+20, r25	; 0x14
    44f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44f6:	8b 89       	ldd	r24, Y+19	; 0x13
    44f8:	9c 89       	ldd	r25, Y+20	; 0x14
    44fa:	00 97       	sbiw	r24, 0x00	; 0
    44fc:	69 f7       	brne	.-38     	; 0x44d8 <Stepper_CounterClockWise_HalfStep+0x8ca>
    44fe:	14 c0       	rjmp	.+40     	; 0x4528 <Stepper_CounterClockWise_HalfStep+0x91a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4500:	6d 89       	ldd	r22, Y+21	; 0x15
    4502:	7e 89       	ldd	r23, Y+22	; 0x16
    4504:	8f 89       	ldd	r24, Y+23	; 0x17
    4506:	98 8d       	ldd	r25, Y+24	; 0x18
    4508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    450c:	dc 01       	movw	r26, r24
    450e:	cb 01       	movw	r24, r22
    4510:	9c 8b       	std	Y+20, r25	; 0x14
    4512:	8b 8b       	std	Y+19, r24	; 0x13
    4514:	8b 89       	ldd	r24, Y+19	; 0x13
    4516:	9c 89       	ldd	r25, Y+20	; 0x14
    4518:	98 8b       	std	Y+16, r25	; 0x10
    451a:	8f 87       	std	Y+15, r24	; 0x0f
    451c:	8f 85       	ldd	r24, Y+15	; 0x0f
    451e:	98 89       	ldd	r25, Y+16	; 0x10
    4520:	01 97       	sbiw	r24, 0x01	; 1
    4522:	f1 f7       	brne	.-4      	; 0x4520 <Stepper_CounterClockWise_HalfStep+0x912>
    4524:	98 8b       	std	Y+16, r25	; 0x10
    4526:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(freq);


	//Step8
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_LOW);
    4528:	81 e0       	ldi	r24, 0x01	; 1
    452a:	60 e0       	ldi	r22, 0x00	; 0
    452c:	40 e0       	ldi	r20, 0x00	; 0
    452e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Pink_PIN,DIO_LOW);
    4532:	81 e0       	ldi	r24, 0x01	; 1
    4534:	61 e0       	ldi	r22, 0x01	; 1
    4536:	40 e0       	ldi	r20, 0x00	; 0
    4538:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Yellow_PIN,DIO_LOW);
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	62 e0       	ldi	r22, 0x02	; 2
    4540:	40 e0       	ldi	r20, 0x00	; 0
    4542:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,STEPPER_Orange_PIN,DIO_HIGH);
    4546:	81 e0       	ldi	r24, 0x01	; 1
    4548:	63 e0       	ldi	r22, 0x03	; 3
    454a:	41 e0       	ldi	r20, 0x01	; 1
    454c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    4550:	80 e0       	ldi	r24, 0x00	; 0
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	aa e7       	ldi	r26, 0x7A	; 122
    4556:	b4 e4       	ldi	r27, 0x44	; 68
    4558:	8b 87       	std	Y+11, r24	; 0x0b
    455a:	9c 87       	std	Y+12, r25	; 0x0c
    455c:	ad 87       	std	Y+13, r26	; 0x0d
    455e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4560:	6b 85       	ldd	r22, Y+11	; 0x0b
    4562:	7c 85       	ldd	r23, Y+12	; 0x0c
    4564:	8d 85       	ldd	r24, Y+13	; 0x0d
    4566:	9e 85       	ldd	r25, Y+14	; 0x0e
    4568:	20 e0       	ldi	r18, 0x00	; 0
    456a:	30 e0       	ldi	r19, 0x00	; 0
    456c:	4a ef       	ldi	r20, 0xFA	; 250
    456e:	54 e4       	ldi	r21, 0x44	; 68
    4570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4574:	dc 01       	movw	r26, r24
    4576:	cb 01       	movw	r24, r22
    4578:	8f 83       	std	Y+7, r24	; 0x07
    457a:	98 87       	std	Y+8, r25	; 0x08
    457c:	a9 87       	std	Y+9, r26	; 0x09
    457e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4580:	6f 81       	ldd	r22, Y+7	; 0x07
    4582:	78 85       	ldd	r23, Y+8	; 0x08
    4584:	89 85       	ldd	r24, Y+9	; 0x09
    4586:	9a 85       	ldd	r25, Y+10	; 0x0a
    4588:	20 e0       	ldi	r18, 0x00	; 0
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	40 e8       	ldi	r20, 0x80	; 128
    458e:	5f e3       	ldi	r21, 0x3F	; 63
    4590:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4594:	88 23       	and	r24, r24
    4596:	2c f4       	brge	.+10     	; 0x45a2 <Stepper_CounterClockWise_HalfStep+0x994>
		__ticks = 1;
    4598:	81 e0       	ldi	r24, 0x01	; 1
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	9e 83       	std	Y+6, r25	; 0x06
    459e:	8d 83       	std	Y+5, r24	; 0x05
    45a0:	3f c0       	rjmp	.+126    	; 0x4620 <Stepper_CounterClockWise_HalfStep+0xa12>
	else if (__tmp > 65535)
    45a2:	6f 81       	ldd	r22, Y+7	; 0x07
    45a4:	78 85       	ldd	r23, Y+8	; 0x08
    45a6:	89 85       	ldd	r24, Y+9	; 0x09
    45a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	3f ef       	ldi	r19, 0xFF	; 255
    45ae:	4f e7       	ldi	r20, 0x7F	; 127
    45b0:	57 e4       	ldi	r21, 0x47	; 71
    45b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45b6:	18 16       	cp	r1, r24
    45b8:	4c f5       	brge	.+82     	; 0x460c <Stepper_CounterClockWise_HalfStep+0x9fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    45bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    45be:	8d 85       	ldd	r24, Y+13	; 0x0d
    45c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    45c2:	20 e0       	ldi	r18, 0x00	; 0
    45c4:	30 e0       	ldi	r19, 0x00	; 0
    45c6:	40 e2       	ldi	r20, 0x20	; 32
    45c8:	51 e4       	ldi	r21, 0x41	; 65
    45ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ce:	dc 01       	movw	r26, r24
    45d0:	cb 01       	movw	r24, r22
    45d2:	bc 01       	movw	r22, r24
    45d4:	cd 01       	movw	r24, r26
    45d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	9e 83       	std	Y+6, r25	; 0x06
    45e0:	8d 83       	std	Y+5, r24	; 0x05
    45e2:	0f c0       	rjmp	.+30     	; 0x4602 <Stepper_CounterClockWise_HalfStep+0x9f4>
    45e4:	88 ec       	ldi	r24, 0xC8	; 200
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	9c 83       	std	Y+4, r25	; 0x04
    45ea:	8b 83       	std	Y+3, r24	; 0x03
    45ec:	8b 81       	ldd	r24, Y+3	; 0x03
    45ee:	9c 81       	ldd	r25, Y+4	; 0x04
    45f0:	01 97       	sbiw	r24, 0x01	; 1
    45f2:	f1 f7       	brne	.-4      	; 0x45f0 <Stepper_CounterClockWise_HalfStep+0x9e2>
    45f4:	9c 83       	std	Y+4, r25	; 0x04
    45f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45f8:	8d 81       	ldd	r24, Y+5	; 0x05
    45fa:	9e 81       	ldd	r25, Y+6	; 0x06
    45fc:	01 97       	sbiw	r24, 0x01	; 1
    45fe:	9e 83       	std	Y+6, r25	; 0x06
    4600:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4602:	8d 81       	ldd	r24, Y+5	; 0x05
    4604:	9e 81       	ldd	r25, Y+6	; 0x06
    4606:	00 97       	sbiw	r24, 0x00	; 0
    4608:	69 f7       	brne	.-38     	; 0x45e4 <Stepper_CounterClockWise_HalfStep+0x9d6>
    460a:	14 c0       	rjmp	.+40     	; 0x4634 <Stepper_CounterClockWise_HalfStep+0xa26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    460c:	6f 81       	ldd	r22, Y+7	; 0x07
    460e:	78 85       	ldd	r23, Y+8	; 0x08
    4610:	89 85       	ldd	r24, Y+9	; 0x09
    4612:	9a 85       	ldd	r25, Y+10	; 0x0a
    4614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4618:	dc 01       	movw	r26, r24
    461a:	cb 01       	movw	r24, r22
    461c:	9e 83       	std	Y+6, r25	; 0x06
    461e:	8d 83       	std	Y+5, r24	; 0x05
    4620:	8d 81       	ldd	r24, Y+5	; 0x05
    4622:	9e 81       	ldd	r25, Y+6	; 0x06
    4624:	9a 83       	std	Y+2, r25	; 0x02
    4626:	89 83       	std	Y+1, r24	; 0x01
    4628:	89 81       	ldd	r24, Y+1	; 0x01
    462a:	9a 81       	ldd	r25, Y+2	; 0x02
    462c:	01 97       	sbiw	r24, 0x01	; 1
    462e:	f1 f7       	brne	.-4      	; 0x462c <Stepper_CounterClockWise_HalfStep+0xa1e>
    4630:	9a 83       	std	Y+2, r25	; 0x02
    4632:	89 83       	std	Y+1, r24	; 0x01





}
    4634:	c0 59       	subi	r28, 0x90	; 144
    4636:	df 4f       	sbci	r29, 0xFF	; 255
    4638:	0f b6       	in	r0, 0x3f	; 63
    463a:	f8 94       	cli
    463c:	de bf       	out	0x3e, r29	; 62
    463e:	0f be       	out	0x3f, r0	; 63
    4640:	cd bf       	out	0x3d, r28	; 61
    4642:	cf 91       	pop	r28
    4644:	df 91       	pop	r29
    4646:	1f 91       	pop	r17
    4648:	0f 91       	pop	r16
    464a:	08 95       	ret

0000464c <Servo_voidInit>:
		 .T1_TECHNIQUE=T1_Polling,
		 .T1_CLOCK_MODE=T1_CLK_FCPU_8

 };
void Servo_voidInit()
{
    464c:	df 93       	push	r29
    464e:	cf 93       	push	r28
    4650:	cd b7       	in	r28, 0x3d	; 61
    4652:	de b7       	in	r29, 0x3e	; 62


	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
    4654:	83 e0       	ldi	r24, 0x03	; 3
    4656:	65 e0       	ldi	r22, 0x05	; 5
    4658:	41 e0       	ldi	r20, 0x01	; 1
    465a:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>
	T1_voidInit(&MyTimer);
    465e:	87 e1       	ldi	r24, 0x17	; 23
    4660:	93 e0       	ldi	r25, 0x03	; 3
    4662:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <T1_voidInit>
	ADC_voidInit(ADC_AVCC_Cap,ADC_Single_Conversion,ADC_Right_Adjust);
    4666:	81 e0       	ldi	r24, 0x01	; 1
    4668:	61 e0       	ldi	r22, 0x01	; 1
    466a:	41 e0       	ldi	r20, 0x01	; 1
    466c:	0e 94 c0 11 	call	0x2380	; 0x2380 <ADC_voidInit>



}
    4670:	cf 91       	pop	r28
    4672:	df 91       	pop	r29
    4674:	08 95       	ret

00004676 <Servo_voidSetAngle>:
void Servo_voidSetAngle(u16 Copy_u8Angle)
{
    4676:	df 93       	push	r29
    4678:	cf 93       	push	r28
    467a:	00 d0       	rcall	.+0      	; 0x467c <Servo_voidSetAngle+0x6>
    467c:	00 d0       	rcall	.+0      	; 0x467e <Servo_voidSetAngle+0x8>
    467e:	cd b7       	in	r28, 0x3d	; 61
    4680:	de b7       	in	r29, 0x3e	; 62
    4682:	9c 83       	std	Y+4, r25	; 0x04
    4684:	8b 83       	std	Y+3, r24	; 0x03
	u16 desired_angle;

	Copy_u8Angle+=90;
    4686:	8b 81       	ldd	r24, Y+3	; 0x03
    4688:	9c 81       	ldd	r25, Y+4	; 0x04
    468a:	86 5a       	subi	r24, 0xA6	; 166
    468c:	9f 4f       	sbci	r25, 0xFF	; 255
    468e:	9c 83       	std	Y+4, r25	; 0x04
    4690:	8b 83       	std	Y+3, r24	; 0x03
	desired_angle=((Copy_u8Angle*5.556)+1000);
    4692:	8b 81       	ldd	r24, Y+3	; 0x03
    4694:	9c 81       	ldd	r25, Y+4	; 0x04
    4696:	cc 01       	movw	r24, r24
    4698:	a0 e0       	ldi	r26, 0x00	; 0
    469a:	b0 e0       	ldi	r27, 0x00	; 0
    469c:	bc 01       	movw	r22, r24
    469e:	cd 01       	movw	r24, r26
    46a0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    46a4:	dc 01       	movw	r26, r24
    46a6:	cb 01       	movw	r24, r22
    46a8:	bc 01       	movw	r22, r24
    46aa:	cd 01       	movw	r24, r26
    46ac:	21 ec       	ldi	r18, 0xC1	; 193
    46ae:	3a ec       	ldi	r19, 0xCA	; 202
    46b0:	41 eb       	ldi	r20, 0xB1	; 177
    46b2:	50 e4       	ldi	r21, 0x40	; 64
    46b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46b8:	dc 01       	movw	r26, r24
    46ba:	cb 01       	movw	r24, r22
    46bc:	bc 01       	movw	r22, r24
    46be:	cd 01       	movw	r24, r26
    46c0:	20 e0       	ldi	r18, 0x00	; 0
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	4a e7       	ldi	r20, 0x7A	; 122
    46c6:	54 e4       	ldi	r21, 0x44	; 68
    46c8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    46cc:	dc 01       	movw	r26, r24
    46ce:	cb 01       	movw	r24, r22
    46d0:	bc 01       	movw	r22, r24
    46d2:	cd 01       	movw	r24, r26
    46d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d8:	dc 01       	movw	r26, r24
    46da:	cb 01       	movw	r24, r22
    46dc:	9a 83       	std	Y+2, r25	; 0x02
    46de:	89 83       	std	Y+1, r24	; 0x01

	MyTimer.T1_Compare_value=desired_angle;
    46e0:	89 81       	ldd	r24, Y+1	; 0x01
    46e2:	9a 81       	ldd	r25, Y+2	; 0x02
    46e4:	90 93 24 03 	sts	0x0324, r25
    46e8:	80 93 23 03 	sts	0x0323, r24
    T1_voidSet_ICRValue(20000);
    46ec:	80 e2       	ldi	r24, 0x20	; 32
    46ee:	9e e4       	ldi	r25, 0x4E	; 78
    46f0:	0e 94 92 0b 	call	0x1724	; 0x1724 <T1_voidSet_ICRValue>

	T1_voidStartTimer(&MyTimer);
    46f4:	87 e1       	ldi	r24, 0x17	; 23
    46f6:	93 e0       	ldi	r25, 0x03	; 3
    46f8:	0e 94 93 09 	call	0x1326	; 0x1326 <T1_voidStartTimer>

}
    46fc:	0f 90       	pop	r0
    46fe:	0f 90       	pop	r0
    4700:	0f 90       	pop	r0
    4702:	0f 90       	pop	r0
    4704:	cf 91       	pop	r28
    4706:	df 91       	pop	r29
    4708:	08 95       	ret

0000470a <Servo_voidPot>:

void Servo_voidPot()
{
    470a:	df 93       	push	r29
    470c:	cf 93       	push	r28
    470e:	00 d0       	rcall	.+0      	; 0x4710 <Servo_voidPot+0x6>
    4710:	cd b7       	in	r28, 0x3d	; 61
    4712:	de b7       	in	r29, 0x3e	; 62


	u16 reading;
	ADC_voidStartConversion(ADC_Channel_4);
    4714:	84 e0       	ldi	r24, 0x04	; 4
    4716:	0e 94 6d 12 	call	0x24da	; 0x24da <ADC_voidStartConversion>
	reading=ADC_voidRead();
    471a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <ADC_voidRead>
    471e:	9a 83       	std	Y+2, r25	; 0x02
    4720:	89 83       	std	Y+1, r24	; 0x01
	Servo_voidSetAngle((reading/5.68)-90);
    4722:	89 81       	ldd	r24, Y+1	; 0x01
    4724:	9a 81       	ldd	r25, Y+2	; 0x02
    4726:	cc 01       	movw	r24, r24
    4728:	a0 e0       	ldi	r26, 0x00	; 0
    472a:	b0 e0       	ldi	r27, 0x00	; 0
    472c:	bc 01       	movw	r22, r24
    472e:	cd 01       	movw	r24, r26
    4730:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4734:	dc 01       	movw	r26, r24
    4736:	cb 01       	movw	r24, r22
    4738:	bc 01       	movw	r22, r24
    473a:	cd 01       	movw	r24, r26
    473c:	2f e8       	ldi	r18, 0x8F	; 143
    473e:	32 ec       	ldi	r19, 0xC2	; 194
    4740:	45 eb       	ldi	r20, 0xB5	; 181
    4742:	50 e4       	ldi	r21, 0x40	; 64
    4744:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4748:	dc 01       	movw	r26, r24
    474a:	cb 01       	movw	r24, r22
    474c:	bc 01       	movw	r22, r24
    474e:	cd 01       	movw	r24, r26
    4750:	20 e0       	ldi	r18, 0x00	; 0
    4752:	30 e0       	ldi	r19, 0x00	; 0
    4754:	44 eb       	ldi	r20, 0xB4	; 180
    4756:	52 e4       	ldi	r21, 0x42	; 66
    4758:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    475c:	dc 01       	movw	r26, r24
    475e:	cb 01       	movw	r24, r22
    4760:	bc 01       	movw	r22, r24
    4762:	cd 01       	movw	r24, r26
    4764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4768:	dc 01       	movw	r26, r24
    476a:	cb 01       	movw	r24, r22
    476c:	0e 94 3b 23 	call	0x4676	; 0x4676 <Servo_voidSetAngle>


}
    4770:	0f 90       	pop	r0
    4772:	0f 90       	pop	r0
    4774:	cf 91       	pop	r28
    4776:	df 91       	pop	r29
    4778:	08 95       	ret

0000477a <SSD_voidInit>:
#include"SSD_Private.h"



void SSD_voidInit(SSD_t *Copy_PstructLed)
{
    477a:	df 93       	push	r29
    477c:	cf 93       	push	r28
    477e:	00 d0       	rcall	.+0      	; 0x4780 <SSD_voidInit+0x6>
    4780:	00 d0       	rcall	.+0      	; 0x4782 <SSD_voidInit+0x8>
    4782:	cd b7       	in	r28, 0x3d	; 61
    4784:	de b7       	in	r29, 0x3e	; 62
    4786:	9a 83       	std	Y+2, r25	; 0x02
    4788:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortDirection(Copy_PstructLed->PORT,DIO_OUTPUT);
    478a:	e9 81       	ldd	r30, Y+1	; 0x01
    478c:	fa 81       	ldd	r31, Y+2	; 0x02
    478e:	80 81       	ld	r24, Z
    4790:	61 e0       	ldi	r22, 0x01	; 1
    4792:	0e 94 b7 10 	call	0x216e	; 0x216e <DIO_voidSetPortDirection>

		switch(Copy_PstructLed->CommanState)
    4796:	e9 81       	ldd	r30, Y+1	; 0x01
    4798:	fa 81       	ldd	r31, Y+2	; 0x02
    479a:	81 81       	ldd	r24, Z+1	; 0x01
    479c:	28 2f       	mov	r18, r24
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	3c 83       	std	Y+4, r19	; 0x04
    47a2:	2b 83       	std	Y+3, r18	; 0x03
    47a4:	8b 81       	ldd	r24, Y+3	; 0x03
    47a6:	9c 81       	ldd	r25, Y+4	; 0x04
    47a8:	00 97       	sbiw	r24, 0x00	; 0
    47aa:	61 f0       	breq	.+24     	; 0x47c4 <SSD_voidInit+0x4a>
    47ac:	2b 81       	ldd	r18, Y+3	; 0x03
    47ae:	3c 81       	ldd	r19, Y+4	; 0x04
    47b0:	21 30       	cpi	r18, 0x01	; 1
    47b2:	31 05       	cpc	r19, r1
    47b4:	69 f4       	brne	.+26     	; 0x47d0 <SSD_voidInit+0x56>
			{
			case Comman_Cathod:
				DIO_voidSetPortValue(Copy_PstructLed->PORT,0x00);
    47b6:	e9 81       	ldd	r30, Y+1	; 0x01
    47b8:	fa 81       	ldd	r31, Y+2	; 0x02
    47ba:	80 81       	ld	r24, Z
    47bc:	60 e0       	ldi	r22, 0x00	; 0
    47be:	0e 94 3c 11 	call	0x2278	; 0x2278 <DIO_voidSetPortValue>
    47c2:	06 c0       	rjmp	.+12     	; 0x47d0 <SSD_voidInit+0x56>
				break;

			case Comman_Anode:
					DIO_voidSetPortValue(Copy_PstructLed->PORT,0xFF);
    47c4:	e9 81       	ldd	r30, Y+1	; 0x01
    47c6:	fa 81       	ldd	r31, Y+2	; 0x02
    47c8:	80 81       	ld	r24, Z
    47ca:	6f ef       	ldi	r22, 0xFF	; 255
    47cc:	0e 94 3c 11 	call	0x2278	; 0x2278 <DIO_voidSetPortValue>
					break;
			}

}
    47d0:	0f 90       	pop	r0
    47d2:	0f 90       	pop	r0
    47d4:	0f 90       	pop	r0
    47d6:	0f 90       	pop	r0
    47d8:	cf 91       	pop	r28
    47da:	df 91       	pop	r29
    47dc:	08 95       	ret

000047de <SSD_Display>:
void SSD_Display(SSD_t *Copy_PstructLed,u8 num)
{
    47de:	df 93       	push	r29
    47e0:	cf 93       	push	r28
    47e2:	00 d0       	rcall	.+0      	; 0x47e4 <SSD_Display+0x6>
    47e4:	00 d0       	rcall	.+0      	; 0x47e6 <SSD_Display+0x8>
    47e6:	0f 92       	push	r0
    47e8:	cd b7       	in	r28, 0x3d	; 61
    47ea:	de b7       	in	r29, 0x3e	; 62
    47ec:	9a 83       	std	Y+2, r25	; 0x02
    47ee:	89 83       	std	Y+1, r24	; 0x01
    47f0:	6b 83       	std	Y+3, r22	; 0x03
	switch(Copy_PstructLed->CommanState)
    47f2:	e9 81       	ldd	r30, Y+1	; 0x01
    47f4:	fa 81       	ldd	r31, Y+2	; 0x02
    47f6:	81 81       	ldd	r24, Z+1	; 0x01
    47f8:	28 2f       	mov	r18, r24
    47fa:	30 e0       	ldi	r19, 0x00	; 0
    47fc:	3d 83       	std	Y+5, r19	; 0x05
    47fe:	2c 83       	std	Y+4, r18	; 0x04
    4800:	8c 81       	ldd	r24, Y+4	; 0x04
    4802:	9d 81       	ldd	r25, Y+5	; 0x05
    4804:	00 97       	sbiw	r24, 0x00	; 0
    4806:	b1 f0       	breq	.+44     	; 0x4834 <SSD_Display+0x56>
    4808:	2c 81       	ldd	r18, Y+4	; 0x04
    480a:	3d 81       	ldd	r19, Y+5	; 0x05
    480c:	21 30       	cpi	r18, 0x01	; 1
    480e:	31 05       	cpc	r19, r1
    4810:	f9 f4       	brne	.+62     	; 0x4850 <SSD_Display+0x72>
	{
	case Comman_Cathod:
		DIO_voidSetPortValue(Copy_PstructLed->PORT,~arr[num]);
    4812:	e9 81       	ldd	r30, Y+1	; 0x01
    4814:	fa 81       	ldd	r31, Y+2	; 0x02
    4816:	20 81       	ld	r18, Z
    4818:	8b 81       	ldd	r24, Y+3	; 0x03
    481a:	88 2f       	mov	r24, r24
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	fc 01       	movw	r30, r24
    4820:	e3 50       	subi	r30, 0x03	; 3
    4822:	fc 4f       	sbci	r31, 0xFC	; 252
    4824:	80 81       	ld	r24, Z
    4826:	98 2f       	mov	r25, r24
    4828:	90 95       	com	r25
    482a:	82 2f       	mov	r24, r18
    482c:	69 2f       	mov	r22, r25
    482e:	0e 94 3c 11 	call	0x2278	; 0x2278 <DIO_voidSetPortValue>
    4832:	0e c0       	rjmp	.+28     	; 0x4850 <SSD_Display+0x72>
		break;

	case Comman_Anode:
			DIO_voidSetPortValue(Copy_PstructLed->PORT,arr[num]);
    4834:	e9 81       	ldd	r30, Y+1	; 0x01
    4836:	fa 81       	ldd	r31, Y+2	; 0x02
    4838:	20 81       	ld	r18, Z
    483a:	8b 81       	ldd	r24, Y+3	; 0x03
    483c:	88 2f       	mov	r24, r24
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	fc 01       	movw	r30, r24
    4842:	e3 50       	subi	r30, 0x03	; 3
    4844:	fc 4f       	sbci	r31, 0xFC	; 252
    4846:	90 81       	ld	r25, Z
    4848:	82 2f       	mov	r24, r18
    484a:	69 2f       	mov	r22, r25
    484c:	0e 94 3c 11 	call	0x2278	; 0x2278 <DIO_voidSetPortValue>
			break;
	}


}
    4850:	0f 90       	pop	r0
    4852:	0f 90       	pop	r0
    4854:	0f 90       	pop	r0
    4856:	0f 90       	pop	r0
    4858:	0f 90       	pop	r0
    485a:	cf 91       	pop	r28
    485c:	df 91       	pop	r29
    485e:	08 95       	ret

00004860 <SSD_Disable>:
void SSD_Disable(SSD_t *Copy_PstructLed)
{
    4860:	df 93       	push	r29
    4862:	cf 93       	push	r28
    4864:	00 d0       	rcall	.+0      	; 0x4866 <SSD_Disable+0x6>
    4866:	00 d0       	rcall	.+0      	; 0x4868 <SSD_Disable+0x8>
    4868:	cd b7       	in	r28, 0x3d	; 61
    486a:	de b7       	in	r29, 0x3e	; 62
    486c:	9a 83       	std	Y+2, r25	; 0x02
    486e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_PstructLed->CommanState)
    4870:	e9 81       	ldd	r30, Y+1	; 0x01
    4872:	fa 81       	ldd	r31, Y+2	; 0x02
    4874:	81 81       	ldd	r24, Z+1	; 0x01
    4876:	28 2f       	mov	r18, r24
    4878:	30 e0       	ldi	r19, 0x00	; 0
    487a:	3c 83       	std	Y+4, r19	; 0x04
    487c:	2b 83       	std	Y+3, r18	; 0x03
    487e:	8b 81       	ldd	r24, Y+3	; 0x03
    4880:	9c 81       	ldd	r25, Y+4	; 0x04
    4882:	00 97       	sbiw	r24, 0x00	; 0
    4884:	61 f0       	breq	.+24     	; 0x489e <SSD_Disable+0x3e>
    4886:	2b 81       	ldd	r18, Y+3	; 0x03
    4888:	3c 81       	ldd	r19, Y+4	; 0x04
    488a:	21 30       	cpi	r18, 0x01	; 1
    488c:	31 05       	cpc	r19, r1
    488e:	69 f4       	brne	.+26     	; 0x48aa <SSD_Disable+0x4a>
		{
		case Comman_Cathod:
			DIO_voidSetPortValue(Copy_PstructLed->PORT,0x00);
    4890:	e9 81       	ldd	r30, Y+1	; 0x01
    4892:	fa 81       	ldd	r31, Y+2	; 0x02
    4894:	80 81       	ld	r24, Z
    4896:	60 e0       	ldi	r22, 0x00	; 0
    4898:	0e 94 3c 11 	call	0x2278	; 0x2278 <DIO_voidSetPortValue>
    489c:	06 c0       	rjmp	.+12     	; 0x48aa <SSD_Disable+0x4a>
			break;

		case Comman_Anode:
				DIO_voidSetPortValue(Copy_PstructLed->PORT,0xFF);
    489e:	e9 81       	ldd	r30, Y+1	; 0x01
    48a0:	fa 81       	ldd	r31, Y+2	; 0x02
    48a2:	80 81       	ld	r24, Z
    48a4:	6f ef       	ldi	r22, 0xFF	; 255
    48a6:	0e 94 3c 11 	call	0x2278	; 0x2278 <DIO_voidSetPortValue>
				break;
		}


}
    48aa:	0f 90       	pop	r0
    48ac:	0f 90       	pop	r0
    48ae:	0f 90       	pop	r0
    48b0:	0f 90       	pop	r0
    48b2:	cf 91       	pop	r28
    48b4:	df 91       	pop	r29
    48b6:	08 95       	ret

000048b8 <LED_voidInit>:
#include"../../LIB/STD_TYPES.h"
#include"../../MCAL/DIO/DIO_Interface.h"
#include"LED_Interface.h"

void LED_voidInit(LED_t *Copy_PstructLed)
{
    48b8:	df 93       	push	r29
    48ba:	cf 93       	push	r28
    48bc:	00 d0       	rcall	.+0      	; 0x48be <LED_voidInit+0x6>
    48be:	00 d0       	rcall	.+0      	; 0x48c0 <LED_voidInit+0x8>
    48c0:	cd b7       	in	r28, 0x3d	; 61
    48c2:	de b7       	in	r29, 0x3e	; 62
    48c4:	9a 83       	std	Y+2, r25	; 0x02
    48c6:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinDirection(Copy_PstructLed->PORT,Copy_PstructLed->PIN,DIO_OUTPUT);
    48c8:	e9 81       	ldd	r30, Y+1	; 0x01
    48ca:	fa 81       	ldd	r31, Y+2	; 0x02
    48cc:	80 81       	ld	r24, Z
    48ce:	e9 81       	ldd	r30, Y+1	; 0x01
    48d0:	fa 81       	ldd	r31, Y+2	; 0x02
    48d2:	91 81       	ldd	r25, Z+1	; 0x01
    48d4:	69 2f       	mov	r22, r25
    48d6:	41 e0       	ldi	r20, 0x01	; 1
    48d8:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>

	switch(Copy_PstructLed->ActiveState)
    48dc:	e9 81       	ldd	r30, Y+1	; 0x01
    48de:	fa 81       	ldd	r31, Y+2	; 0x02
    48e0:	82 81       	ldd	r24, Z+2	; 0x02
    48e2:	28 2f       	mov	r18, r24
    48e4:	30 e0       	ldi	r19, 0x00	; 0
    48e6:	3c 83       	std	Y+4, r19	; 0x04
    48e8:	2b 83       	std	Y+3, r18	; 0x03
    48ea:	8b 81       	ldd	r24, Y+3	; 0x03
    48ec:	9c 81       	ldd	r25, Y+4	; 0x04
    48ee:	00 97       	sbiw	r24, 0x00	; 0
    48f0:	81 f0       	breq	.+32     	; 0x4912 <LED_voidInit+0x5a>
    48f2:	2b 81       	ldd	r18, Y+3	; 0x03
    48f4:	3c 81       	ldd	r19, Y+4	; 0x04
    48f6:	21 30       	cpi	r18, 0x01	; 1
    48f8:	31 05       	cpc	r19, r1
    48fa:	a9 f4       	brne	.+42     	; 0x4926 <LED_voidInit+0x6e>
	{

	case ACTIVE_HIGH:
		DIO_voidSetPinValue(Copy_PstructLed->PORT,Copy_PstructLed->PIN,DIO_LOW);
    48fc:	e9 81       	ldd	r30, Y+1	; 0x01
    48fe:	fa 81       	ldd	r31, Y+2	; 0x02
    4900:	80 81       	ld	r24, Z
    4902:	e9 81       	ldd	r30, Y+1	; 0x01
    4904:	fa 81       	ldd	r31, Y+2	; 0x02
    4906:	91 81       	ldd	r25, Z+1	; 0x01
    4908:	69 2f       	mov	r22, r25
    490a:	40 e0       	ldi	r20, 0x00	; 0
    490c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    4910:	0a c0       	rjmp	.+20     	; 0x4926 <LED_voidInit+0x6e>
		break;

	case ACTIVE_LOW:
		DIO_voidSetPinValue(Copy_PstructLed->PORT,Copy_PstructLed->PIN,DIO_HIGH);
    4912:	e9 81       	ldd	r30, Y+1	; 0x01
    4914:	fa 81       	ldd	r31, Y+2	; 0x02
    4916:	80 81       	ld	r24, Z
    4918:	e9 81       	ldd	r30, Y+1	; 0x01
    491a:	fa 81       	ldd	r31, Y+2	; 0x02
    491c:	91 81       	ldd	r25, Z+1	; 0x01
    491e:	69 2f       	mov	r22, r25
    4920:	41 e0       	ldi	r20, 0x01	; 1
    4922:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
		break;


	}
}
    4926:	0f 90       	pop	r0
    4928:	0f 90       	pop	r0
    492a:	0f 90       	pop	r0
    492c:	0f 90       	pop	r0
    492e:	cf 91       	pop	r28
    4930:	df 91       	pop	r29
    4932:	08 95       	ret

00004934 <LED_ON>:

	void LED_ON(LED_t *Copy_PstructLed)
	{
    4934:	df 93       	push	r29
    4936:	cf 93       	push	r28
    4938:	00 d0       	rcall	.+0      	; 0x493a <LED_ON+0x6>
    493a:	00 d0       	rcall	.+0      	; 0x493c <LED_ON+0x8>
    493c:	cd b7       	in	r28, 0x3d	; 61
    493e:	de b7       	in	r29, 0x3e	; 62
    4940:	9a 83       	std	Y+2, r25	; 0x02
    4942:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_PstructLed->ActiveState)
    4944:	e9 81       	ldd	r30, Y+1	; 0x01
    4946:	fa 81       	ldd	r31, Y+2	; 0x02
    4948:	82 81       	ldd	r24, Z+2	; 0x02
    494a:	28 2f       	mov	r18, r24
    494c:	30 e0       	ldi	r19, 0x00	; 0
    494e:	3c 83       	std	Y+4, r19	; 0x04
    4950:	2b 83       	std	Y+3, r18	; 0x03
    4952:	8b 81       	ldd	r24, Y+3	; 0x03
    4954:	9c 81       	ldd	r25, Y+4	; 0x04
    4956:	00 97       	sbiw	r24, 0x00	; 0
    4958:	81 f0       	breq	.+32     	; 0x497a <LED_ON+0x46>
    495a:	2b 81       	ldd	r18, Y+3	; 0x03
    495c:	3c 81       	ldd	r19, Y+4	; 0x04
    495e:	21 30       	cpi	r18, 0x01	; 1
    4960:	31 05       	cpc	r19, r1
    4962:	a9 f4       	brne	.+42     	; 0x498e <LED_ON+0x5a>
		{

		case ACTIVE_HIGH:
			DIO_voidSetPinValue(Copy_PstructLed->PORT,Copy_PstructLed->PIN,DIO_HIGH);
    4964:	e9 81       	ldd	r30, Y+1	; 0x01
    4966:	fa 81       	ldd	r31, Y+2	; 0x02
    4968:	80 81       	ld	r24, Z
    496a:	e9 81       	ldd	r30, Y+1	; 0x01
    496c:	fa 81       	ldd	r31, Y+2	; 0x02
    496e:	91 81       	ldd	r25, Z+1	; 0x01
    4970:	69 2f       	mov	r22, r25
    4972:	41 e0       	ldi	r20, 0x01	; 1
    4974:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    4978:	0a c0       	rjmp	.+20     	; 0x498e <LED_ON+0x5a>
			break;

		case ACTIVE_LOW:
			DIO_voidSetPinValue(Copy_PstructLed->PORT,Copy_PstructLed->PIN,DIO_LOW);
    497a:	e9 81       	ldd	r30, Y+1	; 0x01
    497c:	fa 81       	ldd	r31, Y+2	; 0x02
    497e:	80 81       	ld	r24, Z
    4980:	e9 81       	ldd	r30, Y+1	; 0x01
    4982:	fa 81       	ldd	r31, Y+2	; 0x02
    4984:	91 81       	ldd	r25, Z+1	; 0x01
    4986:	69 2f       	mov	r22, r25
    4988:	40 e0       	ldi	r20, 0x00	; 0
    498a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
			break;


		}

	}
    498e:	0f 90       	pop	r0
    4990:	0f 90       	pop	r0
    4992:	0f 90       	pop	r0
    4994:	0f 90       	pop	r0
    4996:	cf 91       	pop	r28
    4998:	df 91       	pop	r29
    499a:	08 95       	ret

0000499c <LED_OFF>:

	void LED_OFF(LED_t *Copy_PstructLed)
	{
    499c:	df 93       	push	r29
    499e:	cf 93       	push	r28
    49a0:	00 d0       	rcall	.+0      	; 0x49a2 <LED_OFF+0x6>
    49a2:	00 d0       	rcall	.+0      	; 0x49a4 <LED_OFF+0x8>
    49a4:	cd b7       	in	r28, 0x3d	; 61
    49a6:	de b7       	in	r29, 0x3e	; 62
    49a8:	9a 83       	std	Y+2, r25	; 0x02
    49aa:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_PstructLed->ActiveState)
    49ac:	e9 81       	ldd	r30, Y+1	; 0x01
    49ae:	fa 81       	ldd	r31, Y+2	; 0x02
    49b0:	82 81       	ldd	r24, Z+2	; 0x02
    49b2:	28 2f       	mov	r18, r24
    49b4:	30 e0       	ldi	r19, 0x00	; 0
    49b6:	3c 83       	std	Y+4, r19	; 0x04
    49b8:	2b 83       	std	Y+3, r18	; 0x03
    49ba:	8b 81       	ldd	r24, Y+3	; 0x03
    49bc:	9c 81       	ldd	r25, Y+4	; 0x04
    49be:	00 97       	sbiw	r24, 0x00	; 0
    49c0:	81 f0       	breq	.+32     	; 0x49e2 <LED_OFF+0x46>
    49c2:	2b 81       	ldd	r18, Y+3	; 0x03
    49c4:	3c 81       	ldd	r19, Y+4	; 0x04
    49c6:	21 30       	cpi	r18, 0x01	; 1
    49c8:	31 05       	cpc	r19, r1
    49ca:	a9 f4       	brne	.+42     	; 0x49f6 <LED_OFF+0x5a>
				{

				case ACTIVE_HIGH:
					DIO_voidSetPinValue(Copy_PstructLed->PORT,Copy_PstructLed->PIN,DIO_LOW);
    49cc:	e9 81       	ldd	r30, Y+1	; 0x01
    49ce:	fa 81       	ldd	r31, Y+2	; 0x02
    49d0:	80 81       	ld	r24, Z
    49d2:	e9 81       	ldd	r30, Y+1	; 0x01
    49d4:	fa 81       	ldd	r31, Y+2	; 0x02
    49d6:	91 81       	ldd	r25, Z+1	; 0x01
    49d8:	69 2f       	mov	r22, r25
    49da:	40 e0       	ldi	r20, 0x00	; 0
    49dc:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    49e0:	0a c0       	rjmp	.+20     	; 0x49f6 <LED_OFF+0x5a>
					break;

				case ACTIVE_LOW:
					DIO_voidSetPinValue(Copy_PstructLed->PORT,Copy_PstructLed->PIN,DIO_HIGH);
    49e2:	e9 81       	ldd	r30, Y+1	; 0x01
    49e4:	fa 81       	ldd	r31, Y+2	; 0x02
    49e6:	80 81       	ld	r24, Z
    49e8:	e9 81       	ldd	r30, Y+1	; 0x01
    49ea:	fa 81       	ldd	r31, Y+2	; 0x02
    49ec:	91 81       	ldd	r25, Z+1	; 0x01
    49ee:	69 2f       	mov	r22, r25
    49f0:	41 e0       	ldi	r20, 0x01	; 1
    49f2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>

				}



	}
    49f6:	0f 90       	pop	r0
    49f8:	0f 90       	pop	r0
    49fa:	0f 90       	pop	r0
    49fc:	0f 90       	pop	r0
    49fe:	cf 91       	pop	r28
    4a00:	df 91       	pop	r29
    4a02:	08 95       	ret

00004a04 <KPAD_voidInit>:




void KPAD_voidInit()
{
    4a04:	df 93       	push	r29
    4a06:	cf 93       	push	r28
    4a08:	cd b7       	in	r28, 0x3d	; 61
    4a0a:	de b7       	in	r29, 0x3e	; 62
	//SET COL PINS OUTPUT
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Col1_PIN,DIO_OUTPUT);
    4a0c:	80 e0       	ldi	r24, 0x00	; 0
    4a0e:	60 e0       	ldi	r22, 0x00	; 0
    4a10:	41 e0       	ldi	r20, 0x01	; 1
    4a12:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Col2_PIN,DIO_OUTPUT);
    4a16:	80 e0       	ldi	r24, 0x00	; 0
    4a18:	61 e0       	ldi	r22, 0x01	; 1
    4a1a:	41 e0       	ldi	r20, 0x01	; 1
    4a1c:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Col3_PIN,DIO_OUTPUT);
    4a20:	80 e0       	ldi	r24, 0x00	; 0
    4a22:	62 e0       	ldi	r22, 0x02	; 2
    4a24:	41 e0       	ldi	r20, 0x01	; 1
    4a26:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Col4_PIN,DIO_OUTPUT);
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
    4a2c:	63 e0       	ldi	r22, 0x03	; 3
    4a2e:	41 e0       	ldi	r20, 0x01	; 1
    4a30:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>

	//SET ROW PINS INPUT
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Row1_PIN,DIO_INPUT);
    4a34:	80 e0       	ldi	r24, 0x00	; 0
    4a36:	64 e0       	ldi	r22, 0x04	; 4
    4a38:	40 e0       	ldi	r20, 0x00	; 0
    4a3a:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Row2_PIN,DIO_INPUT);
    4a3e:	80 e0       	ldi	r24, 0x00	; 0
    4a40:	65 e0       	ldi	r22, 0x05	; 5
    4a42:	40 e0       	ldi	r20, 0x00	; 0
    4a44:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Row3_PIN,DIO_INPUT);
    4a48:	80 e0       	ldi	r24, 0x00	; 0
    4a4a:	66 e0       	ldi	r22, 0x06	; 6
    4a4c:	40 e0       	ldi	r20, 0x00	; 0
    4a4e:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_Row4_PIN,DIO_INPUT);
    4a52:	80 e0       	ldi	r24, 0x00	; 0
    4a54:	67 e0       	ldi	r22, 0x07	; 7
    4a56:	40 e0       	ldi	r20, 0x00	; 0
    4a58:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>


	//SET INTIAL PORT VALUE TO 1
	DIO_voidSetPortValue(KPAD_PORT,0xFF);
    4a5c:	80 e0       	ldi	r24, 0x00	; 0
    4a5e:	6f ef       	ldi	r22, 0xFF	; 255
    4a60:	0e 94 3c 11 	call	0x2278	; 0x2278 <DIO_voidSetPortValue>



}
    4a64:	cf 91       	pop	r28
    4a66:	df 91       	pop	r29
    4a68:	08 95       	ret

00004a6a <KPAD_u8GetKeyPressed>:
u8 KPAD_u8GetKeyPressed()
{
    4a6a:	df 93       	push	r29
    4a6c:	cf 93       	push	r28
    4a6e:	cd b7       	in	r28, 0x3d	; 61
    4a70:	de b7       	in	r29, 0x3e	; 62
    4a72:	6f 97       	sbiw	r28, 0x1f	; 31
    4a74:	0f b6       	in	r0, 0x3f	; 63
    4a76:	f8 94       	cli
    4a78:	de bf       	out	0x3e, r29	; 62
    4a7a:	0f be       	out	0x3f, r0	; 63
    4a7c:	cd bf       	out	0x3d, r28	; 61
    4a7e:	80 e0       	ldi	r24, 0x00	; 0
    4a80:	90 e0       	ldi	r25, 0x00	; 0
    4a82:	a8 e4       	ldi	r26, 0x48	; 72
    4a84:	b2 e4       	ldi	r27, 0x42	; 66
    4a86:	89 8f       	std	Y+25, r24	; 0x19
    4a88:	9a 8f       	std	Y+26, r25	; 0x1a
    4a8a:	ab 8f       	std	Y+27, r26	; 0x1b
    4a8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a8e:	69 8d       	ldd	r22, Y+25	; 0x19
    4a90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a96:	20 e0       	ldi	r18, 0x00	; 0
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	4a ef       	ldi	r20, 0xFA	; 250
    4a9c:	54 e4       	ldi	r21, 0x44	; 68
    4a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aa2:	dc 01       	movw	r26, r24
    4aa4:	cb 01       	movw	r24, r22
    4aa6:	8d 8b       	std	Y+21, r24	; 0x15
    4aa8:	9e 8b       	std	Y+22, r25	; 0x16
    4aaa:	af 8b       	std	Y+23, r26	; 0x17
    4aac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4aae:	6d 89       	ldd	r22, Y+21	; 0x15
    4ab0:	7e 89       	ldd	r23, Y+22	; 0x16
    4ab2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ab4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ab6:	20 e0       	ldi	r18, 0x00	; 0
    4ab8:	30 e0       	ldi	r19, 0x00	; 0
    4aba:	40 e8       	ldi	r20, 0x80	; 128
    4abc:	5f e3       	ldi	r21, 0x3F	; 63
    4abe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ac2:	88 23       	and	r24, r24
    4ac4:	2c f4       	brge	.+10     	; 0x4ad0 <KPAD_u8GetKeyPressed+0x66>
		__ticks = 1;
    4ac6:	81 e0       	ldi	r24, 0x01	; 1
    4ac8:	90 e0       	ldi	r25, 0x00	; 0
    4aca:	9c 8b       	std	Y+20, r25	; 0x14
    4acc:	8b 8b       	std	Y+19, r24	; 0x13
    4ace:	3f c0       	rjmp	.+126    	; 0x4b4e <KPAD_u8GetKeyPressed+0xe4>
	else if (__tmp > 65535)
    4ad0:	6d 89       	ldd	r22, Y+21	; 0x15
    4ad2:	7e 89       	ldd	r23, Y+22	; 0x16
    4ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ad6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ad8:	20 e0       	ldi	r18, 0x00	; 0
    4ada:	3f ef       	ldi	r19, 0xFF	; 255
    4adc:	4f e7       	ldi	r20, 0x7F	; 127
    4ade:	57 e4       	ldi	r21, 0x47	; 71
    4ae0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ae4:	18 16       	cp	r1, r24
    4ae6:	4c f5       	brge	.+82     	; 0x4b3a <KPAD_u8GetKeyPressed+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ae8:	69 8d       	ldd	r22, Y+25	; 0x19
    4aea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4aec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4aee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4af0:	20 e0       	ldi	r18, 0x00	; 0
    4af2:	30 e0       	ldi	r19, 0x00	; 0
    4af4:	40 e2       	ldi	r20, 0x20	; 32
    4af6:	51 e4       	ldi	r21, 0x41	; 65
    4af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4afc:	dc 01       	movw	r26, r24
    4afe:	cb 01       	movw	r24, r22
    4b00:	bc 01       	movw	r22, r24
    4b02:	cd 01       	movw	r24, r26
    4b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b08:	dc 01       	movw	r26, r24
    4b0a:	cb 01       	movw	r24, r22
    4b0c:	9c 8b       	std	Y+20, r25	; 0x14
    4b0e:	8b 8b       	std	Y+19, r24	; 0x13
    4b10:	0f c0       	rjmp	.+30     	; 0x4b30 <KPAD_u8GetKeyPressed+0xc6>
    4b12:	88 ec       	ldi	r24, 0xC8	; 200
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	9a 8b       	std	Y+18, r25	; 0x12
    4b18:	89 8b       	std	Y+17, r24	; 0x11
    4b1a:	89 89       	ldd	r24, Y+17	; 0x11
    4b1c:	9a 89       	ldd	r25, Y+18	; 0x12
    4b1e:	01 97       	sbiw	r24, 0x01	; 1
    4b20:	f1 f7       	brne	.-4      	; 0x4b1e <KPAD_u8GetKeyPressed+0xb4>
    4b22:	9a 8b       	std	Y+18, r25	; 0x12
    4b24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b26:	8b 89       	ldd	r24, Y+19	; 0x13
    4b28:	9c 89       	ldd	r25, Y+20	; 0x14
    4b2a:	01 97       	sbiw	r24, 0x01	; 1
    4b2c:	9c 8b       	std	Y+20, r25	; 0x14
    4b2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b30:	8b 89       	ldd	r24, Y+19	; 0x13
    4b32:	9c 89       	ldd	r25, Y+20	; 0x14
    4b34:	00 97       	sbiw	r24, 0x00	; 0
    4b36:	69 f7       	brne	.-38     	; 0x4b12 <KPAD_u8GetKeyPressed+0xa8>
    4b38:	14 c0       	rjmp	.+40     	; 0x4b62 <KPAD_u8GetKeyPressed+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b3a:	6d 89       	ldd	r22, Y+21	; 0x15
    4b3c:	7e 89       	ldd	r23, Y+22	; 0x16
    4b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    4b40:	98 8d       	ldd	r25, Y+24	; 0x18
    4b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b46:	dc 01       	movw	r26, r24
    4b48:	cb 01       	movw	r24, r22
    4b4a:	9c 8b       	std	Y+20, r25	; 0x14
    4b4c:	8b 8b       	std	Y+19, r24	; 0x13
    4b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    4b50:	9c 89       	ldd	r25, Y+20	; 0x14
    4b52:	98 8b       	std	Y+16, r25	; 0x10
    4b54:	8f 87       	std	Y+15, r24	; 0x0f
    4b56:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b58:	98 89       	ldd	r25, Y+16	; 0x10
    4b5a:	01 97       	sbiw	r24, 0x01	; 1
    4b5c:	f1 f7       	brne	.-4      	; 0x4b5a <KPAD_u8GetKeyPressed+0xf0>
    4b5e:	98 8b       	std	Y+16, r25	; 0x10
    4b60:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(50);
	u8 Local_u8KeyPressed=NOT_Pressed;
    4b62:	8f ef       	ldi	r24, 0xFF	; 255
    4b64:	8f 8f       	std	Y+31, r24	; 0x1f

	for(u8 col_index=0;col_index<KPAD_NUM_COLS;col_index++)
    4b66:	1e 8e       	std	Y+30, r1	; 0x1e
    4b68:	ab c0       	rjmp	.+342    	; 0x4cc0 <KPAD_u8GetKeyPressed+0x256>
	{

		DIO_voidSetPinValue(KPAD_PORT,col_index,DIO_LOW);
    4b6a:	80 e0       	ldi	r24, 0x00	; 0
    4b6c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4b6e:	40 e0       	ldi	r20, 0x00	; 0
    4b70:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
		for(u8 row_index=4;row_index<8;row_index++)
    4b74:	84 e0       	ldi	r24, 0x04	; 4
    4b76:	8d 8f       	std	Y+29, r24	; 0x1d
    4b78:	97 c0       	rjmp	.+302    	; 0x4ca8 <KPAD_u8GetKeyPressed+0x23e>
		{


			if(DIO_u8GetPinValue(KPAD_PORT,row_index)==0){
    4b7a:	80 e0       	ldi	r24, 0x00	; 0
    4b7c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4b7e:	0e 94 3c 10 	call	0x2078	; 0x2078 <DIO_u8GetPinValue>
    4b82:	88 23       	and	r24, r24
    4b84:	09 f0       	breq	.+2      	; 0x4b88 <KPAD_u8GetKeyPressed+0x11e>
    4b86:	8d c0       	rjmp	.+282    	; 0x4ca2 <KPAD_u8GetKeyPressed+0x238>
				Local_u8KeyPressed=KPAD_KEYS[row_index-4][col_index];
    4b88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b8a:	88 2f       	mov	r24, r24
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	ac 01       	movw	r20, r24
    4b90:	44 50       	subi	r20, 0x04	; 4
    4b92:	50 40       	sbci	r21, 0x00	; 0
    4b94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b96:	28 2f       	mov	r18, r24
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	ca 01       	movw	r24, r20
    4b9c:	88 0f       	add	r24, r24
    4b9e:	99 1f       	adc	r25, r25
    4ba0:	88 0f       	add	r24, r24
    4ba2:	99 1f       	adc	r25, r25
    4ba4:	82 0f       	add	r24, r18
    4ba6:	93 1f       	adc	r25, r19
    4ba8:	fc 01       	movw	r30, r24
    4baa:	eb 5d       	subi	r30, 0xDB	; 219
    4bac:	fc 4f       	sbci	r31, 0xFC	; 252
    4bae:	80 81       	ld	r24, Z
    4bb0:	8f 8f       	std	Y+31, r24	; 0x1f
    4bb2:	80 e0       	ldi	r24, 0x00	; 0
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	a8 e4       	ldi	r26, 0x48	; 72
    4bb8:	b2 e4       	ldi	r27, 0x42	; 66
    4bba:	8b 87       	std	Y+11, r24	; 0x0b
    4bbc:	9c 87       	std	Y+12, r25	; 0x0c
    4bbe:	ad 87       	std	Y+13, r26	; 0x0d
    4bc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bca:	20 e0       	ldi	r18, 0x00	; 0
    4bcc:	30 e0       	ldi	r19, 0x00	; 0
    4bce:	4a ef       	ldi	r20, 0xFA	; 250
    4bd0:	54 e4       	ldi	r21, 0x44	; 68
    4bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bd6:	dc 01       	movw	r26, r24
    4bd8:	cb 01       	movw	r24, r22
    4bda:	8f 83       	std	Y+7, r24	; 0x07
    4bdc:	98 87       	std	Y+8, r25	; 0x08
    4bde:	a9 87       	std	Y+9, r26	; 0x09
    4be0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4be2:	6f 81       	ldd	r22, Y+7	; 0x07
    4be4:	78 85       	ldd	r23, Y+8	; 0x08
    4be6:	89 85       	ldd	r24, Y+9	; 0x09
    4be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bea:	20 e0       	ldi	r18, 0x00	; 0
    4bec:	30 e0       	ldi	r19, 0x00	; 0
    4bee:	40 e8       	ldi	r20, 0x80	; 128
    4bf0:	5f e3       	ldi	r21, 0x3F	; 63
    4bf2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bf6:	88 23       	and	r24, r24
    4bf8:	2c f4       	brge	.+10     	; 0x4c04 <KPAD_u8GetKeyPressed+0x19a>
		__ticks = 1;
    4bfa:	81 e0       	ldi	r24, 0x01	; 1
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	9e 83       	std	Y+6, r25	; 0x06
    4c00:	8d 83       	std	Y+5, r24	; 0x05
    4c02:	3f c0       	rjmp	.+126    	; 0x4c82 <KPAD_u8GetKeyPressed+0x218>
	else if (__tmp > 65535)
    4c04:	6f 81       	ldd	r22, Y+7	; 0x07
    4c06:	78 85       	ldd	r23, Y+8	; 0x08
    4c08:	89 85       	ldd	r24, Y+9	; 0x09
    4c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c0c:	20 e0       	ldi	r18, 0x00	; 0
    4c0e:	3f ef       	ldi	r19, 0xFF	; 255
    4c10:	4f e7       	ldi	r20, 0x7F	; 127
    4c12:	57 e4       	ldi	r21, 0x47	; 71
    4c14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c18:	18 16       	cp	r1, r24
    4c1a:	4c f5       	brge	.+82     	; 0x4c6e <KPAD_u8GetKeyPressed+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c24:	20 e0       	ldi	r18, 0x00	; 0
    4c26:	30 e0       	ldi	r19, 0x00	; 0
    4c28:	40 e2       	ldi	r20, 0x20	; 32
    4c2a:	51 e4       	ldi	r21, 0x41	; 65
    4c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c30:	dc 01       	movw	r26, r24
    4c32:	cb 01       	movw	r24, r22
    4c34:	bc 01       	movw	r22, r24
    4c36:	cd 01       	movw	r24, r26
    4c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c3c:	dc 01       	movw	r26, r24
    4c3e:	cb 01       	movw	r24, r22
    4c40:	9e 83       	std	Y+6, r25	; 0x06
    4c42:	8d 83       	std	Y+5, r24	; 0x05
    4c44:	0f c0       	rjmp	.+30     	; 0x4c64 <KPAD_u8GetKeyPressed+0x1fa>
    4c46:	88 ec       	ldi	r24, 0xC8	; 200
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	9c 83       	std	Y+4, r25	; 0x04
    4c4c:	8b 83       	std	Y+3, r24	; 0x03
    4c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c50:	9c 81       	ldd	r25, Y+4	; 0x04
    4c52:	01 97       	sbiw	r24, 0x01	; 1
    4c54:	f1 f7       	brne	.-4      	; 0x4c52 <KPAD_u8GetKeyPressed+0x1e8>
    4c56:	9c 83       	std	Y+4, r25	; 0x04
    4c58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c5e:	01 97       	sbiw	r24, 0x01	; 1
    4c60:	9e 83       	std	Y+6, r25	; 0x06
    4c62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c64:	8d 81       	ldd	r24, Y+5	; 0x05
    4c66:	9e 81       	ldd	r25, Y+6	; 0x06
    4c68:	00 97       	sbiw	r24, 0x00	; 0
    4c6a:	69 f7       	brne	.-38     	; 0x4c46 <KPAD_u8GetKeyPressed+0x1dc>
    4c6c:	14 c0       	rjmp	.+40     	; 0x4c96 <KPAD_u8GetKeyPressed+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    4c70:	78 85       	ldd	r23, Y+8	; 0x08
    4c72:	89 85       	ldd	r24, Y+9	; 0x09
    4c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	9e 83       	std	Y+6, r25	; 0x06
    4c80:	8d 83       	std	Y+5, r24	; 0x05
    4c82:	8d 81       	ldd	r24, Y+5	; 0x05
    4c84:	9e 81       	ldd	r25, Y+6	; 0x06
    4c86:	9a 83       	std	Y+2, r25	; 0x02
    4c88:	89 83       	std	Y+1, r24	; 0x01
    4c8a:	89 81       	ldd	r24, Y+1	; 0x01
    4c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8e:	01 97       	sbiw	r24, 0x01	; 1
    4c90:	f1 f7       	brne	.-4      	; 0x4c8e <KPAD_u8GetKeyPressed+0x224>
    4c92:	9a 83       	std	Y+2, r25	; 0x02
    4c94:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				while(DIO_u8GetPinValue(KPAD_PORT,row_index)==0);
    4c96:	80 e0       	ldi	r24, 0x00	; 0
    4c98:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4c9a:	0e 94 3c 10 	call	0x2078	; 0x2078 <DIO_u8GetPinValue>
    4c9e:	88 23       	and	r24, r24
    4ca0:	d1 f3       	breq	.-12     	; 0x4c96 <KPAD_u8GetKeyPressed+0x22c>

	for(u8 col_index=0;col_index<KPAD_NUM_COLS;col_index++)
	{

		DIO_voidSetPinValue(KPAD_PORT,col_index,DIO_LOW);
		for(u8 row_index=4;row_index<8;row_index++)
    4ca2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ca4:	8f 5f       	subi	r24, 0xFF	; 255
    4ca6:	8d 8f       	std	Y+29, r24	; 0x1d
    4ca8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4caa:	88 30       	cpi	r24, 0x08	; 8
    4cac:	08 f4       	brcc	.+2      	; 0x4cb0 <KPAD_u8GetKeyPressed+0x246>
    4cae:	65 cf       	rjmp	.-310    	; 0x4b7a <KPAD_u8GetKeyPressed+0x110>

			}


		}
		DIO_voidSetPinValue(KPAD_PORT,col_index,DIO_HIGH);
    4cb0:	80 e0       	ldi	r24, 0x00	; 0
    4cb2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4cb4:	41 e0       	ldi	r20, 0x01	; 1
    4cb6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
{

	_delay_ms(50);
	u8 Local_u8KeyPressed=NOT_Pressed;

	for(u8 col_index=0;col_index<KPAD_NUM_COLS;col_index++)
    4cba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4cbc:	8f 5f       	subi	r24, 0xFF	; 255
    4cbe:	8e 8f       	std	Y+30, r24	; 0x1e
    4cc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4cc2:	84 30       	cpi	r24, 0x04	; 4
    4cc4:	08 f4       	brcc	.+2      	; 0x4cc8 <KPAD_u8GetKeyPressed+0x25e>
    4cc6:	51 cf       	rjmp	.-350    	; 0x4b6a <KPAD_u8GetKeyPressed+0x100>
		DIO_voidSetPinValue(KPAD_PORT,col_index,DIO_HIGH);


	}

	return Local_u8KeyPressed;
    4cc8:	8f 8d       	ldd	r24, Y+31	; 0x1f

}
    4cca:	6f 96       	adiw	r28, 0x1f	; 31
    4ccc:	0f b6       	in	r0, 0x3f	; 63
    4cce:	f8 94       	cli
    4cd0:	de bf       	out	0x3e, r29	; 62
    4cd2:	0f be       	out	0x3f, r0	; 63
    4cd4:	cd bf       	out	0x3d, r28	; 61
    4cd6:	cf 91       	pop	r28
    4cd8:	df 91       	pop	r29
    4cda:	08 95       	ret

00004cdc <CLCD_voidInit>:
#include"CLCD_Config.h"
#include"CLCD_Private.h"
#include <util/delay.h>

void CLCD_voidInit()
{
    4cdc:	0f 93       	push	r16
    4cde:	1f 93       	push	r17
    4ce0:	df 93       	push	r29
    4ce2:	cf 93       	push	r28
    4ce4:	cd b7       	in	r28, 0x3d	; 61
    4ce6:	de b7       	in	r29, 0x3e	; 62
    4ce8:	cc 54       	subi	r28, 0x4C	; 76
    4cea:	d0 40       	sbci	r29, 0x00	; 0
    4cec:	0f b6       	in	r0, 0x3f	; 63
    4cee:	f8 94       	cli
    4cf0:	de bf       	out	0x3e, r29	; 62
    4cf2:	0f be       	out	0x3f, r0	; 63
    4cf4:	cd bf       	out	0x3d, r28	; 61
	//DATA PORT ->OUTPUT
	DIO_voidSetPortDirection(CLCD_DATA_PORT,DIO_OUTPUT);
    4cf6:	82 e0       	ldi	r24, 0x02	; 2
    4cf8:	61 e0       	ldi	r22, 0x01	; 1
    4cfa:	0e 94 b7 10 	call	0x216e	; 0x216e <DIO_voidSetPortDirection>

	//RS-RW-EN -->OUTPUT

	DIO_voidSetPinDirection(CLCD_CONTROL_PORT,CLCD_RS,DIO_OUTPUT);
    4cfe:	83 e0       	ldi	r24, 0x03	; 3
    4d00:	67 e0       	ldi	r22, 0x07	; 7
    4d02:	41 e0       	ldi	r20, 0x01	; 1
    4d04:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT,CLCD_RW,DIO_OUTPUT);
    4d08:	83 e0       	ldi	r24, 0x03	; 3
    4d0a:	66 e0       	ldi	r22, 0x06	; 6
    4d0c:	41 e0       	ldi	r20, 0x01	; 1
    4d0e:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT,CLCD_E,DIO_OUTPUT);
    4d12:	83 e0       	ldi	r24, 0x03	; 3
    4d14:	63 e0       	ldi	r22, 0x03	; 3
    4d16:	41 e0       	ldi	r20, 0x01	; 1
    4d18:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <DIO_voidSetPinDirection>
    4d1c:	fe 01       	movw	r30, r28
    4d1e:	e7 5b       	subi	r30, 0xB7	; 183
    4d20:	ff 4f       	sbci	r31, 0xFF	; 255
    4d22:	80 e0       	ldi	r24, 0x00	; 0
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	a8 e4       	ldi	r26, 0x48	; 72
    4d28:	b2 e4       	ldi	r27, 0x42	; 66
    4d2a:	80 83       	st	Z, r24
    4d2c:	91 83       	std	Z+1, r25	; 0x01
    4d2e:	a2 83       	std	Z+2, r26	; 0x02
    4d30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d32:	8e 01       	movw	r16, r28
    4d34:	0b 5b       	subi	r16, 0xBB	; 187
    4d36:	1f 4f       	sbci	r17, 0xFF	; 255
    4d38:	fe 01       	movw	r30, r28
    4d3a:	e7 5b       	subi	r30, 0xB7	; 183
    4d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d3e:	60 81       	ld	r22, Z
    4d40:	71 81       	ldd	r23, Z+1	; 0x01
    4d42:	82 81       	ldd	r24, Z+2	; 0x02
    4d44:	93 81       	ldd	r25, Z+3	; 0x03
    4d46:	20 e0       	ldi	r18, 0x00	; 0
    4d48:	30 e0       	ldi	r19, 0x00	; 0
    4d4a:	4a ef       	ldi	r20, 0xFA	; 250
    4d4c:	54 e4       	ldi	r21, 0x44	; 68
    4d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d52:	dc 01       	movw	r26, r24
    4d54:	cb 01       	movw	r24, r22
    4d56:	f8 01       	movw	r30, r16
    4d58:	80 83       	st	Z, r24
    4d5a:	91 83       	std	Z+1, r25	; 0x01
    4d5c:	a2 83       	std	Z+2, r26	; 0x02
    4d5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d60:	fe 01       	movw	r30, r28
    4d62:	eb 5b       	subi	r30, 0xBB	; 187
    4d64:	ff 4f       	sbci	r31, 0xFF	; 255
    4d66:	60 81       	ld	r22, Z
    4d68:	71 81       	ldd	r23, Z+1	; 0x01
    4d6a:	82 81       	ldd	r24, Z+2	; 0x02
    4d6c:	93 81       	ldd	r25, Z+3	; 0x03
    4d6e:	20 e0       	ldi	r18, 0x00	; 0
    4d70:	30 e0       	ldi	r19, 0x00	; 0
    4d72:	40 e8       	ldi	r20, 0x80	; 128
    4d74:	5f e3       	ldi	r21, 0x3F	; 63
    4d76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d7a:	88 23       	and	r24, r24
    4d7c:	44 f4       	brge	.+16     	; 0x4d8e <CLCD_voidInit+0xb2>
		__ticks = 1;
    4d7e:	fe 01       	movw	r30, r28
    4d80:	ed 5b       	subi	r30, 0xBD	; 189
    4d82:	ff 4f       	sbci	r31, 0xFF	; 255
    4d84:	81 e0       	ldi	r24, 0x01	; 1
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	91 83       	std	Z+1, r25	; 0x01
    4d8a:	80 83       	st	Z, r24
    4d8c:	64 c0       	rjmp	.+200    	; 0x4e56 <CLCD_voidInit+0x17a>
	else if (__tmp > 65535)
    4d8e:	fe 01       	movw	r30, r28
    4d90:	eb 5b       	subi	r30, 0xBB	; 187
    4d92:	ff 4f       	sbci	r31, 0xFF	; 255
    4d94:	60 81       	ld	r22, Z
    4d96:	71 81       	ldd	r23, Z+1	; 0x01
    4d98:	82 81       	ldd	r24, Z+2	; 0x02
    4d9a:	93 81       	ldd	r25, Z+3	; 0x03
    4d9c:	20 e0       	ldi	r18, 0x00	; 0
    4d9e:	3f ef       	ldi	r19, 0xFF	; 255
    4da0:	4f e7       	ldi	r20, 0x7F	; 127
    4da2:	57 e4       	ldi	r21, 0x47	; 71
    4da4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4da8:	18 16       	cp	r1, r24
    4daa:	0c f0       	brlt	.+2      	; 0x4dae <CLCD_voidInit+0xd2>
    4dac:	43 c0       	rjmp	.+134    	; 0x4e34 <CLCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dae:	fe 01       	movw	r30, r28
    4db0:	e7 5b       	subi	r30, 0xB7	; 183
    4db2:	ff 4f       	sbci	r31, 0xFF	; 255
    4db4:	60 81       	ld	r22, Z
    4db6:	71 81       	ldd	r23, Z+1	; 0x01
    4db8:	82 81       	ldd	r24, Z+2	; 0x02
    4dba:	93 81       	ldd	r25, Z+3	; 0x03
    4dbc:	20 e0       	ldi	r18, 0x00	; 0
    4dbe:	30 e0       	ldi	r19, 0x00	; 0
    4dc0:	40 e2       	ldi	r20, 0x20	; 32
    4dc2:	51 e4       	ldi	r21, 0x41	; 65
    4dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dc8:	dc 01       	movw	r26, r24
    4dca:	cb 01       	movw	r24, r22
    4dcc:	8e 01       	movw	r16, r28
    4dce:	0d 5b       	subi	r16, 0xBD	; 189
    4dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    4dd2:	bc 01       	movw	r22, r24
    4dd4:	cd 01       	movw	r24, r26
    4dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dda:	dc 01       	movw	r26, r24
    4ddc:	cb 01       	movw	r24, r22
    4dde:	f8 01       	movw	r30, r16
    4de0:	91 83       	std	Z+1, r25	; 0x01
    4de2:	80 83       	st	Z, r24
    4de4:	1f c0       	rjmp	.+62     	; 0x4e24 <CLCD_voidInit+0x148>
    4de6:	fe 01       	movw	r30, r28
    4de8:	ef 5b       	subi	r30, 0xBF	; 191
    4dea:	ff 4f       	sbci	r31, 0xFF	; 255
    4dec:	88 ec       	ldi	r24, 0xC8	; 200
    4dee:	90 e0       	ldi	r25, 0x00	; 0
    4df0:	91 83       	std	Z+1, r25	; 0x01
    4df2:	80 83       	st	Z, r24
    4df4:	fe 01       	movw	r30, r28
    4df6:	ef 5b       	subi	r30, 0xBF	; 191
    4df8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfa:	80 81       	ld	r24, Z
    4dfc:	91 81       	ldd	r25, Z+1	; 0x01
    4dfe:	01 97       	sbiw	r24, 0x01	; 1
    4e00:	f1 f7       	brne	.-4      	; 0x4dfe <CLCD_voidInit+0x122>
    4e02:	fe 01       	movw	r30, r28
    4e04:	ef 5b       	subi	r30, 0xBF	; 191
    4e06:	ff 4f       	sbci	r31, 0xFF	; 255
    4e08:	91 83       	std	Z+1, r25	; 0x01
    4e0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e0c:	de 01       	movw	r26, r28
    4e0e:	ad 5b       	subi	r26, 0xBD	; 189
    4e10:	bf 4f       	sbci	r27, 0xFF	; 255
    4e12:	fe 01       	movw	r30, r28
    4e14:	ed 5b       	subi	r30, 0xBD	; 189
    4e16:	ff 4f       	sbci	r31, 0xFF	; 255
    4e18:	80 81       	ld	r24, Z
    4e1a:	91 81       	ldd	r25, Z+1	; 0x01
    4e1c:	01 97       	sbiw	r24, 0x01	; 1
    4e1e:	11 96       	adiw	r26, 0x01	; 1
    4e20:	9c 93       	st	X, r25
    4e22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e24:	fe 01       	movw	r30, r28
    4e26:	ed 5b       	subi	r30, 0xBD	; 189
    4e28:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2a:	80 81       	ld	r24, Z
    4e2c:	91 81       	ldd	r25, Z+1	; 0x01
    4e2e:	00 97       	sbiw	r24, 0x00	; 0
    4e30:	d1 f6       	brne	.-76     	; 0x4de6 <CLCD_voidInit+0x10a>
    4e32:	24 c0       	rjmp	.+72     	; 0x4e7c <CLCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e34:	8e 01       	movw	r16, r28
    4e36:	0d 5b       	subi	r16, 0xBD	; 189
    4e38:	1f 4f       	sbci	r17, 0xFF	; 255
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	eb 5b       	subi	r30, 0xBB	; 187
    4e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e40:	60 81       	ld	r22, Z
    4e42:	71 81       	ldd	r23, Z+1	; 0x01
    4e44:	82 81       	ldd	r24, Z+2	; 0x02
    4e46:	93 81       	ldd	r25, Z+3	; 0x03
    4e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e4c:	dc 01       	movw	r26, r24
    4e4e:	cb 01       	movw	r24, r22
    4e50:	f8 01       	movw	r30, r16
    4e52:	91 83       	std	Z+1, r25	; 0x01
    4e54:	80 83       	st	Z, r24
    4e56:	fe 01       	movw	r30, r28
    4e58:	ed 5b       	subi	r30, 0xBD	; 189
    4e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5c:	80 81       	ld	r24, Z
    4e5e:	91 81       	ldd	r25, Z+1	; 0x01
    4e60:	fe 01       	movw	r30, r28
    4e62:	ff 96       	adiw	r30, 0x3f	; 63
    4e64:	91 83       	std	Z+1, r25	; 0x01
    4e66:	80 83       	st	Z, r24
    4e68:	fe 01       	movw	r30, r28
    4e6a:	ff 96       	adiw	r30, 0x3f	; 63
    4e6c:	80 81       	ld	r24, Z
    4e6e:	91 81       	ldd	r25, Z+1	; 0x01
    4e70:	01 97       	sbiw	r24, 0x01	; 1
    4e72:	f1 f7       	brne	.-4      	; 0x4e70 <CLCD_voidInit+0x194>
    4e74:	fe 01       	movw	r30, r28
    4e76:	ff 96       	adiw	r30, 0x3f	; 63
    4e78:	91 83       	std	Z+1, r25	; 0x01
    4e7a:	80 83       	st	Z, r24

	//Initialization Sequence:
	_delay_ms(50);

	//Function Set
	CLCD_voidSendCommand(0b00111000);
    4e7c:	88 e3       	ldi	r24, 0x38	; 56
    4e7e:	0e 94 44 29 	call	0x5288	; 0x5288 <CLCD_voidSendCommand>
    4e82:	80 e0       	ldi	r24, 0x00	; 0
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	a8 e4       	ldi	r26, 0x48	; 72
    4e88:	b2 e4       	ldi	r27, 0x42	; 66
    4e8a:	8b af       	std	Y+59, r24	; 0x3b
    4e8c:	9c af       	std	Y+60, r25	; 0x3c
    4e8e:	ad af       	std	Y+61, r26	; 0x3d
    4e90:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4e92:	6b ad       	ldd	r22, Y+59	; 0x3b
    4e94:	7c ad       	ldd	r23, Y+60	; 0x3c
    4e96:	8d ad       	ldd	r24, Y+61	; 0x3d
    4e98:	9e ad       	ldd	r25, Y+62	; 0x3e
    4e9a:	2b ea       	ldi	r18, 0xAB	; 171
    4e9c:	3a ea       	ldi	r19, 0xAA	; 170
    4e9e:	4a e2       	ldi	r20, 0x2A	; 42
    4ea0:	50 e4       	ldi	r21, 0x40	; 64
    4ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ea6:	dc 01       	movw	r26, r24
    4ea8:	cb 01       	movw	r24, r22
    4eaa:	8f ab       	std	Y+55, r24	; 0x37
    4eac:	98 af       	std	Y+56, r25	; 0x38
    4eae:	a9 af       	std	Y+57, r26	; 0x39
    4eb0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    4eb2:	6f a9       	ldd	r22, Y+55	; 0x37
    4eb4:	78 ad       	ldd	r23, Y+56	; 0x38
    4eb6:	89 ad       	ldd	r24, Y+57	; 0x39
    4eb8:	9a ad       	ldd	r25, Y+58	; 0x3a
    4eba:	20 e0       	ldi	r18, 0x00	; 0
    4ebc:	30 e0       	ldi	r19, 0x00	; 0
    4ebe:	40 e8       	ldi	r20, 0x80	; 128
    4ec0:	5f e3       	ldi	r21, 0x3F	; 63
    4ec2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ec6:	88 23       	and	r24, r24
    4ec8:	1c f4       	brge	.+6      	; 0x4ed0 <CLCD_voidInit+0x1f4>
		__ticks = 1;
    4eca:	81 e0       	ldi	r24, 0x01	; 1
    4ecc:	8e ab       	std	Y+54, r24	; 0x36
    4ece:	91 c0       	rjmp	.+290    	; 0x4ff2 <CLCD_voidInit+0x316>
	else if (__tmp > 255)
    4ed0:	6f a9       	ldd	r22, Y+55	; 0x37
    4ed2:	78 ad       	ldd	r23, Y+56	; 0x38
    4ed4:	89 ad       	ldd	r24, Y+57	; 0x39
    4ed6:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ed8:	20 e0       	ldi	r18, 0x00	; 0
    4eda:	30 e0       	ldi	r19, 0x00	; 0
    4edc:	4f e7       	ldi	r20, 0x7F	; 127
    4ede:	53 e4       	ldi	r21, 0x43	; 67
    4ee0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ee4:	18 16       	cp	r1, r24
    4ee6:	0c f0       	brlt	.+2      	; 0x4eea <CLCD_voidInit+0x20e>
    4ee8:	7b c0       	rjmp	.+246    	; 0x4fe0 <CLCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    4eea:	6b ad       	ldd	r22, Y+59	; 0x3b
    4eec:	7c ad       	ldd	r23, Y+60	; 0x3c
    4eee:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ef0:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ef2:	20 e0       	ldi	r18, 0x00	; 0
    4ef4:	30 e0       	ldi	r19, 0x00	; 0
    4ef6:	4a e7       	ldi	r20, 0x7A	; 122
    4ef8:	54 e4       	ldi	r21, 0x44	; 68
    4efa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4efe:	dc 01       	movw	r26, r24
    4f00:	cb 01       	movw	r24, r22
    4f02:	8a ab       	std	Y+50, r24	; 0x32
    4f04:	9b ab       	std	Y+51, r25	; 0x33
    4f06:	ac ab       	std	Y+52, r26	; 0x34
    4f08:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f0a:	6a a9       	ldd	r22, Y+50	; 0x32
    4f0c:	7b a9       	ldd	r23, Y+51	; 0x33
    4f0e:	8c a9       	ldd	r24, Y+52	; 0x34
    4f10:	9d a9       	ldd	r25, Y+53	; 0x35
    4f12:	20 e0       	ldi	r18, 0x00	; 0
    4f14:	30 e0       	ldi	r19, 0x00	; 0
    4f16:	4a ef       	ldi	r20, 0xFA	; 250
    4f18:	54 e4       	ldi	r21, 0x44	; 68
    4f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f1e:	dc 01       	movw	r26, r24
    4f20:	cb 01       	movw	r24, r22
    4f22:	8e a7       	std	Y+46, r24	; 0x2e
    4f24:	9f a7       	std	Y+47, r25	; 0x2f
    4f26:	a8 ab       	std	Y+48, r26	; 0x30
    4f28:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    4f2a:	6e a5       	ldd	r22, Y+46	; 0x2e
    4f2c:	7f a5       	ldd	r23, Y+47	; 0x2f
    4f2e:	88 a9       	ldd	r24, Y+48	; 0x30
    4f30:	99 a9       	ldd	r25, Y+49	; 0x31
    4f32:	20 e0       	ldi	r18, 0x00	; 0
    4f34:	30 e0       	ldi	r19, 0x00	; 0
    4f36:	40 e8       	ldi	r20, 0x80	; 128
    4f38:	5f e3       	ldi	r21, 0x3F	; 63
    4f3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f3e:	88 23       	and	r24, r24
    4f40:	2c f4       	brge	.+10     	; 0x4f4c <CLCD_voidInit+0x270>
		__ticks = 1;
    4f42:	81 e0       	ldi	r24, 0x01	; 1
    4f44:	90 e0       	ldi	r25, 0x00	; 0
    4f46:	9d a7       	std	Y+45, r25	; 0x2d
    4f48:	8c a7       	std	Y+44, r24	; 0x2c
    4f4a:	3f c0       	rjmp	.+126    	; 0x4fca <CLCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    4f4c:	6e a5       	ldd	r22, Y+46	; 0x2e
    4f4e:	7f a5       	ldd	r23, Y+47	; 0x2f
    4f50:	88 a9       	ldd	r24, Y+48	; 0x30
    4f52:	99 a9       	ldd	r25, Y+49	; 0x31
    4f54:	20 e0       	ldi	r18, 0x00	; 0
    4f56:	3f ef       	ldi	r19, 0xFF	; 255
    4f58:	4f e7       	ldi	r20, 0x7F	; 127
    4f5a:	57 e4       	ldi	r21, 0x47	; 71
    4f5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f60:	18 16       	cp	r1, r24
    4f62:	4c f5       	brge	.+82     	; 0x4fb6 <CLCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f64:	6a a9       	ldd	r22, Y+50	; 0x32
    4f66:	7b a9       	ldd	r23, Y+51	; 0x33
    4f68:	8c a9       	ldd	r24, Y+52	; 0x34
    4f6a:	9d a9       	ldd	r25, Y+53	; 0x35
    4f6c:	20 e0       	ldi	r18, 0x00	; 0
    4f6e:	30 e0       	ldi	r19, 0x00	; 0
    4f70:	40 e2       	ldi	r20, 0x20	; 32
    4f72:	51 e4       	ldi	r21, 0x41	; 65
    4f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f78:	dc 01       	movw	r26, r24
    4f7a:	cb 01       	movw	r24, r22
    4f7c:	bc 01       	movw	r22, r24
    4f7e:	cd 01       	movw	r24, r26
    4f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f84:	dc 01       	movw	r26, r24
    4f86:	cb 01       	movw	r24, r22
    4f88:	9d a7       	std	Y+45, r25	; 0x2d
    4f8a:	8c a7       	std	Y+44, r24	; 0x2c
    4f8c:	0f c0       	rjmp	.+30     	; 0x4fac <CLCD_voidInit+0x2d0>
    4f8e:	88 ec       	ldi	r24, 0xC8	; 200
    4f90:	90 e0       	ldi	r25, 0x00	; 0
    4f92:	9b a7       	std	Y+43, r25	; 0x2b
    4f94:	8a a7       	std	Y+42, r24	; 0x2a
    4f96:	8a a5       	ldd	r24, Y+42	; 0x2a
    4f98:	9b a5       	ldd	r25, Y+43	; 0x2b
    4f9a:	01 97       	sbiw	r24, 0x01	; 1
    4f9c:	f1 f7       	brne	.-4      	; 0x4f9a <CLCD_voidInit+0x2be>
    4f9e:	9b a7       	std	Y+43, r25	; 0x2b
    4fa0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fa2:	8c a5       	ldd	r24, Y+44	; 0x2c
    4fa4:	9d a5       	ldd	r25, Y+45	; 0x2d
    4fa6:	01 97       	sbiw	r24, 0x01	; 1
    4fa8:	9d a7       	std	Y+45, r25	; 0x2d
    4faa:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fac:	8c a5       	ldd	r24, Y+44	; 0x2c
    4fae:	9d a5       	ldd	r25, Y+45	; 0x2d
    4fb0:	00 97       	sbiw	r24, 0x00	; 0
    4fb2:	69 f7       	brne	.-38     	; 0x4f8e <CLCD_voidInit+0x2b2>
    4fb4:	24 c0       	rjmp	.+72     	; 0x4ffe <CLCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fb6:	6e a5       	ldd	r22, Y+46	; 0x2e
    4fb8:	7f a5       	ldd	r23, Y+47	; 0x2f
    4fba:	88 a9       	ldd	r24, Y+48	; 0x30
    4fbc:	99 a9       	ldd	r25, Y+49	; 0x31
    4fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fc2:	dc 01       	movw	r26, r24
    4fc4:	cb 01       	movw	r24, r22
    4fc6:	9d a7       	std	Y+45, r25	; 0x2d
    4fc8:	8c a7       	std	Y+44, r24	; 0x2c
    4fca:	8c a5       	ldd	r24, Y+44	; 0x2c
    4fcc:	9d a5       	ldd	r25, Y+45	; 0x2d
    4fce:	99 a7       	std	Y+41, r25	; 0x29
    4fd0:	88 a7       	std	Y+40, r24	; 0x28
    4fd2:	88 a5       	ldd	r24, Y+40	; 0x28
    4fd4:	99 a5       	ldd	r25, Y+41	; 0x29
    4fd6:	01 97       	sbiw	r24, 0x01	; 1
    4fd8:	f1 f7       	brne	.-4      	; 0x4fd6 <CLCD_voidInit+0x2fa>
    4fda:	99 a7       	std	Y+41, r25	; 0x29
    4fdc:	88 a7       	std	Y+40, r24	; 0x28
    4fde:	0f c0       	rjmp	.+30     	; 0x4ffe <CLCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4fe0:	6f a9       	ldd	r22, Y+55	; 0x37
    4fe2:	78 ad       	ldd	r23, Y+56	; 0x38
    4fe4:	89 ad       	ldd	r24, Y+57	; 0x39
    4fe6:	9a ad       	ldd	r25, Y+58	; 0x3a
    4fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fec:	dc 01       	movw	r26, r24
    4fee:	cb 01       	movw	r24, r22
    4ff0:	8e ab       	std	Y+54, r24	; 0x36
    4ff2:	8e a9       	ldd	r24, Y+54	; 0x36
    4ff4:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4ff6:	8f a1       	ldd	r24, Y+39	; 0x27
    4ff8:	8a 95       	dec	r24
    4ffa:	f1 f7       	brne	.-4      	; 0x4ff8 <CLCD_voidInit+0x31c>
    4ffc:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);


	//Display ON/OFF
	CLCD_voidSendCommand(0b00001110);
    4ffe:	8e e0       	ldi	r24, 0x0E	; 14
    5000:	0e 94 44 29 	call	0x5288	; 0x5288 <CLCD_voidSendCommand>
    5004:	80 e0       	ldi	r24, 0x00	; 0
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	a8 e4       	ldi	r26, 0x48	; 72
    500a:	b2 e4       	ldi	r27, 0x42	; 66
    500c:	8b a3       	std	Y+35, r24	; 0x23
    500e:	9c a3       	std	Y+36, r25	; 0x24
    5010:	ad a3       	std	Y+37, r26	; 0x25
    5012:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5014:	6b a1       	ldd	r22, Y+35	; 0x23
    5016:	7c a1       	ldd	r23, Y+36	; 0x24
    5018:	8d a1       	ldd	r24, Y+37	; 0x25
    501a:	9e a1       	ldd	r25, Y+38	; 0x26
    501c:	2b ea       	ldi	r18, 0xAB	; 171
    501e:	3a ea       	ldi	r19, 0xAA	; 170
    5020:	4a e2       	ldi	r20, 0x2A	; 42
    5022:	50 e4       	ldi	r21, 0x40	; 64
    5024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5028:	dc 01       	movw	r26, r24
    502a:	cb 01       	movw	r24, r22
    502c:	8f 8f       	std	Y+31, r24	; 0x1f
    502e:	98 a3       	std	Y+32, r25	; 0x20
    5030:	a9 a3       	std	Y+33, r26	; 0x21
    5032:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    5034:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5036:	78 a1       	ldd	r23, Y+32	; 0x20
    5038:	89 a1       	ldd	r24, Y+33	; 0x21
    503a:	9a a1       	ldd	r25, Y+34	; 0x22
    503c:	20 e0       	ldi	r18, 0x00	; 0
    503e:	30 e0       	ldi	r19, 0x00	; 0
    5040:	40 e8       	ldi	r20, 0x80	; 128
    5042:	5f e3       	ldi	r21, 0x3F	; 63
    5044:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5048:	88 23       	and	r24, r24
    504a:	1c f4       	brge	.+6      	; 0x5052 <CLCD_voidInit+0x376>
		__ticks = 1;
    504c:	81 e0       	ldi	r24, 0x01	; 1
    504e:	8e 8f       	std	Y+30, r24	; 0x1e
    5050:	91 c0       	rjmp	.+290    	; 0x5174 <CLCD_voidInit+0x498>
	else if (__tmp > 255)
    5052:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5054:	78 a1       	ldd	r23, Y+32	; 0x20
    5056:	89 a1       	ldd	r24, Y+33	; 0x21
    5058:	9a a1       	ldd	r25, Y+34	; 0x22
    505a:	20 e0       	ldi	r18, 0x00	; 0
    505c:	30 e0       	ldi	r19, 0x00	; 0
    505e:	4f e7       	ldi	r20, 0x7F	; 127
    5060:	53 e4       	ldi	r21, 0x43	; 67
    5062:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5066:	18 16       	cp	r1, r24
    5068:	0c f0       	brlt	.+2      	; 0x506c <CLCD_voidInit+0x390>
    506a:	7b c0       	rjmp	.+246    	; 0x5162 <CLCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    506c:	6b a1       	ldd	r22, Y+35	; 0x23
    506e:	7c a1       	ldd	r23, Y+36	; 0x24
    5070:	8d a1       	ldd	r24, Y+37	; 0x25
    5072:	9e a1       	ldd	r25, Y+38	; 0x26
    5074:	20 e0       	ldi	r18, 0x00	; 0
    5076:	30 e0       	ldi	r19, 0x00	; 0
    5078:	4a e7       	ldi	r20, 0x7A	; 122
    507a:	54 e4       	ldi	r21, 0x44	; 68
    507c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5080:	dc 01       	movw	r26, r24
    5082:	cb 01       	movw	r24, r22
    5084:	8a 8f       	std	Y+26, r24	; 0x1a
    5086:	9b 8f       	std	Y+27, r25	; 0x1b
    5088:	ac 8f       	std	Y+28, r26	; 0x1c
    508a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    508c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    508e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5090:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5092:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5094:	20 e0       	ldi	r18, 0x00	; 0
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	4a ef       	ldi	r20, 0xFA	; 250
    509a:	54 e4       	ldi	r21, 0x44	; 68
    509c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50a0:	dc 01       	movw	r26, r24
    50a2:	cb 01       	movw	r24, r22
    50a4:	8e 8b       	std	Y+22, r24	; 0x16
    50a6:	9f 8b       	std	Y+23, r25	; 0x17
    50a8:	a8 8f       	std	Y+24, r26	; 0x18
    50aa:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    50ac:	6e 89       	ldd	r22, Y+22	; 0x16
    50ae:	7f 89       	ldd	r23, Y+23	; 0x17
    50b0:	88 8d       	ldd	r24, Y+24	; 0x18
    50b2:	99 8d       	ldd	r25, Y+25	; 0x19
    50b4:	20 e0       	ldi	r18, 0x00	; 0
    50b6:	30 e0       	ldi	r19, 0x00	; 0
    50b8:	40 e8       	ldi	r20, 0x80	; 128
    50ba:	5f e3       	ldi	r21, 0x3F	; 63
    50bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50c0:	88 23       	and	r24, r24
    50c2:	2c f4       	brge	.+10     	; 0x50ce <CLCD_voidInit+0x3f2>
		__ticks = 1;
    50c4:	81 e0       	ldi	r24, 0x01	; 1
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	9d 8b       	std	Y+21, r25	; 0x15
    50ca:	8c 8b       	std	Y+20, r24	; 0x14
    50cc:	3f c0       	rjmp	.+126    	; 0x514c <CLCD_voidInit+0x470>
	else if (__tmp > 65535)
    50ce:	6e 89       	ldd	r22, Y+22	; 0x16
    50d0:	7f 89       	ldd	r23, Y+23	; 0x17
    50d2:	88 8d       	ldd	r24, Y+24	; 0x18
    50d4:	99 8d       	ldd	r25, Y+25	; 0x19
    50d6:	20 e0       	ldi	r18, 0x00	; 0
    50d8:	3f ef       	ldi	r19, 0xFF	; 255
    50da:	4f e7       	ldi	r20, 0x7F	; 127
    50dc:	57 e4       	ldi	r21, 0x47	; 71
    50de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50e2:	18 16       	cp	r1, r24
    50e4:	4c f5       	brge	.+82     	; 0x5138 <CLCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50e6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    50e8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    50ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    50ec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    50ee:	20 e0       	ldi	r18, 0x00	; 0
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	40 e2       	ldi	r20, 0x20	; 32
    50f4:	51 e4       	ldi	r21, 0x41	; 65
    50f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50fa:	dc 01       	movw	r26, r24
    50fc:	cb 01       	movw	r24, r22
    50fe:	bc 01       	movw	r22, r24
    5100:	cd 01       	movw	r24, r26
    5102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5106:	dc 01       	movw	r26, r24
    5108:	cb 01       	movw	r24, r22
    510a:	9d 8b       	std	Y+21, r25	; 0x15
    510c:	8c 8b       	std	Y+20, r24	; 0x14
    510e:	0f c0       	rjmp	.+30     	; 0x512e <CLCD_voidInit+0x452>
    5110:	88 ec       	ldi	r24, 0xC8	; 200
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	9b 8b       	std	Y+19, r25	; 0x13
    5116:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5118:	8a 89       	ldd	r24, Y+18	; 0x12
    511a:	9b 89       	ldd	r25, Y+19	; 0x13
    511c:	01 97       	sbiw	r24, 0x01	; 1
    511e:	f1 f7       	brne	.-4      	; 0x511c <CLCD_voidInit+0x440>
    5120:	9b 8b       	std	Y+19, r25	; 0x13
    5122:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5124:	8c 89       	ldd	r24, Y+20	; 0x14
    5126:	9d 89       	ldd	r25, Y+21	; 0x15
    5128:	01 97       	sbiw	r24, 0x01	; 1
    512a:	9d 8b       	std	Y+21, r25	; 0x15
    512c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    512e:	8c 89       	ldd	r24, Y+20	; 0x14
    5130:	9d 89       	ldd	r25, Y+21	; 0x15
    5132:	00 97       	sbiw	r24, 0x00	; 0
    5134:	69 f7       	brne	.-38     	; 0x5110 <CLCD_voidInit+0x434>
    5136:	24 c0       	rjmp	.+72     	; 0x5180 <CLCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5138:	6e 89       	ldd	r22, Y+22	; 0x16
    513a:	7f 89       	ldd	r23, Y+23	; 0x17
    513c:	88 8d       	ldd	r24, Y+24	; 0x18
    513e:	99 8d       	ldd	r25, Y+25	; 0x19
    5140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5144:	dc 01       	movw	r26, r24
    5146:	cb 01       	movw	r24, r22
    5148:	9d 8b       	std	Y+21, r25	; 0x15
    514a:	8c 8b       	std	Y+20, r24	; 0x14
    514c:	8c 89       	ldd	r24, Y+20	; 0x14
    514e:	9d 89       	ldd	r25, Y+21	; 0x15
    5150:	99 8b       	std	Y+17, r25	; 0x11
    5152:	88 8b       	std	Y+16, r24	; 0x10
    5154:	88 89       	ldd	r24, Y+16	; 0x10
    5156:	99 89       	ldd	r25, Y+17	; 0x11
    5158:	01 97       	sbiw	r24, 0x01	; 1
    515a:	f1 f7       	brne	.-4      	; 0x5158 <CLCD_voidInit+0x47c>
    515c:	99 8b       	std	Y+17, r25	; 0x11
    515e:	88 8b       	std	Y+16, r24	; 0x10
    5160:	0f c0       	rjmp	.+30     	; 0x5180 <CLCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5162:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5164:	78 a1       	ldd	r23, Y+32	; 0x20
    5166:	89 a1       	ldd	r24, Y+33	; 0x21
    5168:	9a a1       	ldd	r25, Y+34	; 0x22
    516a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    516e:	dc 01       	movw	r26, r24
    5170:	cb 01       	movw	r24, r22
    5172:	8e 8f       	std	Y+30, r24	; 0x1e
    5174:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5176:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5178:	8f 85       	ldd	r24, Y+15	; 0x0f
    517a:	8a 95       	dec	r24
    517c:	f1 f7       	brne	.-4      	; 0x517a <CLCD_voidInit+0x49e>
    517e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);

	//Display Clear
	CLCD_voidSendCommand(0x01);
    5180:	81 e0       	ldi	r24, 0x01	; 1
    5182:	0e 94 44 29 	call	0x5288	; 0x5288 <CLCD_voidSendCommand>
    5186:	80 e0       	ldi	r24, 0x00	; 0
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	a0 e0       	ldi	r26, 0x00	; 0
    518c:	b0 e4       	ldi	r27, 0x40	; 64
    518e:	8b 87       	std	Y+11, r24	; 0x0b
    5190:	9c 87       	std	Y+12, r25	; 0x0c
    5192:	ad 87       	std	Y+13, r26	; 0x0d
    5194:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5196:	6b 85       	ldd	r22, Y+11	; 0x0b
    5198:	7c 85       	ldd	r23, Y+12	; 0x0c
    519a:	8d 85       	ldd	r24, Y+13	; 0x0d
    519c:	9e 85       	ldd	r25, Y+14	; 0x0e
    519e:	20 e0       	ldi	r18, 0x00	; 0
    51a0:	30 e0       	ldi	r19, 0x00	; 0
    51a2:	4a ef       	ldi	r20, 0xFA	; 250
    51a4:	54 e4       	ldi	r21, 0x44	; 68
    51a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51aa:	dc 01       	movw	r26, r24
    51ac:	cb 01       	movw	r24, r22
    51ae:	8f 83       	std	Y+7, r24	; 0x07
    51b0:	98 87       	std	Y+8, r25	; 0x08
    51b2:	a9 87       	std	Y+9, r26	; 0x09
    51b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    51b6:	6f 81       	ldd	r22, Y+7	; 0x07
    51b8:	78 85       	ldd	r23, Y+8	; 0x08
    51ba:	89 85       	ldd	r24, Y+9	; 0x09
    51bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    51be:	20 e0       	ldi	r18, 0x00	; 0
    51c0:	30 e0       	ldi	r19, 0x00	; 0
    51c2:	40 e8       	ldi	r20, 0x80	; 128
    51c4:	5f e3       	ldi	r21, 0x3F	; 63
    51c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51ca:	88 23       	and	r24, r24
    51cc:	2c f4       	brge	.+10     	; 0x51d8 <CLCD_voidInit+0x4fc>
		__ticks = 1;
    51ce:	81 e0       	ldi	r24, 0x01	; 1
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	9e 83       	std	Y+6, r25	; 0x06
    51d4:	8d 83       	std	Y+5, r24	; 0x05
    51d6:	3f c0       	rjmp	.+126    	; 0x5256 <CLCD_voidInit+0x57a>
	else if (__tmp > 65535)
    51d8:	6f 81       	ldd	r22, Y+7	; 0x07
    51da:	78 85       	ldd	r23, Y+8	; 0x08
    51dc:	89 85       	ldd	r24, Y+9	; 0x09
    51de:	9a 85       	ldd	r25, Y+10	; 0x0a
    51e0:	20 e0       	ldi	r18, 0x00	; 0
    51e2:	3f ef       	ldi	r19, 0xFF	; 255
    51e4:	4f e7       	ldi	r20, 0x7F	; 127
    51e6:	57 e4       	ldi	r21, 0x47	; 71
    51e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51ec:	18 16       	cp	r1, r24
    51ee:	4c f5       	brge	.+82     	; 0x5242 <CLCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    51f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    51f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    51f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    51f8:	20 e0       	ldi	r18, 0x00	; 0
    51fa:	30 e0       	ldi	r19, 0x00	; 0
    51fc:	40 e2       	ldi	r20, 0x20	; 32
    51fe:	51 e4       	ldi	r21, 0x41	; 65
    5200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5204:	dc 01       	movw	r26, r24
    5206:	cb 01       	movw	r24, r22
    5208:	bc 01       	movw	r22, r24
    520a:	cd 01       	movw	r24, r26
    520c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5210:	dc 01       	movw	r26, r24
    5212:	cb 01       	movw	r24, r22
    5214:	9e 83       	std	Y+6, r25	; 0x06
    5216:	8d 83       	std	Y+5, r24	; 0x05
    5218:	0f c0       	rjmp	.+30     	; 0x5238 <CLCD_voidInit+0x55c>
    521a:	88 ec       	ldi	r24, 0xC8	; 200
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	9c 83       	std	Y+4, r25	; 0x04
    5220:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5222:	8b 81       	ldd	r24, Y+3	; 0x03
    5224:	9c 81       	ldd	r25, Y+4	; 0x04
    5226:	01 97       	sbiw	r24, 0x01	; 1
    5228:	f1 f7       	brne	.-4      	; 0x5226 <CLCD_voidInit+0x54a>
    522a:	9c 83       	std	Y+4, r25	; 0x04
    522c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    522e:	8d 81       	ldd	r24, Y+5	; 0x05
    5230:	9e 81       	ldd	r25, Y+6	; 0x06
    5232:	01 97       	sbiw	r24, 0x01	; 1
    5234:	9e 83       	std	Y+6, r25	; 0x06
    5236:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5238:	8d 81       	ldd	r24, Y+5	; 0x05
    523a:	9e 81       	ldd	r25, Y+6	; 0x06
    523c:	00 97       	sbiw	r24, 0x00	; 0
    523e:	69 f7       	brne	.-38     	; 0x521a <CLCD_voidInit+0x53e>
    5240:	14 c0       	rjmp	.+40     	; 0x526a <CLCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5242:	6f 81       	ldd	r22, Y+7	; 0x07
    5244:	78 85       	ldd	r23, Y+8	; 0x08
    5246:	89 85       	ldd	r24, Y+9	; 0x09
    5248:	9a 85       	ldd	r25, Y+10	; 0x0a
    524a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    524e:	dc 01       	movw	r26, r24
    5250:	cb 01       	movw	r24, r22
    5252:	9e 83       	std	Y+6, r25	; 0x06
    5254:	8d 83       	std	Y+5, r24	; 0x05
    5256:	8d 81       	ldd	r24, Y+5	; 0x05
    5258:	9e 81       	ldd	r25, Y+6	; 0x06
    525a:	9a 83       	std	Y+2, r25	; 0x02
    525c:	89 83       	std	Y+1, r24	; 0x01
    525e:	89 81       	ldd	r24, Y+1	; 0x01
    5260:	9a 81       	ldd	r25, Y+2	; 0x02
    5262:	01 97       	sbiw	r24, 0x01	; 1
    5264:	f1 f7       	brne	.-4      	; 0x5262 <CLCD_voidInit+0x586>
    5266:	9a 83       	std	Y+2, r25	; 0x02
    5268:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	//Entry Mode SET
	CLCD_voidSendCommand(0b00000110);
    526a:	86 e0       	ldi	r24, 0x06	; 6
    526c:	0e 94 44 29 	call	0x5288	; 0x5288 <CLCD_voidSendCommand>





}
    5270:	c4 5b       	subi	r28, 0xB4	; 180
    5272:	df 4f       	sbci	r29, 0xFF	; 255
    5274:	0f b6       	in	r0, 0x3f	; 63
    5276:	f8 94       	cli
    5278:	de bf       	out	0x3e, r29	; 62
    527a:	0f be       	out	0x3f, r0	; 63
    527c:	cd bf       	out	0x3d, r28	; 61
    527e:	cf 91       	pop	r28
    5280:	df 91       	pop	r29
    5282:	1f 91       	pop	r17
    5284:	0f 91       	pop	r16
    5286:	08 95       	ret

00005288 <CLCD_voidSendCommand>:
void CLCD_voidSendCommand (u8 Copy_u8Command)
{
    5288:	df 93       	push	r29
    528a:	cf 93       	push	r28
    528c:	cd b7       	in	r28, 0x3d	; 61
    528e:	de b7       	in	r29, 0x3e	; 62
    5290:	a7 97       	sbiw	r28, 0x27	; 39
    5292:	0f b6       	in	r0, 0x3f	; 63
    5294:	f8 94       	cli
    5296:	de bf       	out	0x3e, r29	; 62
    5298:	0f be       	out	0x3f, r0	; 63
    529a:	cd bf       	out	0x3d, r28	; 61
    529c:	8f a3       	std	Y+39, r24	; 0x27
	/*Rs ->LOW (To Send Command)*/
	DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS,DIO_LOW);
    529e:	83 e0       	ldi	r24, 0x03	; 3
    52a0:	67 e0       	ldi	r22, 0x07	; 7
    52a2:	40 e0       	ldi	r20, 0x00	; 0
    52a4:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>

	/*RW ->LOW (To Send Command)*/
		DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW,DIO_LOW);
    52a8:	83 e0       	ldi	r24, 0x03	; 3
    52aa:	66 e0       	ldi	r22, 0x06	; 6
    52ac:	40 e0       	ldi	r20, 0x00	; 0
    52ae:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>

	/*Send Command*/
		DIO_voidSetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    52b2:	82 e0       	ldi	r24, 0x02	; 2
    52b4:	6f a1       	ldd	r22, Y+39	; 0x27
    52b6:	0e 94 3c 11 	call	0x2278	; 0x2278 <DIO_voidSetPortValue>

	/*Enable Sequence*/

		DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_E,DIO_HIGH);
    52ba:	83 e0       	ldi	r24, 0x03	; 3
    52bc:	63 e0       	ldi	r22, 0x03	; 3
    52be:	41 e0       	ldi	r20, 0x01	; 1
    52c0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    52c4:	80 e0       	ldi	r24, 0x00	; 0
    52c6:	90 e0       	ldi	r25, 0x00	; 0
    52c8:	a0 e8       	ldi	r26, 0x80	; 128
    52ca:	bf e3       	ldi	r27, 0x3F	; 63
    52cc:	8b a3       	std	Y+35, r24	; 0x23
    52ce:	9c a3       	std	Y+36, r25	; 0x24
    52d0:	ad a3       	std	Y+37, r26	; 0x25
    52d2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    52d4:	6b a1       	ldd	r22, Y+35	; 0x23
    52d6:	7c a1       	ldd	r23, Y+36	; 0x24
    52d8:	8d a1       	ldd	r24, Y+37	; 0x25
    52da:	9e a1       	ldd	r25, Y+38	; 0x26
    52dc:	2b ea       	ldi	r18, 0xAB	; 171
    52de:	3a ea       	ldi	r19, 0xAA	; 170
    52e0:	4a e2       	ldi	r20, 0x2A	; 42
    52e2:	50 e4       	ldi	r21, 0x40	; 64
    52e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52e8:	dc 01       	movw	r26, r24
    52ea:	cb 01       	movw	r24, r22
    52ec:	8f 8f       	std	Y+31, r24	; 0x1f
    52ee:	98 a3       	std	Y+32, r25	; 0x20
    52f0:	a9 a3       	std	Y+33, r26	; 0x21
    52f2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    52f4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    52f6:	78 a1       	ldd	r23, Y+32	; 0x20
    52f8:	89 a1       	ldd	r24, Y+33	; 0x21
    52fa:	9a a1       	ldd	r25, Y+34	; 0x22
    52fc:	20 e0       	ldi	r18, 0x00	; 0
    52fe:	30 e0       	ldi	r19, 0x00	; 0
    5300:	40 e8       	ldi	r20, 0x80	; 128
    5302:	5f e3       	ldi	r21, 0x3F	; 63
    5304:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5308:	88 23       	and	r24, r24
    530a:	1c f4       	brge	.+6      	; 0x5312 <CLCD_voidSendCommand+0x8a>
		__ticks = 1;
    530c:	81 e0       	ldi	r24, 0x01	; 1
    530e:	8e 8f       	std	Y+30, r24	; 0x1e
    5310:	91 c0       	rjmp	.+290    	; 0x5434 <CLCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    5312:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5314:	78 a1       	ldd	r23, Y+32	; 0x20
    5316:	89 a1       	ldd	r24, Y+33	; 0x21
    5318:	9a a1       	ldd	r25, Y+34	; 0x22
    531a:	20 e0       	ldi	r18, 0x00	; 0
    531c:	30 e0       	ldi	r19, 0x00	; 0
    531e:	4f e7       	ldi	r20, 0x7F	; 127
    5320:	53 e4       	ldi	r21, 0x43	; 67
    5322:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5326:	18 16       	cp	r1, r24
    5328:	0c f0       	brlt	.+2      	; 0x532c <CLCD_voidSendCommand+0xa4>
    532a:	7b c0       	rjmp	.+246    	; 0x5422 <CLCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    532c:	6b a1       	ldd	r22, Y+35	; 0x23
    532e:	7c a1       	ldd	r23, Y+36	; 0x24
    5330:	8d a1       	ldd	r24, Y+37	; 0x25
    5332:	9e a1       	ldd	r25, Y+38	; 0x26
    5334:	20 e0       	ldi	r18, 0x00	; 0
    5336:	30 e0       	ldi	r19, 0x00	; 0
    5338:	4a e7       	ldi	r20, 0x7A	; 122
    533a:	54 e4       	ldi	r21, 0x44	; 68
    533c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5340:	dc 01       	movw	r26, r24
    5342:	cb 01       	movw	r24, r22
    5344:	8a 8f       	std	Y+26, r24	; 0x1a
    5346:	9b 8f       	std	Y+27, r25	; 0x1b
    5348:	ac 8f       	std	Y+28, r26	; 0x1c
    534a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    534c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    534e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5350:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5352:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5354:	20 e0       	ldi	r18, 0x00	; 0
    5356:	30 e0       	ldi	r19, 0x00	; 0
    5358:	4a ef       	ldi	r20, 0xFA	; 250
    535a:	54 e4       	ldi	r21, 0x44	; 68
    535c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5360:	dc 01       	movw	r26, r24
    5362:	cb 01       	movw	r24, r22
    5364:	8e 8b       	std	Y+22, r24	; 0x16
    5366:	9f 8b       	std	Y+23, r25	; 0x17
    5368:	a8 8f       	std	Y+24, r26	; 0x18
    536a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    536c:	6e 89       	ldd	r22, Y+22	; 0x16
    536e:	7f 89       	ldd	r23, Y+23	; 0x17
    5370:	88 8d       	ldd	r24, Y+24	; 0x18
    5372:	99 8d       	ldd	r25, Y+25	; 0x19
    5374:	20 e0       	ldi	r18, 0x00	; 0
    5376:	30 e0       	ldi	r19, 0x00	; 0
    5378:	40 e8       	ldi	r20, 0x80	; 128
    537a:	5f e3       	ldi	r21, 0x3F	; 63
    537c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5380:	88 23       	and	r24, r24
    5382:	2c f4       	brge	.+10     	; 0x538e <CLCD_voidSendCommand+0x106>
		__ticks = 1;
    5384:	81 e0       	ldi	r24, 0x01	; 1
    5386:	90 e0       	ldi	r25, 0x00	; 0
    5388:	9d 8b       	std	Y+21, r25	; 0x15
    538a:	8c 8b       	std	Y+20, r24	; 0x14
    538c:	3f c0       	rjmp	.+126    	; 0x540c <CLCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    538e:	6e 89       	ldd	r22, Y+22	; 0x16
    5390:	7f 89       	ldd	r23, Y+23	; 0x17
    5392:	88 8d       	ldd	r24, Y+24	; 0x18
    5394:	99 8d       	ldd	r25, Y+25	; 0x19
    5396:	20 e0       	ldi	r18, 0x00	; 0
    5398:	3f ef       	ldi	r19, 0xFF	; 255
    539a:	4f e7       	ldi	r20, 0x7F	; 127
    539c:	57 e4       	ldi	r21, 0x47	; 71
    539e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53a2:	18 16       	cp	r1, r24
    53a4:	4c f5       	brge	.+82     	; 0x53f8 <CLCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53a6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    53a8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    53aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    53ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    53ae:	20 e0       	ldi	r18, 0x00	; 0
    53b0:	30 e0       	ldi	r19, 0x00	; 0
    53b2:	40 e2       	ldi	r20, 0x20	; 32
    53b4:	51 e4       	ldi	r21, 0x41	; 65
    53b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53ba:	dc 01       	movw	r26, r24
    53bc:	cb 01       	movw	r24, r22
    53be:	bc 01       	movw	r22, r24
    53c0:	cd 01       	movw	r24, r26
    53c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53c6:	dc 01       	movw	r26, r24
    53c8:	cb 01       	movw	r24, r22
    53ca:	9d 8b       	std	Y+21, r25	; 0x15
    53cc:	8c 8b       	std	Y+20, r24	; 0x14
    53ce:	0f c0       	rjmp	.+30     	; 0x53ee <CLCD_voidSendCommand+0x166>
    53d0:	88 ec       	ldi	r24, 0xC8	; 200
    53d2:	90 e0       	ldi	r25, 0x00	; 0
    53d4:	9b 8b       	std	Y+19, r25	; 0x13
    53d6:	8a 8b       	std	Y+18, r24	; 0x12
    53d8:	8a 89       	ldd	r24, Y+18	; 0x12
    53da:	9b 89       	ldd	r25, Y+19	; 0x13
    53dc:	01 97       	sbiw	r24, 0x01	; 1
    53de:	f1 f7       	brne	.-4      	; 0x53dc <CLCD_voidSendCommand+0x154>
    53e0:	9b 8b       	std	Y+19, r25	; 0x13
    53e2:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53e4:	8c 89       	ldd	r24, Y+20	; 0x14
    53e6:	9d 89       	ldd	r25, Y+21	; 0x15
    53e8:	01 97       	sbiw	r24, 0x01	; 1
    53ea:	9d 8b       	std	Y+21, r25	; 0x15
    53ec:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53ee:	8c 89       	ldd	r24, Y+20	; 0x14
    53f0:	9d 89       	ldd	r25, Y+21	; 0x15
    53f2:	00 97       	sbiw	r24, 0x00	; 0
    53f4:	69 f7       	brne	.-38     	; 0x53d0 <CLCD_voidSendCommand+0x148>
    53f6:	24 c0       	rjmp	.+72     	; 0x5440 <CLCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53f8:	6e 89       	ldd	r22, Y+22	; 0x16
    53fa:	7f 89       	ldd	r23, Y+23	; 0x17
    53fc:	88 8d       	ldd	r24, Y+24	; 0x18
    53fe:	99 8d       	ldd	r25, Y+25	; 0x19
    5400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5404:	dc 01       	movw	r26, r24
    5406:	cb 01       	movw	r24, r22
    5408:	9d 8b       	std	Y+21, r25	; 0x15
    540a:	8c 8b       	std	Y+20, r24	; 0x14
    540c:	8c 89       	ldd	r24, Y+20	; 0x14
    540e:	9d 89       	ldd	r25, Y+21	; 0x15
    5410:	99 8b       	std	Y+17, r25	; 0x11
    5412:	88 8b       	std	Y+16, r24	; 0x10
    5414:	88 89       	ldd	r24, Y+16	; 0x10
    5416:	99 89       	ldd	r25, Y+17	; 0x11
    5418:	01 97       	sbiw	r24, 0x01	; 1
    541a:	f1 f7       	brne	.-4      	; 0x5418 <CLCD_voidSendCommand+0x190>
    541c:	99 8b       	std	Y+17, r25	; 0x11
    541e:	88 8b       	std	Y+16, r24	; 0x10
    5420:	0f c0       	rjmp	.+30     	; 0x5440 <CLCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5422:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5424:	78 a1       	ldd	r23, Y+32	; 0x20
    5426:	89 a1       	ldd	r24, Y+33	; 0x21
    5428:	9a a1       	ldd	r25, Y+34	; 0x22
    542a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    542e:	dc 01       	movw	r26, r24
    5430:	cb 01       	movw	r24, r22
    5432:	8e 8f       	std	Y+30, r24	; 0x1e
    5434:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5436:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5438:	8f 85       	ldd	r24, Y+15	; 0x0f
    543a:	8a 95       	dec	r24
    543c:	f1 f7       	brne	.-4      	; 0x543a <CLCD_voidSendCommand+0x1b2>
    543e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(1);
		DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_E,DIO_LOW);
    5440:	83 e0       	ldi	r24, 0x03	; 3
    5442:	63 e0       	ldi	r22, 0x03	; 3
    5444:	40 e0       	ldi	r20, 0x00	; 0
    5446:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    544a:	80 e0       	ldi	r24, 0x00	; 0
    544c:	90 e0       	ldi	r25, 0x00	; 0
    544e:	a0 e2       	ldi	r26, 0x20	; 32
    5450:	b1 e4       	ldi	r27, 0x41	; 65
    5452:	8b 87       	std	Y+11, r24	; 0x0b
    5454:	9c 87       	std	Y+12, r25	; 0x0c
    5456:	ad 87       	std	Y+13, r26	; 0x0d
    5458:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    545a:	6b 85       	ldd	r22, Y+11	; 0x0b
    545c:	7c 85       	ldd	r23, Y+12	; 0x0c
    545e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5460:	9e 85       	ldd	r25, Y+14	; 0x0e
    5462:	20 e0       	ldi	r18, 0x00	; 0
    5464:	30 e0       	ldi	r19, 0x00	; 0
    5466:	4a ef       	ldi	r20, 0xFA	; 250
    5468:	54 e4       	ldi	r21, 0x44	; 68
    546a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    546e:	dc 01       	movw	r26, r24
    5470:	cb 01       	movw	r24, r22
    5472:	8f 83       	std	Y+7, r24	; 0x07
    5474:	98 87       	std	Y+8, r25	; 0x08
    5476:	a9 87       	std	Y+9, r26	; 0x09
    5478:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    547a:	6f 81       	ldd	r22, Y+7	; 0x07
    547c:	78 85       	ldd	r23, Y+8	; 0x08
    547e:	89 85       	ldd	r24, Y+9	; 0x09
    5480:	9a 85       	ldd	r25, Y+10	; 0x0a
    5482:	20 e0       	ldi	r18, 0x00	; 0
    5484:	30 e0       	ldi	r19, 0x00	; 0
    5486:	40 e8       	ldi	r20, 0x80	; 128
    5488:	5f e3       	ldi	r21, 0x3F	; 63
    548a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    548e:	88 23       	and	r24, r24
    5490:	2c f4       	brge	.+10     	; 0x549c <CLCD_voidSendCommand+0x214>
		__ticks = 1;
    5492:	81 e0       	ldi	r24, 0x01	; 1
    5494:	90 e0       	ldi	r25, 0x00	; 0
    5496:	9e 83       	std	Y+6, r25	; 0x06
    5498:	8d 83       	std	Y+5, r24	; 0x05
    549a:	3f c0       	rjmp	.+126    	; 0x551a <CLCD_voidSendCommand+0x292>
	else if (__tmp > 65535)
    549c:	6f 81       	ldd	r22, Y+7	; 0x07
    549e:	78 85       	ldd	r23, Y+8	; 0x08
    54a0:	89 85       	ldd	r24, Y+9	; 0x09
    54a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    54a4:	20 e0       	ldi	r18, 0x00	; 0
    54a6:	3f ef       	ldi	r19, 0xFF	; 255
    54a8:	4f e7       	ldi	r20, 0x7F	; 127
    54aa:	57 e4       	ldi	r21, 0x47	; 71
    54ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54b0:	18 16       	cp	r1, r24
    54b2:	4c f5       	brge	.+82     	; 0x5506 <CLCD_voidSendCommand+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    54b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    54b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    54ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    54bc:	20 e0       	ldi	r18, 0x00	; 0
    54be:	30 e0       	ldi	r19, 0x00	; 0
    54c0:	40 e2       	ldi	r20, 0x20	; 32
    54c2:	51 e4       	ldi	r21, 0x41	; 65
    54c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54c8:	dc 01       	movw	r26, r24
    54ca:	cb 01       	movw	r24, r22
    54cc:	bc 01       	movw	r22, r24
    54ce:	cd 01       	movw	r24, r26
    54d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54d4:	dc 01       	movw	r26, r24
    54d6:	cb 01       	movw	r24, r22
    54d8:	9e 83       	std	Y+6, r25	; 0x06
    54da:	8d 83       	std	Y+5, r24	; 0x05
    54dc:	0f c0       	rjmp	.+30     	; 0x54fc <CLCD_voidSendCommand+0x274>
    54de:	88 ec       	ldi	r24, 0xC8	; 200
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	9c 83       	std	Y+4, r25	; 0x04
    54e4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    54e6:	8b 81       	ldd	r24, Y+3	; 0x03
    54e8:	9c 81       	ldd	r25, Y+4	; 0x04
    54ea:	01 97       	sbiw	r24, 0x01	; 1
    54ec:	f1 f7       	brne	.-4      	; 0x54ea <CLCD_voidSendCommand+0x262>
    54ee:	9c 83       	std	Y+4, r25	; 0x04
    54f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54f2:	8d 81       	ldd	r24, Y+5	; 0x05
    54f4:	9e 81       	ldd	r25, Y+6	; 0x06
    54f6:	01 97       	sbiw	r24, 0x01	; 1
    54f8:	9e 83       	std	Y+6, r25	; 0x06
    54fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54fc:	8d 81       	ldd	r24, Y+5	; 0x05
    54fe:	9e 81       	ldd	r25, Y+6	; 0x06
    5500:	00 97       	sbiw	r24, 0x00	; 0
    5502:	69 f7       	brne	.-38     	; 0x54de <CLCD_voidSendCommand+0x256>
    5504:	14 c0       	rjmp	.+40     	; 0x552e <CLCD_voidSendCommand+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5506:	6f 81       	ldd	r22, Y+7	; 0x07
    5508:	78 85       	ldd	r23, Y+8	; 0x08
    550a:	89 85       	ldd	r24, Y+9	; 0x09
    550c:	9a 85       	ldd	r25, Y+10	; 0x0a
    550e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5512:	dc 01       	movw	r26, r24
    5514:	cb 01       	movw	r24, r22
    5516:	9e 83       	std	Y+6, r25	; 0x06
    5518:	8d 83       	std	Y+5, r24	; 0x05
    551a:	8d 81       	ldd	r24, Y+5	; 0x05
    551c:	9e 81       	ldd	r25, Y+6	; 0x06
    551e:	9a 83       	std	Y+2, r25	; 0x02
    5520:	89 83       	std	Y+1, r24	; 0x01
    5522:	89 81       	ldd	r24, Y+1	; 0x01
    5524:	9a 81       	ldd	r25, Y+2	; 0x02
    5526:	01 97       	sbiw	r24, 0x01	; 1
    5528:	f1 f7       	brne	.-4      	; 0x5526 <CLCD_voidSendCommand+0x29e>
    552a:	9a 83       	std	Y+2, r25	; 0x02
    552c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
}
    552e:	a7 96       	adiw	r28, 0x27	; 39
    5530:	0f b6       	in	r0, 0x3f	; 63
    5532:	f8 94       	cli
    5534:	de bf       	out	0x3e, r29	; 62
    5536:	0f be       	out	0x3f, r0	; 63
    5538:	cd bf       	out	0x3d, r28	; 61
    553a:	cf 91       	pop	r28
    553c:	df 91       	pop	r29
    553e:	08 95       	ret

00005540 <CLCD_voidSendData>:
void CLCD_voidSendData (u8 Copy_u8Data)
{
    5540:	df 93       	push	r29
    5542:	cf 93       	push	r28
    5544:	cd b7       	in	r28, 0x3d	; 61
    5546:	de b7       	in	r29, 0x3e	; 62
    5548:	a7 97       	sbiw	r28, 0x27	; 39
    554a:	0f b6       	in	r0, 0x3f	; 63
    554c:	f8 94       	cli
    554e:	de bf       	out	0x3e, r29	; 62
    5550:	0f be       	out	0x3f, r0	; 63
    5552:	cd bf       	out	0x3d, r28	; 61
    5554:	8f a3       	std	Y+39, r24	; 0x27

	/*Rs ->HIGH (To Send DATA)*/
	DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS,DIO_HIGH);
    5556:	83 e0       	ldi	r24, 0x03	; 3
    5558:	67 e0       	ldi	r22, 0x07	; 7
    555a:	41 e0       	ldi	r20, 0x01	; 1
    555c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>

	/*RW ->LOW (To Send Command)*/
		DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW,DIO_LOW);
    5560:	83 e0       	ldi	r24, 0x03	; 3
    5562:	66 e0       	ldi	r22, 0x06	; 6
    5564:	40 e0       	ldi	r20, 0x00	; 0
    5566:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>

	/*Send Command*/
		DIO_voidSetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    556a:	82 e0       	ldi	r24, 0x02	; 2
    556c:	6f a1       	ldd	r22, Y+39	; 0x27
    556e:	0e 94 3c 11 	call	0x2278	; 0x2278 <DIO_voidSetPortValue>

	/*Enable Sequence*/

		DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_E,DIO_HIGH);
    5572:	83 e0       	ldi	r24, 0x03	; 3
    5574:	63 e0       	ldi	r22, 0x03	; 3
    5576:	41 e0       	ldi	r20, 0x01	; 1
    5578:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    557c:	80 e0       	ldi	r24, 0x00	; 0
    557e:	90 e0       	ldi	r25, 0x00	; 0
    5580:	a0 e8       	ldi	r26, 0x80	; 128
    5582:	bf e3       	ldi	r27, 0x3F	; 63
    5584:	8b a3       	std	Y+35, r24	; 0x23
    5586:	9c a3       	std	Y+36, r25	; 0x24
    5588:	ad a3       	std	Y+37, r26	; 0x25
    558a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    558c:	6b a1       	ldd	r22, Y+35	; 0x23
    558e:	7c a1       	ldd	r23, Y+36	; 0x24
    5590:	8d a1       	ldd	r24, Y+37	; 0x25
    5592:	9e a1       	ldd	r25, Y+38	; 0x26
    5594:	2b ea       	ldi	r18, 0xAB	; 171
    5596:	3a ea       	ldi	r19, 0xAA	; 170
    5598:	4a e2       	ldi	r20, 0x2A	; 42
    559a:	50 e4       	ldi	r21, 0x40	; 64
    559c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55a0:	dc 01       	movw	r26, r24
    55a2:	cb 01       	movw	r24, r22
    55a4:	8f 8f       	std	Y+31, r24	; 0x1f
    55a6:	98 a3       	std	Y+32, r25	; 0x20
    55a8:	a9 a3       	std	Y+33, r26	; 0x21
    55aa:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    55ac:	6f 8d       	ldd	r22, Y+31	; 0x1f
    55ae:	78 a1       	ldd	r23, Y+32	; 0x20
    55b0:	89 a1       	ldd	r24, Y+33	; 0x21
    55b2:	9a a1       	ldd	r25, Y+34	; 0x22
    55b4:	20 e0       	ldi	r18, 0x00	; 0
    55b6:	30 e0       	ldi	r19, 0x00	; 0
    55b8:	40 e8       	ldi	r20, 0x80	; 128
    55ba:	5f e3       	ldi	r21, 0x3F	; 63
    55bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55c0:	88 23       	and	r24, r24
    55c2:	1c f4       	brge	.+6      	; 0x55ca <CLCD_voidSendData+0x8a>
		__ticks = 1;
    55c4:	81 e0       	ldi	r24, 0x01	; 1
    55c6:	8e 8f       	std	Y+30, r24	; 0x1e
    55c8:	91 c0       	rjmp	.+290    	; 0x56ec <CLCD_voidSendData+0x1ac>
	else if (__tmp > 255)
    55ca:	6f 8d       	ldd	r22, Y+31	; 0x1f
    55cc:	78 a1       	ldd	r23, Y+32	; 0x20
    55ce:	89 a1       	ldd	r24, Y+33	; 0x21
    55d0:	9a a1       	ldd	r25, Y+34	; 0x22
    55d2:	20 e0       	ldi	r18, 0x00	; 0
    55d4:	30 e0       	ldi	r19, 0x00	; 0
    55d6:	4f e7       	ldi	r20, 0x7F	; 127
    55d8:	53 e4       	ldi	r21, 0x43	; 67
    55da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55de:	18 16       	cp	r1, r24
    55e0:	0c f0       	brlt	.+2      	; 0x55e4 <CLCD_voidSendData+0xa4>
    55e2:	7b c0       	rjmp	.+246    	; 0x56da <CLCD_voidSendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    55e4:	6b a1       	ldd	r22, Y+35	; 0x23
    55e6:	7c a1       	ldd	r23, Y+36	; 0x24
    55e8:	8d a1       	ldd	r24, Y+37	; 0x25
    55ea:	9e a1       	ldd	r25, Y+38	; 0x26
    55ec:	20 e0       	ldi	r18, 0x00	; 0
    55ee:	30 e0       	ldi	r19, 0x00	; 0
    55f0:	4a e7       	ldi	r20, 0x7A	; 122
    55f2:	54 e4       	ldi	r21, 0x44	; 68
    55f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    55f8:	dc 01       	movw	r26, r24
    55fa:	cb 01       	movw	r24, r22
    55fc:	8a 8f       	std	Y+26, r24	; 0x1a
    55fe:	9b 8f       	std	Y+27, r25	; 0x1b
    5600:	ac 8f       	std	Y+28, r26	; 0x1c
    5602:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5604:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5606:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5608:	8c 8d       	ldd	r24, Y+28	; 0x1c
    560a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    560c:	20 e0       	ldi	r18, 0x00	; 0
    560e:	30 e0       	ldi	r19, 0x00	; 0
    5610:	4a ef       	ldi	r20, 0xFA	; 250
    5612:	54 e4       	ldi	r21, 0x44	; 68
    5614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5618:	dc 01       	movw	r26, r24
    561a:	cb 01       	movw	r24, r22
    561c:	8e 8b       	std	Y+22, r24	; 0x16
    561e:	9f 8b       	std	Y+23, r25	; 0x17
    5620:	a8 8f       	std	Y+24, r26	; 0x18
    5622:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    5624:	6e 89       	ldd	r22, Y+22	; 0x16
    5626:	7f 89       	ldd	r23, Y+23	; 0x17
    5628:	88 8d       	ldd	r24, Y+24	; 0x18
    562a:	99 8d       	ldd	r25, Y+25	; 0x19
    562c:	20 e0       	ldi	r18, 0x00	; 0
    562e:	30 e0       	ldi	r19, 0x00	; 0
    5630:	40 e8       	ldi	r20, 0x80	; 128
    5632:	5f e3       	ldi	r21, 0x3F	; 63
    5634:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5638:	88 23       	and	r24, r24
    563a:	2c f4       	brge	.+10     	; 0x5646 <CLCD_voidSendData+0x106>
		__ticks = 1;
    563c:	81 e0       	ldi	r24, 0x01	; 1
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	9d 8b       	std	Y+21, r25	; 0x15
    5642:	8c 8b       	std	Y+20, r24	; 0x14
    5644:	3f c0       	rjmp	.+126    	; 0x56c4 <CLCD_voidSendData+0x184>
	else if (__tmp > 65535)
    5646:	6e 89       	ldd	r22, Y+22	; 0x16
    5648:	7f 89       	ldd	r23, Y+23	; 0x17
    564a:	88 8d       	ldd	r24, Y+24	; 0x18
    564c:	99 8d       	ldd	r25, Y+25	; 0x19
    564e:	20 e0       	ldi	r18, 0x00	; 0
    5650:	3f ef       	ldi	r19, 0xFF	; 255
    5652:	4f e7       	ldi	r20, 0x7F	; 127
    5654:	57 e4       	ldi	r21, 0x47	; 71
    5656:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    565a:	18 16       	cp	r1, r24
    565c:	4c f5       	brge	.+82     	; 0x56b0 <CLCD_voidSendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    565e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5660:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5662:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5664:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5666:	20 e0       	ldi	r18, 0x00	; 0
    5668:	30 e0       	ldi	r19, 0x00	; 0
    566a:	40 e2       	ldi	r20, 0x20	; 32
    566c:	51 e4       	ldi	r21, 0x41	; 65
    566e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5672:	dc 01       	movw	r26, r24
    5674:	cb 01       	movw	r24, r22
    5676:	bc 01       	movw	r22, r24
    5678:	cd 01       	movw	r24, r26
    567a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    567e:	dc 01       	movw	r26, r24
    5680:	cb 01       	movw	r24, r22
    5682:	9d 8b       	std	Y+21, r25	; 0x15
    5684:	8c 8b       	std	Y+20, r24	; 0x14
    5686:	0f c0       	rjmp	.+30     	; 0x56a6 <CLCD_voidSendData+0x166>
    5688:	88 ec       	ldi	r24, 0xC8	; 200
    568a:	90 e0       	ldi	r25, 0x00	; 0
    568c:	9b 8b       	std	Y+19, r25	; 0x13
    568e:	8a 8b       	std	Y+18, r24	; 0x12
    5690:	8a 89       	ldd	r24, Y+18	; 0x12
    5692:	9b 89       	ldd	r25, Y+19	; 0x13
    5694:	01 97       	sbiw	r24, 0x01	; 1
    5696:	f1 f7       	brne	.-4      	; 0x5694 <CLCD_voidSendData+0x154>
    5698:	9b 8b       	std	Y+19, r25	; 0x13
    569a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    569c:	8c 89       	ldd	r24, Y+20	; 0x14
    569e:	9d 89       	ldd	r25, Y+21	; 0x15
    56a0:	01 97       	sbiw	r24, 0x01	; 1
    56a2:	9d 8b       	std	Y+21, r25	; 0x15
    56a4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56a6:	8c 89       	ldd	r24, Y+20	; 0x14
    56a8:	9d 89       	ldd	r25, Y+21	; 0x15
    56aa:	00 97       	sbiw	r24, 0x00	; 0
    56ac:	69 f7       	brne	.-38     	; 0x5688 <CLCD_voidSendData+0x148>
    56ae:	24 c0       	rjmp	.+72     	; 0x56f8 <CLCD_voidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56b0:	6e 89       	ldd	r22, Y+22	; 0x16
    56b2:	7f 89       	ldd	r23, Y+23	; 0x17
    56b4:	88 8d       	ldd	r24, Y+24	; 0x18
    56b6:	99 8d       	ldd	r25, Y+25	; 0x19
    56b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56bc:	dc 01       	movw	r26, r24
    56be:	cb 01       	movw	r24, r22
    56c0:	9d 8b       	std	Y+21, r25	; 0x15
    56c2:	8c 8b       	std	Y+20, r24	; 0x14
    56c4:	8c 89       	ldd	r24, Y+20	; 0x14
    56c6:	9d 89       	ldd	r25, Y+21	; 0x15
    56c8:	99 8b       	std	Y+17, r25	; 0x11
    56ca:	88 8b       	std	Y+16, r24	; 0x10
    56cc:	88 89       	ldd	r24, Y+16	; 0x10
    56ce:	99 89       	ldd	r25, Y+17	; 0x11
    56d0:	01 97       	sbiw	r24, 0x01	; 1
    56d2:	f1 f7       	brne	.-4      	; 0x56d0 <CLCD_voidSendData+0x190>
    56d4:	99 8b       	std	Y+17, r25	; 0x11
    56d6:	88 8b       	std	Y+16, r24	; 0x10
    56d8:	0f c0       	rjmp	.+30     	; 0x56f8 <CLCD_voidSendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    56da:	6f 8d       	ldd	r22, Y+31	; 0x1f
    56dc:	78 a1       	ldd	r23, Y+32	; 0x20
    56de:	89 a1       	ldd	r24, Y+33	; 0x21
    56e0:	9a a1       	ldd	r25, Y+34	; 0x22
    56e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56e6:	dc 01       	movw	r26, r24
    56e8:	cb 01       	movw	r24, r22
    56ea:	8e 8f       	std	Y+30, r24	; 0x1e
    56ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    56ee:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    56f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    56f2:	8a 95       	dec	r24
    56f4:	f1 f7       	brne	.-4      	; 0x56f2 <CLCD_voidSendData+0x1b2>
    56f6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(1);
		DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_E,DIO_LOW);
    56f8:	83 e0       	ldi	r24, 0x03	; 3
    56fa:	63 e0       	ldi	r22, 0x03	; 3
    56fc:	40 e0       	ldi	r20, 0x00	; 0
    56fe:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    5702:	80 e0       	ldi	r24, 0x00	; 0
    5704:	90 e0       	ldi	r25, 0x00	; 0
    5706:	a0 e2       	ldi	r26, 0x20	; 32
    5708:	b1 e4       	ldi	r27, 0x41	; 65
    570a:	8b 87       	std	Y+11, r24	; 0x0b
    570c:	9c 87       	std	Y+12, r25	; 0x0c
    570e:	ad 87       	std	Y+13, r26	; 0x0d
    5710:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5712:	6b 85       	ldd	r22, Y+11	; 0x0b
    5714:	7c 85       	ldd	r23, Y+12	; 0x0c
    5716:	8d 85       	ldd	r24, Y+13	; 0x0d
    5718:	9e 85       	ldd	r25, Y+14	; 0x0e
    571a:	20 e0       	ldi	r18, 0x00	; 0
    571c:	30 e0       	ldi	r19, 0x00	; 0
    571e:	4a ef       	ldi	r20, 0xFA	; 250
    5720:	54 e4       	ldi	r21, 0x44	; 68
    5722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5726:	dc 01       	movw	r26, r24
    5728:	cb 01       	movw	r24, r22
    572a:	8f 83       	std	Y+7, r24	; 0x07
    572c:	98 87       	std	Y+8, r25	; 0x08
    572e:	a9 87       	std	Y+9, r26	; 0x09
    5730:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5732:	6f 81       	ldd	r22, Y+7	; 0x07
    5734:	78 85       	ldd	r23, Y+8	; 0x08
    5736:	89 85       	ldd	r24, Y+9	; 0x09
    5738:	9a 85       	ldd	r25, Y+10	; 0x0a
    573a:	20 e0       	ldi	r18, 0x00	; 0
    573c:	30 e0       	ldi	r19, 0x00	; 0
    573e:	40 e8       	ldi	r20, 0x80	; 128
    5740:	5f e3       	ldi	r21, 0x3F	; 63
    5742:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5746:	88 23       	and	r24, r24
    5748:	2c f4       	brge	.+10     	; 0x5754 <CLCD_voidSendData+0x214>
		__ticks = 1;
    574a:	81 e0       	ldi	r24, 0x01	; 1
    574c:	90 e0       	ldi	r25, 0x00	; 0
    574e:	9e 83       	std	Y+6, r25	; 0x06
    5750:	8d 83       	std	Y+5, r24	; 0x05
    5752:	3f c0       	rjmp	.+126    	; 0x57d2 <CLCD_voidSendData+0x292>
	else if (__tmp > 65535)
    5754:	6f 81       	ldd	r22, Y+7	; 0x07
    5756:	78 85       	ldd	r23, Y+8	; 0x08
    5758:	89 85       	ldd	r24, Y+9	; 0x09
    575a:	9a 85       	ldd	r25, Y+10	; 0x0a
    575c:	20 e0       	ldi	r18, 0x00	; 0
    575e:	3f ef       	ldi	r19, 0xFF	; 255
    5760:	4f e7       	ldi	r20, 0x7F	; 127
    5762:	57 e4       	ldi	r21, 0x47	; 71
    5764:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5768:	18 16       	cp	r1, r24
    576a:	4c f5       	brge	.+82     	; 0x57be <CLCD_voidSendData+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    576c:	6b 85       	ldd	r22, Y+11	; 0x0b
    576e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5770:	8d 85       	ldd	r24, Y+13	; 0x0d
    5772:	9e 85       	ldd	r25, Y+14	; 0x0e
    5774:	20 e0       	ldi	r18, 0x00	; 0
    5776:	30 e0       	ldi	r19, 0x00	; 0
    5778:	40 e2       	ldi	r20, 0x20	; 32
    577a:	51 e4       	ldi	r21, 0x41	; 65
    577c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5780:	dc 01       	movw	r26, r24
    5782:	cb 01       	movw	r24, r22
    5784:	bc 01       	movw	r22, r24
    5786:	cd 01       	movw	r24, r26
    5788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    578c:	dc 01       	movw	r26, r24
    578e:	cb 01       	movw	r24, r22
    5790:	9e 83       	std	Y+6, r25	; 0x06
    5792:	8d 83       	std	Y+5, r24	; 0x05
    5794:	0f c0       	rjmp	.+30     	; 0x57b4 <CLCD_voidSendData+0x274>
    5796:	88 ec       	ldi	r24, 0xC8	; 200
    5798:	90 e0       	ldi	r25, 0x00	; 0
    579a:	9c 83       	std	Y+4, r25	; 0x04
    579c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    579e:	8b 81       	ldd	r24, Y+3	; 0x03
    57a0:	9c 81       	ldd	r25, Y+4	; 0x04
    57a2:	01 97       	sbiw	r24, 0x01	; 1
    57a4:	f1 f7       	brne	.-4      	; 0x57a2 <CLCD_voidSendData+0x262>
    57a6:	9c 83       	std	Y+4, r25	; 0x04
    57a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57aa:	8d 81       	ldd	r24, Y+5	; 0x05
    57ac:	9e 81       	ldd	r25, Y+6	; 0x06
    57ae:	01 97       	sbiw	r24, 0x01	; 1
    57b0:	9e 83       	std	Y+6, r25	; 0x06
    57b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57b4:	8d 81       	ldd	r24, Y+5	; 0x05
    57b6:	9e 81       	ldd	r25, Y+6	; 0x06
    57b8:	00 97       	sbiw	r24, 0x00	; 0
    57ba:	69 f7       	brne	.-38     	; 0x5796 <CLCD_voidSendData+0x256>
    57bc:	14 c0       	rjmp	.+40     	; 0x57e6 <CLCD_voidSendData+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57be:	6f 81       	ldd	r22, Y+7	; 0x07
    57c0:	78 85       	ldd	r23, Y+8	; 0x08
    57c2:	89 85       	ldd	r24, Y+9	; 0x09
    57c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    57c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57ca:	dc 01       	movw	r26, r24
    57cc:	cb 01       	movw	r24, r22
    57ce:	9e 83       	std	Y+6, r25	; 0x06
    57d0:	8d 83       	std	Y+5, r24	; 0x05
    57d2:	8d 81       	ldd	r24, Y+5	; 0x05
    57d4:	9e 81       	ldd	r25, Y+6	; 0x06
    57d6:	9a 83       	std	Y+2, r25	; 0x02
    57d8:	89 83       	std	Y+1, r24	; 0x01
    57da:	89 81       	ldd	r24, Y+1	; 0x01
    57dc:	9a 81       	ldd	r25, Y+2	; 0x02
    57de:	01 97       	sbiw	r24, 0x01	; 1
    57e0:	f1 f7       	brne	.-4      	; 0x57de <CLCD_voidSendData+0x29e>
    57e2:	9a 83       	std	Y+2, r25	; 0x02
    57e4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);

}
    57e6:	a7 96       	adiw	r28, 0x27	; 39
    57e8:	0f b6       	in	r0, 0x3f	; 63
    57ea:	f8 94       	cli
    57ec:	de bf       	out	0x3e, r29	; 62
    57ee:	0f be       	out	0x3f, r0	; 63
    57f0:	cd bf       	out	0x3d, r28	; 61
    57f2:	cf 91       	pop	r28
    57f4:	df 91       	pop	r29
    57f6:	08 95       	ret

000057f8 <CLCD_voidGOTO>:

void CLCD_voidGOTO(u8 Copy_u8X,u8 Copy_u8Y)
{
    57f8:	df 93       	push	r29
    57fa:	cf 93       	push	r28
    57fc:	00 d0       	rcall	.+0      	; 0x57fe <CLCD_voidGOTO+0x6>
    57fe:	00 d0       	rcall	.+0      	; 0x5800 <CLCD_voidGOTO+0x8>
    5800:	cd b7       	in	r28, 0x3d	; 61
    5802:	de b7       	in	r29, 0x3e	; 62
    5804:	89 83       	std	Y+1, r24	; 0x01
    5806:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Y)
    5808:	8a 81       	ldd	r24, Y+2	; 0x02
    580a:	28 2f       	mov	r18, r24
    580c:	30 e0       	ldi	r19, 0x00	; 0
    580e:	3c 83       	std	Y+4, r19	; 0x04
    5810:	2b 83       	std	Y+3, r18	; 0x03
    5812:	8b 81       	ldd	r24, Y+3	; 0x03
    5814:	9c 81       	ldd	r25, Y+4	; 0x04
    5816:	81 30       	cpi	r24, 0x01	; 1
    5818:	91 05       	cpc	r25, r1
    581a:	31 f0       	breq	.+12     	; 0x5828 <CLCD_voidGOTO+0x30>
    581c:	2b 81       	ldd	r18, Y+3	; 0x03
    581e:	3c 81       	ldd	r19, Y+4	; 0x04
    5820:	22 30       	cpi	r18, 0x02	; 2
    5822:	31 05       	cpc	r19, r1
    5824:	31 f0       	breq	.+12     	; 0x5832 <CLCD_voidGOTO+0x3a>
    5826:	09 c0       	rjmp	.+18     	; 0x583a <CLCD_voidGOTO+0x42>
	{

	case 1:
		CLCD_voidSendCommand(0x80+Copy_u8X-1);
    5828:	89 81       	ldd	r24, Y+1	; 0x01
    582a:	81 58       	subi	r24, 0x81	; 129
    582c:	0e 94 44 29 	call	0x5288	; 0x5288 <CLCD_voidSendCommand>
    5830:	04 c0       	rjmp	.+8      	; 0x583a <CLCD_voidGOTO+0x42>
		break;

	case 2:
		CLCD_voidSendCommand(0xC0+Copy_u8X-1);
    5832:	89 81       	ldd	r24, Y+1	; 0x01
    5834:	81 54       	subi	r24, 0x41	; 65
    5836:	0e 94 44 29 	call	0x5288	; 0x5288 <CLCD_voidSendCommand>
		break;



	}
}
    583a:	0f 90       	pop	r0
    583c:	0f 90       	pop	r0
    583e:	0f 90       	pop	r0
    5840:	0f 90       	pop	r0
    5842:	cf 91       	pop	r28
    5844:	df 91       	pop	r29
    5846:	08 95       	ret

00005848 <CLCD_CLEAR>:

void CLCD_CLEAR()
{
    5848:	df 93       	push	r29
    584a:	cf 93       	push	r28
    584c:	cd b7       	in	r28, 0x3d	; 61
    584e:	de b7       	in	r29, 0x3e	; 62
CLCD_voidSendCommand(CLCD_CLR);
    5850:	81 e0       	ldi	r24, 0x01	; 1
    5852:	0e 94 44 29 	call	0x5288	; 0x5288 <CLCD_voidSendCommand>

}
    5856:	cf 91       	pop	r28
    5858:	df 91       	pop	r29
    585a:	08 95       	ret

0000585c <CLCD_voidCreateExtraChar>:

void CLCD_voidCreateExtraChar(u8 Copy_u8PatternLoctaion,u8 *Copy_pu8ExtraChar)
{
    585c:	df 93       	push	r29
    585e:	cf 93       	push	r28
    5860:	00 d0       	rcall	.+0      	; 0x5862 <CLCD_voidCreateExtraChar+0x6>
    5862:	00 d0       	rcall	.+0      	; 0x5864 <CLCD_voidCreateExtraChar+0x8>
    5864:	0f 92       	push	r0
    5866:	cd b7       	in	r28, 0x3d	; 61
    5868:	de b7       	in	r29, 0x3e	; 62
    586a:	8b 83       	std	Y+3, r24	; 0x03
    586c:	7d 83       	std	Y+5, r23	; 0x05
    586e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Address = 0;
    5870:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8Address=Copy_u8PatternLoctaion*8;
    5872:	8b 81       	ldd	r24, Y+3	; 0x03
    5874:	88 2f       	mov	r24, r24
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	88 0f       	add	r24, r24
    587a:	99 1f       	adc	r25, r25
    587c:	88 0f       	add	r24, r24
    587e:	99 1f       	adc	r25, r25
    5880:	88 0f       	add	r24, r24
    5882:	99 1f       	adc	r25, r25
    5884:	8a 83       	std	Y+2, r24	; 0x02

	//Go To CGram
	CLCD_voidSendCommand(64+Local_u8Address);
    5886:	8a 81       	ldd	r24, Y+2	; 0x02
    5888:	80 5c       	subi	r24, 0xC0	; 192
    588a:	0e 94 44 29 	call	0x5288	; 0x5288 <CLCD_voidSendCommand>
	for(u8 i=0;i<8;i++)
    588e:	19 82       	std	Y+1, r1	; 0x01
    5890:	0e c0       	rjmp	.+28     	; 0x58ae <CLCD_voidCreateExtraChar+0x52>
	{
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
    5892:	89 81       	ldd	r24, Y+1	; 0x01
    5894:	28 2f       	mov	r18, r24
    5896:	30 e0       	ldi	r19, 0x00	; 0
    5898:	8c 81       	ldd	r24, Y+4	; 0x04
    589a:	9d 81       	ldd	r25, Y+5	; 0x05
    589c:	fc 01       	movw	r30, r24
    589e:	e2 0f       	add	r30, r18
    58a0:	f3 1f       	adc	r31, r19
    58a2:	80 81       	ld	r24, Z
    58a4:	0e 94 a0 2a 	call	0x5540	; 0x5540 <CLCD_voidSendData>
	u8 Local_u8Address = 0;
	Local_u8Address=Copy_u8PatternLoctaion*8;

	//Go To CGram
	CLCD_voidSendCommand(64+Local_u8Address);
	for(u8 i=0;i<8;i++)
    58a8:	89 81       	ldd	r24, Y+1	; 0x01
    58aa:	8f 5f       	subi	r24, 0xFF	; 255
    58ac:	89 83       	std	Y+1, r24	; 0x01
    58ae:	89 81       	ldd	r24, Y+1	; 0x01
    58b0:	88 30       	cpi	r24, 0x08	; 8
    58b2:	78 f3       	brcs	.-34     	; 0x5892 <CLCD_voidCreateExtraChar+0x36>
	{
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
	}


}
    58b4:	0f 90       	pop	r0
    58b6:	0f 90       	pop	r0
    58b8:	0f 90       	pop	r0
    58ba:	0f 90       	pop	r0
    58bc:	0f 90       	pop	r0
    58be:	cf 91       	pop	r28
    58c0:	df 91       	pop	r29
    58c2:	08 95       	ret

000058c4 <CLCD_voidSendString>:

void CLCD_voidSendString(u8 * Copy_u8pu8Array)
{
    58c4:	df 93       	push	r29
    58c6:	cf 93       	push	r28
    58c8:	00 d0       	rcall	.+0      	; 0x58ca <CLCD_voidSendString+0x6>
    58ca:	0f 92       	push	r0
    58cc:	cd b7       	in	r28, 0x3d	; 61
    58ce:	de b7       	in	r29, 0x3e	; 62
    58d0:	9b 83       	std	Y+3, r25	; 0x03
    58d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    58d4:	19 82       	std	Y+1, r1	; 0x01
    58d6:	0e c0       	rjmp	.+28     	; 0x58f4 <CLCD_voidSendString+0x30>
	while(Copy_u8pu8Array[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_u8pu8Array[Local_u8Counter]);
    58d8:	89 81       	ldd	r24, Y+1	; 0x01
    58da:	28 2f       	mov	r18, r24
    58dc:	30 e0       	ldi	r19, 0x00	; 0
    58de:	8a 81       	ldd	r24, Y+2	; 0x02
    58e0:	9b 81       	ldd	r25, Y+3	; 0x03
    58e2:	fc 01       	movw	r30, r24
    58e4:	e2 0f       	add	r30, r18
    58e6:	f3 1f       	adc	r31, r19
    58e8:	80 81       	ld	r24, Z
    58ea:	0e 94 a0 2a 	call	0x5540	; 0x5540 <CLCD_voidSendData>

		Local_u8Counter++;
    58ee:	89 81       	ldd	r24, Y+1	; 0x01
    58f0:	8f 5f       	subi	r24, 0xFF	; 255
    58f2:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(u8 * Copy_u8pu8Array)
{
	u8 Local_u8Counter=0;
	while(Copy_u8pu8Array[Local_u8Counter] != '\0')
    58f4:	89 81       	ldd	r24, Y+1	; 0x01
    58f6:	28 2f       	mov	r18, r24
    58f8:	30 e0       	ldi	r19, 0x00	; 0
    58fa:	8a 81       	ldd	r24, Y+2	; 0x02
    58fc:	9b 81       	ldd	r25, Y+3	; 0x03
    58fe:	fc 01       	movw	r30, r24
    5900:	e2 0f       	add	r30, r18
    5902:	f3 1f       	adc	r31, r19
    5904:	80 81       	ld	r24, Z
    5906:	88 23       	and	r24, r24
    5908:	39 f7       	brne	.-50     	; 0x58d8 <CLCD_voidSendString+0x14>

		Local_u8Counter++;

	}

}
    590a:	0f 90       	pop	r0
    590c:	0f 90       	pop	r0
    590e:	0f 90       	pop	r0
    5910:	cf 91       	pop	r28
    5912:	df 91       	pop	r29
    5914:	08 95       	ret

00005916 <CLCD_voidSendNumber>:
void CLCD_voidSendNumber(u32 Copy_u32Num,u8 Copy_u8X,u8 Copy_u8Y)
{
    5916:	df 93       	push	r29
    5918:	cf 93       	push	r28
    591a:	cd b7       	in	r28, 0x3d	; 61
    591c:	de b7       	in	r29, 0x3e	; 62
    591e:	29 97       	sbiw	r28, 0x09	; 9
    5920:	0f b6       	in	r0, 0x3f	; 63
    5922:	f8 94       	cli
    5924:	de bf       	out	0x3e, r29	; 62
    5926:	0f be       	out	0x3f, r0	; 63
    5928:	cd bf       	out	0x3d, r28	; 61
    592a:	9f 83       	std	Y+7, r25	; 0x07
    592c:	8e 83       	std	Y+6, r24	; 0x06
    592e:	68 87       	std	Y+8, r22	; 0x08
    5930:	49 87       	std	Y+9, r20	; 0x09

	u8 Local_u8Rem=0,Local_u8Counter=0;
    5932:	1d 82       	std	Y+5, r1	; 0x05
    5934:	1c 82       	std	Y+4, r1	; 0x04
	u32 Local_u32Num=Copy_u32Num;
    5936:	8e 81       	ldd	r24, Y+6	; 0x06
    5938:	9f 81       	ldd	r25, Y+7	; 0x07
    593a:	9b 83       	std	Y+3, r25	; 0x03
    593c:	8a 83       	std	Y+2, r24	; 0x02


	do{

		Local_u32Num/=10;
    593e:	8a 81       	ldd	r24, Y+2	; 0x02
    5940:	9b 81       	ldd	r25, Y+3	; 0x03
    5942:	2a e0       	ldi	r18, 0x0A	; 10
    5944:	30 e0       	ldi	r19, 0x00	; 0
    5946:	b9 01       	movw	r22, r18
    5948:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__udivmodhi4>
    594c:	cb 01       	movw	r24, r22
    594e:	9b 83       	std	Y+3, r25	; 0x03
    5950:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Counter++;
    5952:	8c 81       	ldd	r24, Y+4	; 0x04
    5954:	8f 5f       	subi	r24, 0xFF	; 255
    5956:	8c 83       	std	Y+4, r24	; 0x04

	}
	while(Local_u32Num!=0);
    5958:	8a 81       	ldd	r24, Y+2	; 0x02
    595a:	9b 81       	ldd	r25, Y+3	; 0x03
    595c:	00 97       	sbiw	r24, 0x00	; 0
    595e:	79 f7       	brne	.-34     	; 0x593e <CLCD_voidSendNumber+0x28>

	for(u8 i=Local_u8Counter;i>0;i--)
    5960:	8c 81       	ldd	r24, Y+4	; 0x04
    5962:	89 83       	std	Y+1, r24	; 0x01
    5964:	1f c0       	rjmp	.+62     	; 0x59a4 <CLCD_voidSendNumber+0x8e>
	{

		Local_u8Rem=Copy_u32Num%10;
    5966:	8e 81       	ldd	r24, Y+6	; 0x06
    5968:	9f 81       	ldd	r25, Y+7	; 0x07
    596a:	2a e0       	ldi	r18, 0x0A	; 10
    596c:	30 e0       	ldi	r19, 0x00	; 0
    596e:	b9 01       	movw	r22, r18
    5970:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__udivmodhi4>
    5974:	8d 83       	std	Y+5, r24	; 0x05
		Copy_u32Num/=10;
    5976:	8e 81       	ldd	r24, Y+6	; 0x06
    5978:	9f 81       	ldd	r25, Y+7	; 0x07
    597a:	2a e0       	ldi	r18, 0x0A	; 10
    597c:	30 e0       	ldi	r19, 0x00	; 0
    597e:	b9 01       	movw	r22, r18
    5980:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__udivmodhi4>
    5984:	cb 01       	movw	r24, r22
    5986:	9f 83       	std	Y+7, r25	; 0x07
    5988:	8e 83       	std	Y+6, r24	; 0x06
		CLCD_voidGOTO(i+Copy_u8X,Copy_u8Y);
    598a:	99 81       	ldd	r25, Y+1	; 0x01
    598c:	88 85       	ldd	r24, Y+8	; 0x08
    598e:	89 0f       	add	r24, r25
    5990:	69 85       	ldd	r22, Y+9	; 0x09
    5992:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <CLCD_voidGOTO>
		CLCD_voidSendData((48+Local_u8Rem));
    5996:	8d 81       	ldd	r24, Y+5	; 0x05
    5998:	80 5d       	subi	r24, 0xD0	; 208
    599a:	0e 94 a0 2a 	call	0x5540	; 0x5540 <CLCD_voidSendData>
		Local_u8Counter++;

	}
	while(Local_u32Num!=0);

	for(u8 i=Local_u8Counter;i>0;i--)
    599e:	89 81       	ldd	r24, Y+1	; 0x01
    59a0:	81 50       	subi	r24, 0x01	; 1
    59a2:	89 83       	std	Y+1, r24	; 0x01
    59a4:	89 81       	ldd	r24, Y+1	; 0x01
    59a6:	88 23       	and	r24, r24
    59a8:	f1 f6       	brne	.-68     	; 0x5966 <CLCD_voidSendNumber+0x50>

	}



}
    59aa:	29 96       	adiw	r28, 0x09	; 9
    59ac:	0f b6       	in	r0, 0x3f	; 63
    59ae:	f8 94       	cli
    59b0:	de bf       	out	0x3e, r29	; 62
    59b2:	0f be       	out	0x3f, r0	; 63
    59b4:	cd bf       	out	0x3d, r28	; 61
    59b6:	cf 91       	pop	r28
    59b8:	df 91       	pop	r29
    59ba:	08 95       	ret

000059bc <main>:
#include "MCAL/UART/UART_Interface.h"
#include "APP/Users.h"


int main()
{
    59bc:	0f 93       	push	r16
    59be:	1f 93       	push	r17
    59c0:	df 93       	push	r29
    59c2:	cf 93       	push	r28
    59c4:	cd b7       	in	r28, 0x3d	; 61
    59c6:	de b7       	in	r29, 0x3e	; 62
    59c8:	c3 5b       	subi	r28, 0xB3	; 179
    59ca:	d0 40       	sbci	r29, 0x00	; 0
    59cc:	0f b6       	in	r0, 0x3f	; 63
    59ce:	f8 94       	cli
    59d0:	de bf       	out	0x3e, r29	; 62
    59d2:	0f be       	out	0x3f, r0	; 63
    59d4:	cd bf       	out	0x3d, r28	; 61

	/* Initialize LCD */
	CLCD_voidInit();
    59d6:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <CLCD_voidInit>
	/*Initialize Servo */
	Servo_voidInit();
    59da:	0e 94 26 23 	call	0x464c	; 0x464c <Servo_voidInit>
	/*Initialize UART */
	UART_voidInit(Parity_Disabled,one_stop_bit,eight_bits,9600);
    59de:	80 e0       	ldi	r24, 0x00	; 0
    59e0:	60 e0       	ldi	r22, 0x00	; 0
    59e2:	43 e0       	ldi	r20, 0x03	; 3
    59e4:	20 e8       	ldi	r18, 0x80	; 128
    59e6:	35 e2       	ldi	r19, 0x25	; 37
    59e8:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_voidInit>

	/*Set Port A To Be Output For LEDs */
	DIO_voidSetPortDirection(DIO_PORTA,DIO_OUTPUT);
    59ec:	80 e0       	ldi	r24, 0x00	; 0
    59ee:	61 e0       	ldi	r22, 0x01	; 1
    59f0:	0e 94 b7 10 	call	0x216e	; 0x216e <DIO_voidSetPortDirection>
	/*set pin 0 as output to a buzzer */
	DIO_voidSetPortDirection(DIO_PORTB,DIO_OUTPUT);
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	61 e0       	ldi	r22, 0x01	; 1
    59f8:	0e 94 b7 10 	call	0x216e	; 0x216e <DIO_voidSetPortDirection>


	u8 password[5];
	u8 user[10];
	u8 flag=0;
    59fc:	fe 01       	movw	r30, r28
    59fe:	ec 55       	subi	r30, 0x5C	; 92
    5a00:	ff 4f       	sbci	r31, 0xFF	; 255
    5a02:	10 82       	st	Z, r1
	u8 Local_u8Counter=0;
    5a04:	fe 01       	movw	r30, r28
    5a06:	ed 55       	subi	r30, 0x5D	; 93
    5a08:	ff 4f       	sbci	r31, 0xFF	; 255
    5a0a:	10 82       	st	Z, r1
	u8 fail_flag=0;
    5a0c:	fe 01       	movw	r30, r28
    5a0e:	ee 55       	subi	r30, 0x5E	; 94
    5a10:	ff 4f       	sbci	r31, 0xFF	; 255
    5a12:	10 82       	st	Z, r1
	u8 Name_flag=0;
    5a14:	fe 01       	movw	r30, r28
    5a16:	ef 55       	subi	r30, 0x5F	; 95
    5a18:	ff 4f       	sbci	r31, 0xFF	; 255
    5a1a:	10 82       	st	Z, r1
	u8 Local_u8Counter2=0;
    5a1c:	fe 01       	movw	r30, r28
    5a1e:	e0 56       	subi	r30, 0x60	; 96
    5a20:	ff 4f       	sbci	r31, 0xFF	; 255
    5a22:	10 82       	st	Z, r1
	u8 choice;
	u8 index;

	UART_voidSendStringSync((u8*)"welcome :");
    5a24:	89 e6       	ldi	r24, 0x69	; 105
    5a26:	90 e0       	ldi	r25, 0x00	; 0
    5a28:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>

	while(1)
	{
		if(flag!=3)
    5a2c:	fe 01       	movw	r30, r28
    5a2e:	ec 55       	subi	r30, 0x5C	; 92
    5a30:	ff 4f       	sbci	r31, 0xFF	; 255
    5a32:	80 81       	ld	r24, Z
    5a34:	83 30       	cpi	r24, 0x03	; 3
    5a36:	09 f4       	brne	.+2      	; 0x5a3a <main+0x7e>
    5a38:	47 c0       	rjmp	.+142    	; 0x5ac8 <main+0x10c>
		{

			CLCD_CLEAR();
    5a3a:	0e 94 24 2c 	call	0x5848	; 0x5848 <CLCD_CLEAR>
			UART_voidSendStringSync((u8*)"\rEnter UserName:");
    5a3e:	83 e7       	ldi	r24, 0x73	; 115
    5a40:	90 e0       	ldi	r25, 0x00	; 0
    5a42:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>
			CLCD_voidSendString((u8*)"Enter UserName:");
    5a46:	84 e8       	ldi	r24, 0x84	; 132
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
			CLCD_voidGOTO(1,2);
    5a4e:	81 e0       	ldi	r24, 0x01	; 1
    5a50:	62 e0       	ldi	r22, 0x02	; 2
    5a52:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <CLCD_voidGOTO>
			UART_voidreceiveStringSync(user);
    5a56:	ce 01       	movw	r24, r28
    5a58:	86 55       	subi	r24, 0x56	; 86
    5a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a5c:	0e 94 23 08 	call	0x1046	; 0x1046 <UART_voidreceiveStringSync>
    5a60:	33 c0       	rjmp	.+102    	; 0x5ac8 <main+0x10c>
		}

		while(Local_u8Counter2 != 5)
		{
			if(strcmp(user,names[Local_u8Counter2])==0)
    5a62:	45 e3       	ldi	r20, 0x35	; 53
    5a64:	53 e0       	ldi	r21, 0x03	; 3
    5a66:	fe 01       	movw	r30, r28
    5a68:	e0 56       	subi	r30, 0x60	; 96
    5a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a6c:	80 81       	ld	r24, Z
    5a6e:	88 2f       	mov	r24, r24
    5a70:	90 e0       	ldi	r25, 0x00	; 0
    5a72:	9c 01       	movw	r18, r24
    5a74:	22 0f       	add	r18, r18
    5a76:	33 1f       	adc	r19, r19
    5a78:	c9 01       	movw	r24, r18
    5a7a:	88 0f       	add	r24, r24
    5a7c:	99 1f       	adc	r25, r25
    5a7e:	88 0f       	add	r24, r24
    5a80:	99 1f       	adc	r25, r25
    5a82:	82 0f       	add	r24, r18
    5a84:	93 1f       	adc	r25, r19
    5a86:	9a 01       	movw	r18, r20
    5a88:	28 0f       	add	r18, r24
    5a8a:	39 1f       	adc	r19, r25
    5a8c:	ce 01       	movw	r24, r28
    5a8e:	86 55       	subi	r24, 0x56	; 86
    5a90:	9f 4f       	sbci	r25, 0xFF	; 255
    5a92:	b9 01       	movw	r22, r18
    5a94:	0e 94 42 36 	call	0x6c84	; 0x6c84 <strcmp>
    5a98:	00 97       	sbiw	r24, 0x00	; 0
    5a9a:	69 f4       	brne	.+26     	; 0x5ab6 <main+0xfa>
			{
				Name_flag=1;
    5a9c:	fe 01       	movw	r30, r28
    5a9e:	ef 55       	subi	r30, 0x5F	; 95
    5aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa2:	81 e0       	ldi	r24, 0x01	; 1
    5aa4:	80 83       	st	Z, r24
				index=Local_u8Counter2;
    5aa6:	de 01       	movw	r26, r28
    5aa8:	a2 56       	subi	r26, 0x62	; 98
    5aaa:	bf 4f       	sbci	r27, 0xFF	; 255
    5aac:	fe 01       	movw	r30, r28
    5aae:	e0 56       	subi	r30, 0x60	; 96
    5ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab2:	80 81       	ld	r24, Z
    5ab4:	8c 93       	st	X, r24
			}
			Local_u8Counter2++;
    5ab6:	de 01       	movw	r26, r28
    5ab8:	a0 56       	subi	r26, 0x60	; 96
    5aba:	bf 4f       	sbci	r27, 0xFF	; 255
    5abc:	fe 01       	movw	r30, r28
    5abe:	e0 56       	subi	r30, 0x60	; 96
    5ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac2:	80 81       	ld	r24, Z
    5ac4:	8f 5f       	subi	r24, 0xFF	; 255
    5ac6:	8c 93       	st	X, r24
			CLCD_voidSendString((u8*)"Enter UserName:");
			CLCD_voidGOTO(1,2);
			UART_voidreceiveStringSync(user);
		}

		while(Local_u8Counter2 != 5)
    5ac8:	fe 01       	movw	r30, r28
    5aca:	e0 56       	subi	r30, 0x60	; 96
    5acc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ace:	80 81       	ld	r24, Z
    5ad0:	85 30       	cpi	r24, 0x05	; 5
    5ad2:	39 f6       	brne	.-114    	; 0x5a62 <main+0xa6>
				index=Local_u8Counter2;
			}
			Local_u8Counter2++;
		}

		if(Name_flag==1)
    5ad4:	fe 01       	movw	r30, r28
    5ad6:	ef 55       	subi	r30, 0x5F	; 95
    5ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    5ada:	80 81       	ld	r24, Z
    5adc:	81 30       	cpi	r24, 0x01	; 1
    5ade:	e1 f5       	brne	.+120    	; 0x5b58 <main+0x19c>
		{
			CLCD_CLEAR();
    5ae0:	0e 94 24 2c 	call	0x5848	; 0x5848 <CLCD_CLEAR>
			UART_voidSendStringSync((u8*)"\rEnter Password:");
    5ae4:	84 e9       	ldi	r24, 0x94	; 148
    5ae6:	90 e0       	ldi	r25, 0x00	; 0
    5ae8:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>
			CLCD_voidSendString((u8*)"Enter Password:");
    5aec:	85 ea       	ldi	r24, 0xA5	; 165
    5aee:	90 e0       	ldi	r25, 0x00	; 0
    5af0:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
			CLCD_voidGOTO(1,2);
    5af4:	81 e0       	ldi	r24, 0x01	; 1
    5af6:	62 e0       	ldi	r22, 0x02	; 2
    5af8:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <CLCD_voidGOTO>
			UART_voidreceiveStringSync(password);
    5afc:	ce 01       	movw	r24, r28
    5afe:	8b 55       	subi	r24, 0x5B	; 91
    5b00:	9f 4f       	sbci	r25, 0xFF	; 255
    5b02:	0e 94 23 08 	call	0x1046	; 0x1046 <UART_voidreceiveStringSync>
			if(strcmp(password,passes[index])==0)
    5b06:	49 e9       	ldi	r20, 0x99	; 153
    5b08:	53 e0       	ldi	r21, 0x03	; 3
    5b0a:	fe 01       	movw	r30, r28
    5b0c:	e2 56       	subi	r30, 0x62	; 98
    5b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b10:	80 81       	ld	r24, Z
    5b12:	88 2f       	mov	r24, r24
    5b14:	90 e0       	ldi	r25, 0x00	; 0
    5b16:	9c 01       	movw	r18, r24
    5b18:	22 0f       	add	r18, r18
    5b1a:	33 1f       	adc	r19, r19
    5b1c:	c9 01       	movw	r24, r18
    5b1e:	88 0f       	add	r24, r24
    5b20:	99 1f       	adc	r25, r25
    5b22:	88 0f       	add	r24, r24
    5b24:	99 1f       	adc	r25, r25
    5b26:	82 0f       	add	r24, r18
    5b28:	93 1f       	adc	r25, r19
    5b2a:	9a 01       	movw	r18, r20
    5b2c:	28 0f       	add	r18, r24
    5b2e:	39 1f       	adc	r19, r25
    5b30:	ce 01       	movw	r24, r28
    5b32:	8b 55       	subi	r24, 0x5B	; 91
    5b34:	9f 4f       	sbci	r25, 0xFF	; 255
    5b36:	b9 01       	movw	r22, r18
    5b38:	0e 94 42 36 	call	0x6c84	; 0x6c84 <strcmp>
    5b3c:	00 97       	sbiw	r24, 0x00	; 0
    5b3e:	31 f4       	brne	.+12     	; 0x5b4c <main+0x190>
			{
				flag=4;
    5b40:	fe 01       	movw	r30, r28
    5b42:	ec 55       	subi	r30, 0x5C	; 92
    5b44:	ff 4f       	sbci	r31, 0xFF	; 255
    5b46:	84 e0       	ldi	r24, 0x04	; 4
    5b48:	80 83       	st	Z, r24
    5b4a:	c8 c0       	rjmp	.+400    	; 0x5cdc <main+0x320>
			}else
			{
				flag=3;
    5b4c:	fe 01       	movw	r30, r28
    5b4e:	ec 55       	subi	r30, 0x5C	; 92
    5b50:	ff 4f       	sbci	r31, 0xFF	; 255
    5b52:	83 e0       	ldi	r24, 0x03	; 3
    5b54:	80 83       	st	Z, r24
    5b56:	c2 c0       	rjmp	.+388    	; 0x5cdc <main+0x320>

			}
		}else
		{
			CLCD_CLEAR();
    5b58:	0e 94 24 2c 	call	0x5848	; 0x5848 <CLCD_CLEAR>
			UART_voidSendStringSync((u8*)"Wrong User name\n");
    5b5c:	85 eb       	ldi	r24, 0xB5	; 181
    5b5e:	90 e0       	ldi	r25, 0x00	; 0
    5b60:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>
			CLCD_voidSendString((u8*)"Wrong User");
    5b64:	86 ec       	ldi	r24, 0xC6	; 198
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
    5b6c:	fe 01       	movw	r30, r28
    5b6e:	e9 56       	subi	r30, 0x69	; 105
    5b70:	ff 4f       	sbci	r31, 0xFF	; 255
    5b72:	80 e0       	ldi	r24, 0x00	; 0
    5b74:	90 e0       	ldi	r25, 0x00	; 0
    5b76:	a6 e9       	ldi	r26, 0x96	; 150
    5b78:	b3 e4       	ldi	r27, 0x43	; 67
    5b7a:	80 83       	st	Z, r24
    5b7c:	91 83       	std	Z+1, r25	; 0x01
    5b7e:	a2 83       	std	Z+2, r26	; 0x02
    5b80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b82:	8e 01       	movw	r16, r28
    5b84:	0d 56       	subi	r16, 0x6D	; 109
    5b86:	1f 4f       	sbci	r17, 0xFF	; 255
    5b88:	fe 01       	movw	r30, r28
    5b8a:	e9 56       	subi	r30, 0x69	; 105
    5b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b8e:	60 81       	ld	r22, Z
    5b90:	71 81       	ldd	r23, Z+1	; 0x01
    5b92:	82 81       	ldd	r24, Z+2	; 0x02
    5b94:	93 81       	ldd	r25, Z+3	; 0x03
    5b96:	20 e0       	ldi	r18, 0x00	; 0
    5b98:	30 e0       	ldi	r19, 0x00	; 0
    5b9a:	4a ef       	ldi	r20, 0xFA	; 250
    5b9c:	54 e4       	ldi	r21, 0x44	; 68
    5b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ba2:	dc 01       	movw	r26, r24
    5ba4:	cb 01       	movw	r24, r22
    5ba6:	f8 01       	movw	r30, r16
    5ba8:	80 83       	st	Z, r24
    5baa:	91 83       	std	Z+1, r25	; 0x01
    5bac:	a2 83       	std	Z+2, r26	; 0x02
    5bae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5bb0:	fe 01       	movw	r30, r28
    5bb2:	ed 56       	subi	r30, 0x6D	; 109
    5bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb6:	60 81       	ld	r22, Z
    5bb8:	71 81       	ldd	r23, Z+1	; 0x01
    5bba:	82 81       	ldd	r24, Z+2	; 0x02
    5bbc:	93 81       	ldd	r25, Z+3	; 0x03
    5bbe:	20 e0       	ldi	r18, 0x00	; 0
    5bc0:	30 e0       	ldi	r19, 0x00	; 0
    5bc2:	40 e8       	ldi	r20, 0x80	; 128
    5bc4:	5f e3       	ldi	r21, 0x3F	; 63
    5bc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5bca:	88 23       	and	r24, r24
    5bcc:	44 f4       	brge	.+16     	; 0x5bde <main+0x222>
		__ticks = 1;
    5bce:	fe 01       	movw	r30, r28
    5bd0:	ef 56       	subi	r30, 0x6F	; 111
    5bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd4:	81 e0       	ldi	r24, 0x01	; 1
    5bd6:	90 e0       	ldi	r25, 0x00	; 0
    5bd8:	91 83       	std	Z+1, r25	; 0x01
    5bda:	80 83       	st	Z, r24
    5bdc:	64 c0       	rjmp	.+200    	; 0x5ca6 <main+0x2ea>
	else if (__tmp > 65535)
    5bde:	fe 01       	movw	r30, r28
    5be0:	ed 56       	subi	r30, 0x6D	; 109
    5be2:	ff 4f       	sbci	r31, 0xFF	; 255
    5be4:	60 81       	ld	r22, Z
    5be6:	71 81       	ldd	r23, Z+1	; 0x01
    5be8:	82 81       	ldd	r24, Z+2	; 0x02
    5bea:	93 81       	ldd	r25, Z+3	; 0x03
    5bec:	20 e0       	ldi	r18, 0x00	; 0
    5bee:	3f ef       	ldi	r19, 0xFF	; 255
    5bf0:	4f e7       	ldi	r20, 0x7F	; 127
    5bf2:	57 e4       	ldi	r21, 0x47	; 71
    5bf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5bf8:	18 16       	cp	r1, r24
    5bfa:	0c f0       	brlt	.+2      	; 0x5bfe <main+0x242>
    5bfc:	43 c0       	rjmp	.+134    	; 0x5c84 <main+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bfe:	fe 01       	movw	r30, r28
    5c00:	e9 56       	subi	r30, 0x69	; 105
    5c02:	ff 4f       	sbci	r31, 0xFF	; 255
    5c04:	60 81       	ld	r22, Z
    5c06:	71 81       	ldd	r23, Z+1	; 0x01
    5c08:	82 81       	ldd	r24, Z+2	; 0x02
    5c0a:	93 81       	ldd	r25, Z+3	; 0x03
    5c0c:	20 e0       	ldi	r18, 0x00	; 0
    5c0e:	30 e0       	ldi	r19, 0x00	; 0
    5c10:	40 e2       	ldi	r20, 0x20	; 32
    5c12:	51 e4       	ldi	r21, 0x41	; 65
    5c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c18:	dc 01       	movw	r26, r24
    5c1a:	cb 01       	movw	r24, r22
    5c1c:	8e 01       	movw	r16, r28
    5c1e:	0f 56       	subi	r16, 0x6F	; 111
    5c20:	1f 4f       	sbci	r17, 0xFF	; 255
    5c22:	bc 01       	movw	r22, r24
    5c24:	cd 01       	movw	r24, r26
    5c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c2a:	dc 01       	movw	r26, r24
    5c2c:	cb 01       	movw	r24, r22
    5c2e:	f8 01       	movw	r30, r16
    5c30:	91 83       	std	Z+1, r25	; 0x01
    5c32:	80 83       	st	Z, r24
    5c34:	1f c0       	rjmp	.+62     	; 0x5c74 <main+0x2b8>
    5c36:	fe 01       	movw	r30, r28
    5c38:	e1 57       	subi	r30, 0x71	; 113
    5c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c3c:	88 ec       	ldi	r24, 0xC8	; 200
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	91 83       	std	Z+1, r25	; 0x01
    5c42:	80 83       	st	Z, r24
    5c44:	fe 01       	movw	r30, r28
    5c46:	e1 57       	subi	r30, 0x71	; 113
    5c48:	ff 4f       	sbci	r31, 0xFF	; 255
    5c4a:	80 81       	ld	r24, Z
    5c4c:	91 81       	ldd	r25, Z+1	; 0x01
    5c4e:	01 97       	sbiw	r24, 0x01	; 1
    5c50:	f1 f7       	brne	.-4      	; 0x5c4e <main+0x292>
    5c52:	fe 01       	movw	r30, r28
    5c54:	e1 57       	subi	r30, 0x71	; 113
    5c56:	ff 4f       	sbci	r31, 0xFF	; 255
    5c58:	91 83       	std	Z+1, r25	; 0x01
    5c5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c5c:	de 01       	movw	r26, r28
    5c5e:	af 56       	subi	r26, 0x6F	; 111
    5c60:	bf 4f       	sbci	r27, 0xFF	; 255
    5c62:	fe 01       	movw	r30, r28
    5c64:	ef 56       	subi	r30, 0x6F	; 111
    5c66:	ff 4f       	sbci	r31, 0xFF	; 255
    5c68:	80 81       	ld	r24, Z
    5c6a:	91 81       	ldd	r25, Z+1	; 0x01
    5c6c:	01 97       	sbiw	r24, 0x01	; 1
    5c6e:	11 96       	adiw	r26, 0x01	; 1
    5c70:	9c 93       	st	X, r25
    5c72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c74:	fe 01       	movw	r30, r28
    5c76:	ef 56       	subi	r30, 0x6F	; 111
    5c78:	ff 4f       	sbci	r31, 0xFF	; 255
    5c7a:	80 81       	ld	r24, Z
    5c7c:	91 81       	ldd	r25, Z+1	; 0x01
    5c7e:	00 97       	sbiw	r24, 0x00	; 0
    5c80:	d1 f6       	brne	.-76     	; 0x5c36 <main+0x27a>
    5c82:	28 c0       	rjmp	.+80     	; 0x5cd4 <main+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c84:	8e 01       	movw	r16, r28
    5c86:	0f 56       	subi	r16, 0x6F	; 111
    5c88:	1f 4f       	sbci	r17, 0xFF	; 255
    5c8a:	fe 01       	movw	r30, r28
    5c8c:	ed 56       	subi	r30, 0x6D	; 109
    5c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c90:	60 81       	ld	r22, Z
    5c92:	71 81       	ldd	r23, Z+1	; 0x01
    5c94:	82 81       	ldd	r24, Z+2	; 0x02
    5c96:	93 81       	ldd	r25, Z+3	; 0x03
    5c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c9c:	dc 01       	movw	r26, r24
    5c9e:	cb 01       	movw	r24, r22
    5ca0:	f8 01       	movw	r30, r16
    5ca2:	91 83       	std	Z+1, r25	; 0x01
    5ca4:	80 83       	st	Z, r24
    5ca6:	de 01       	movw	r26, r28
    5ca8:	a3 57       	subi	r26, 0x73	; 115
    5caa:	bf 4f       	sbci	r27, 0xFF	; 255
    5cac:	fe 01       	movw	r30, r28
    5cae:	ef 56       	subi	r30, 0x6F	; 111
    5cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb2:	80 81       	ld	r24, Z
    5cb4:	91 81       	ldd	r25, Z+1	; 0x01
    5cb6:	11 96       	adiw	r26, 0x01	; 1
    5cb8:	9c 93       	st	X, r25
    5cba:	8e 93       	st	-X, r24
    5cbc:	fe 01       	movw	r30, r28
    5cbe:	e3 57       	subi	r30, 0x73	; 115
    5cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    5cc2:	80 81       	ld	r24, Z
    5cc4:	91 81       	ldd	r25, Z+1	; 0x01
    5cc6:	01 97       	sbiw	r24, 0x01	; 1
    5cc8:	f1 f7       	brne	.-4      	; 0x5cc6 <main+0x30a>
    5cca:	fe 01       	movw	r30, r28
    5ccc:	e3 57       	subi	r30, 0x73	; 115
    5cce:	ff 4f       	sbci	r31, 0xFF	; 255
    5cd0:	91 83       	std	Z+1, r25	; 0x01
    5cd2:	80 83       	st	Z, r24
			_delay_ms(300);
			Local_u8Counter2=0;
    5cd4:	fe 01       	movw	r30, r28
    5cd6:	e0 56       	subi	r30, 0x60	; 96
    5cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5cda:	10 82       	st	Z, r1
		}

		if(flag==4)
    5cdc:	fe 01       	movw	r30, r28
    5cde:	ec 55       	subi	r30, 0x5C	; 92
    5ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ce2:	80 81       	ld	r24, Z
    5ce4:	84 30       	cpi	r24, 0x04	; 4
    5ce6:	09 f0       	breq	.+2      	; 0x5cea <main+0x32e>
    5ce8:	c9 c5       	rjmp	.+2962   	; 0x687c <main+0xec0>
		{

			UART_voidSendStringSync((u8*)"\rWelcome To Back  \n\n");
    5cea:	81 ed       	ldi	r24, 0xD1	; 209
    5cec:	90 e0       	ldi	r25, 0x00	; 0
    5cee:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>
			CLCD_CLEAR();
    5cf2:	0e 94 24 2c 	call	0x5848	; 0x5848 <CLCD_CLEAR>
			CLCD_voidSendString((u8*)"Welcome TO");
    5cf6:	86 ee       	ldi	r24, 0xE6	; 230
    5cf8:	90 e0       	ldi	r25, 0x00	; 0
    5cfa:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
			CLCD_voidGOTO(1,2);
    5cfe:	81 e0       	ldi	r24, 0x01	; 1
    5d00:	62 e0       	ldi	r22, 0x02	; 2
    5d02:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <CLCD_voidGOTO>
			CLCD_voidSendString((u8*)"Your Home");
    5d06:	81 ef       	ldi	r24, 0xF1	; 241
    5d08:	90 e0       	ldi	r25, 0x00	; 0
    5d0a:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
    5d0e:	fe 01       	movw	r30, r28
    5d10:	e7 57       	subi	r30, 0x77	; 119
    5d12:	ff 4f       	sbci	r31, 0xFF	; 255
    5d14:	80 e0       	ldi	r24, 0x00	; 0
    5d16:	90 e0       	ldi	r25, 0x00	; 0
    5d18:	aa e7       	ldi	r26, 0x7A	; 122
    5d1a:	b4 e4       	ldi	r27, 0x44	; 68
    5d1c:	80 83       	st	Z, r24
    5d1e:	91 83       	std	Z+1, r25	; 0x01
    5d20:	a2 83       	std	Z+2, r26	; 0x02
    5d22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d24:	8e 01       	movw	r16, r28
    5d26:	0b 57       	subi	r16, 0x7B	; 123
    5d28:	1f 4f       	sbci	r17, 0xFF	; 255
    5d2a:	fe 01       	movw	r30, r28
    5d2c:	e7 57       	subi	r30, 0x77	; 119
    5d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d30:	60 81       	ld	r22, Z
    5d32:	71 81       	ldd	r23, Z+1	; 0x01
    5d34:	82 81       	ldd	r24, Z+2	; 0x02
    5d36:	93 81       	ldd	r25, Z+3	; 0x03
    5d38:	20 e0       	ldi	r18, 0x00	; 0
    5d3a:	30 e0       	ldi	r19, 0x00	; 0
    5d3c:	4a ef       	ldi	r20, 0xFA	; 250
    5d3e:	54 e4       	ldi	r21, 0x44	; 68
    5d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d44:	dc 01       	movw	r26, r24
    5d46:	cb 01       	movw	r24, r22
    5d48:	f8 01       	movw	r30, r16
    5d4a:	80 83       	st	Z, r24
    5d4c:	91 83       	std	Z+1, r25	; 0x01
    5d4e:	a2 83       	std	Z+2, r26	; 0x02
    5d50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5d52:	fe 01       	movw	r30, r28
    5d54:	eb 57       	subi	r30, 0x7B	; 123
    5d56:	ff 4f       	sbci	r31, 0xFF	; 255
    5d58:	60 81       	ld	r22, Z
    5d5a:	71 81       	ldd	r23, Z+1	; 0x01
    5d5c:	82 81       	ldd	r24, Z+2	; 0x02
    5d5e:	93 81       	ldd	r25, Z+3	; 0x03
    5d60:	20 e0       	ldi	r18, 0x00	; 0
    5d62:	30 e0       	ldi	r19, 0x00	; 0
    5d64:	40 e8       	ldi	r20, 0x80	; 128
    5d66:	5f e3       	ldi	r21, 0x3F	; 63
    5d68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5d6c:	88 23       	and	r24, r24
    5d6e:	44 f4       	brge	.+16     	; 0x5d80 <main+0x3c4>
		__ticks = 1;
    5d70:	fe 01       	movw	r30, r28
    5d72:	ed 57       	subi	r30, 0x7D	; 125
    5d74:	ff 4f       	sbci	r31, 0xFF	; 255
    5d76:	81 e0       	ldi	r24, 0x01	; 1
    5d78:	90 e0       	ldi	r25, 0x00	; 0
    5d7a:	91 83       	std	Z+1, r25	; 0x01
    5d7c:	80 83       	st	Z, r24
    5d7e:	64 c0       	rjmp	.+200    	; 0x5e48 <main+0x48c>
	else if (__tmp > 65535)
    5d80:	fe 01       	movw	r30, r28
    5d82:	eb 57       	subi	r30, 0x7B	; 123
    5d84:	ff 4f       	sbci	r31, 0xFF	; 255
    5d86:	60 81       	ld	r22, Z
    5d88:	71 81       	ldd	r23, Z+1	; 0x01
    5d8a:	82 81       	ldd	r24, Z+2	; 0x02
    5d8c:	93 81       	ldd	r25, Z+3	; 0x03
    5d8e:	20 e0       	ldi	r18, 0x00	; 0
    5d90:	3f ef       	ldi	r19, 0xFF	; 255
    5d92:	4f e7       	ldi	r20, 0x7F	; 127
    5d94:	57 e4       	ldi	r21, 0x47	; 71
    5d96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d9a:	18 16       	cp	r1, r24
    5d9c:	0c f0       	brlt	.+2      	; 0x5da0 <main+0x3e4>
    5d9e:	43 c0       	rjmp	.+134    	; 0x5e26 <main+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5da0:	fe 01       	movw	r30, r28
    5da2:	e7 57       	subi	r30, 0x77	; 119
    5da4:	ff 4f       	sbci	r31, 0xFF	; 255
    5da6:	60 81       	ld	r22, Z
    5da8:	71 81       	ldd	r23, Z+1	; 0x01
    5daa:	82 81       	ldd	r24, Z+2	; 0x02
    5dac:	93 81       	ldd	r25, Z+3	; 0x03
    5dae:	20 e0       	ldi	r18, 0x00	; 0
    5db0:	30 e0       	ldi	r19, 0x00	; 0
    5db2:	40 e2       	ldi	r20, 0x20	; 32
    5db4:	51 e4       	ldi	r21, 0x41	; 65
    5db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dba:	dc 01       	movw	r26, r24
    5dbc:	cb 01       	movw	r24, r22
    5dbe:	8e 01       	movw	r16, r28
    5dc0:	0d 57       	subi	r16, 0x7D	; 125
    5dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    5dc4:	bc 01       	movw	r22, r24
    5dc6:	cd 01       	movw	r24, r26
    5dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dcc:	dc 01       	movw	r26, r24
    5dce:	cb 01       	movw	r24, r22
    5dd0:	f8 01       	movw	r30, r16
    5dd2:	91 83       	std	Z+1, r25	; 0x01
    5dd4:	80 83       	st	Z, r24
    5dd6:	1f c0       	rjmp	.+62     	; 0x5e16 <main+0x45a>
    5dd8:	fe 01       	movw	r30, r28
    5dda:	ef 57       	subi	r30, 0x7F	; 127
    5ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    5dde:	88 ec       	ldi	r24, 0xC8	; 200
    5de0:	90 e0       	ldi	r25, 0x00	; 0
    5de2:	91 83       	std	Z+1, r25	; 0x01
    5de4:	80 83       	st	Z, r24
    5de6:	fe 01       	movw	r30, r28
    5de8:	ef 57       	subi	r30, 0x7F	; 127
    5dea:	ff 4f       	sbci	r31, 0xFF	; 255
    5dec:	80 81       	ld	r24, Z
    5dee:	91 81       	ldd	r25, Z+1	; 0x01
    5df0:	01 97       	sbiw	r24, 0x01	; 1
    5df2:	f1 f7       	brne	.-4      	; 0x5df0 <main+0x434>
    5df4:	fe 01       	movw	r30, r28
    5df6:	ef 57       	subi	r30, 0x7F	; 127
    5df8:	ff 4f       	sbci	r31, 0xFF	; 255
    5dfa:	91 83       	std	Z+1, r25	; 0x01
    5dfc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dfe:	de 01       	movw	r26, r28
    5e00:	ad 57       	subi	r26, 0x7D	; 125
    5e02:	bf 4f       	sbci	r27, 0xFF	; 255
    5e04:	fe 01       	movw	r30, r28
    5e06:	ed 57       	subi	r30, 0x7D	; 125
    5e08:	ff 4f       	sbci	r31, 0xFF	; 255
    5e0a:	80 81       	ld	r24, Z
    5e0c:	91 81       	ldd	r25, Z+1	; 0x01
    5e0e:	01 97       	sbiw	r24, 0x01	; 1
    5e10:	11 96       	adiw	r26, 0x01	; 1
    5e12:	9c 93       	st	X, r25
    5e14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e16:	fe 01       	movw	r30, r28
    5e18:	ed 57       	subi	r30, 0x7D	; 125
    5e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e1c:	80 81       	ld	r24, Z
    5e1e:	91 81       	ldd	r25, Z+1	; 0x01
    5e20:	00 97       	sbiw	r24, 0x00	; 0
    5e22:	d1 f6       	brne	.-76     	; 0x5dd8 <main+0x41c>
    5e24:	23 c5       	rjmp	.+2630   	; 0x686c <main+0xeb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e26:	8e 01       	movw	r16, r28
    5e28:	0d 57       	subi	r16, 0x7D	; 125
    5e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    5e2c:	fe 01       	movw	r30, r28
    5e2e:	eb 57       	subi	r30, 0x7B	; 123
    5e30:	ff 4f       	sbci	r31, 0xFF	; 255
    5e32:	60 81       	ld	r22, Z
    5e34:	71 81       	ldd	r23, Z+1	; 0x01
    5e36:	82 81       	ldd	r24, Z+2	; 0x02
    5e38:	93 81       	ldd	r25, Z+3	; 0x03
    5e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e3e:	dc 01       	movw	r26, r24
    5e40:	cb 01       	movw	r24, r22
    5e42:	f8 01       	movw	r30, r16
    5e44:	91 83       	std	Z+1, r25	; 0x01
    5e46:	80 83       	st	Z, r24
    5e48:	de 01       	movw	r26, r28
    5e4a:	a1 58       	subi	r26, 0x81	; 129
    5e4c:	bf 4f       	sbci	r27, 0xFF	; 255
    5e4e:	fe 01       	movw	r30, r28
    5e50:	ed 57       	subi	r30, 0x7D	; 125
    5e52:	ff 4f       	sbci	r31, 0xFF	; 255
    5e54:	80 81       	ld	r24, Z
    5e56:	91 81       	ldd	r25, Z+1	; 0x01
    5e58:	11 96       	adiw	r26, 0x01	; 1
    5e5a:	9c 93       	st	X, r25
    5e5c:	8e 93       	st	-X, r24
    5e5e:	fe 01       	movw	r30, r28
    5e60:	e1 58       	subi	r30, 0x81	; 129
    5e62:	ff 4f       	sbci	r31, 0xFF	; 255
    5e64:	80 81       	ld	r24, Z
    5e66:	91 81       	ldd	r25, Z+1	; 0x01
    5e68:	01 97       	sbiw	r24, 0x01	; 1
    5e6a:	f1 f7       	brne	.-4      	; 0x5e68 <main+0x4ac>
    5e6c:	fe 01       	movw	r30, r28
    5e6e:	e1 58       	subi	r30, 0x81	; 129
    5e70:	ff 4f       	sbci	r31, 0xFF	; 255
    5e72:	91 83       	std	Z+1, r25	; 0x01
    5e74:	80 83       	st	Z, r24
    5e76:	fa c4       	rjmp	.+2548   	; 0x686c <main+0xeb0>
			_delay_ms(1000);

			while(flag==4)
			{

				UART_voidSendStringSync((u8*)"\r1-Door\n\n");
    5e78:	8b ef       	ldi	r24, 0xFB	; 251
    5e7a:	90 e0       	ldi	r25, 0x00	; 0
    5e7c:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>
				UART_voidSendStringSync((u8*)"\r2-LED  ");
    5e80:	85 e0       	ldi	r24, 0x05	; 5
    5e82:	91 e0       	ldi	r25, 0x01	; 1
    5e84:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>
				UART_voidSendStringSync((u8*)" 3-Fan     \n");
    5e88:	8e e0       	ldi	r24, 0x0E	; 14
    5e8a:	91 e0       	ldi	r25, 0x01	; 1
    5e8c:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>


				CLCD_CLEAR();
    5e90:	0e 94 24 2c 	call	0x5848	; 0x5848 <CLCD_CLEAR>
				CLCD_voidSendString((u8*)"1-Door_C");
    5e94:	8b e1       	ldi	r24, 0x1B	; 27
    5e96:	91 e0       	ldi	r25, 0x01	; 1
    5e98:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
				CLCD_voidGOTO(1,2);
    5e9c:	81 e0       	ldi	r24, 0x01	; 1
    5e9e:	62 e0       	ldi	r22, 0x02	; 2
    5ea0:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <CLCD_voidGOTO>
				CLCD_voidSendString((u8*)"2-LED_C");
    5ea4:	84 e2       	ldi	r24, 0x24	; 36
    5ea6:	91 e0       	ldi	r25, 0x01	; 1
    5ea8:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>

				CLCD_voidSendString((u8*)" 3-FAN_C");
    5eac:	8c e2       	ldi	r24, 0x2C	; 44
    5eae:	91 e0       	ldi	r25, 0x01	; 1
    5eb0:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>

				choice=UART_u8ReciveDataSync();
    5eb4:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <UART_u8ReciveDataSync>
    5eb8:	fe 01       	movw	r30, r28
    5eba:	e1 56       	subi	r30, 0x61	; 97
    5ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ebe:	80 83       	st	Z, r24
				//UART_voidSendDataSync(choice);////////////


				if(choice=='1')
    5ec0:	fe 01       	movw	r30, r28
    5ec2:	e1 56       	subi	r30, 0x61	; 97
    5ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ec6:	80 81       	ld	r24, Z
    5ec8:	81 33       	cpi	r24, 0x31	; 49
    5eca:	09 f0       	breq	.+2      	; 0x5ece <main+0x512>
    5ecc:	b8 c1       	rjmp	.+880    	; 0x623e <main+0x882>
				{
					UART_voidSendStringSync((u8*)"\r1-Open Door\n");
    5ece:	85 e3       	ldi	r24, 0x35	; 53
    5ed0:	91 e0       	ldi	r25, 0x01	; 1
    5ed2:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>
					UART_voidSendStringSync((u8*)"\r2-Close Door   ");
    5ed6:	83 e4       	ldi	r24, 0x43	; 67
    5ed8:	91 e0       	ldi	r25, 0x01	; 1
    5eda:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>

					CLCD_CLEAR();
    5ede:	0e 94 24 2c 	call	0x5848	; 0x5848 <CLCD_CLEAR>
					CLCD_voidSendString((u8*)"1-Open Door");
    5ee2:	84 e5       	ldi	r24, 0x54	; 84
    5ee4:	91 e0       	ldi	r25, 0x01	; 1
    5ee6:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
					CLCD_voidGOTO(1,2);
    5eea:	81 e0       	ldi	r24, 0x01	; 1
    5eec:	62 e0       	ldi	r22, 0x02	; 2
    5eee:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <CLCD_voidGOTO>
					CLCD_voidSendString((u8*)"2-Close Door");
    5ef2:	80 e6       	ldi	r24, 0x60	; 96
    5ef4:	91 e0       	ldi	r25, 0x01	; 1
    5ef6:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
					u8 choice2=UART_u8ReciveDataSync();
    5efa:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <UART_u8ReciveDataSync>
    5efe:	fe 01       	movw	r30, r28
    5f00:	e3 56       	subi	r30, 0x63	; 99
    5f02:	ff 4f       	sbci	r31, 0xFF	; 255
    5f04:	80 83       	st	Z, r24
					//	UART_voidSendDataSync(choice2);
					if(choice2=='1')
    5f06:	fe 01       	movw	r30, r28
    5f08:	e3 56       	subi	r30, 0x63	; 99
    5f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f0c:	80 81       	ld	r24, Z
    5f0e:	81 33       	cpi	r24, 0x31	; 49
    5f10:	09 f0       	breq	.+2      	; 0x5f14 <main+0x558>
    5f12:	c7 c0       	rjmp	.+398    	; 0x60a2 <main+0x6e6>
					{

						Servo_voidSetAngle(90);
    5f14:	8a e5       	ldi	r24, 0x5A	; 90
    5f16:	90 e0       	ldi	r25, 0x00	; 0
    5f18:	0e 94 3b 23 	call	0x4676	; 0x4676 <Servo_voidSetAngle>
					//UART_voidSendStringSync((u8*)"\r-Door Is Open   ");
						CLCD_CLEAR();
    5f1c:	0e 94 24 2c 	call	0x5848	; 0x5848 <CLCD_CLEAR>
						CLCD_voidSendString((u8*)"Door Is");
    5f20:	8d e6       	ldi	r24, 0x6D	; 109
    5f22:	91 e0       	ldi	r25, 0x01	; 1
    5f24:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
						CLCD_voidGOTO(1,2);
    5f28:	81 e0       	ldi	r24, 0x01	; 1
    5f2a:	62 e0       	ldi	r22, 0x02	; 2
    5f2c:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <CLCD_voidGOTO>
						CLCD_voidSendString((u8*)"Open");
    5f30:	85 e7       	ldi	r24, 0x75	; 117
    5f32:	91 e0       	ldi	r25, 0x01	; 1
    5f34:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
    5f38:	fe 01       	movw	r30, r28
    5f3a:	e5 58       	subi	r30, 0x85	; 133
    5f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f3e:	80 e0       	ldi	r24, 0x00	; 0
    5f40:	90 e0       	ldi	r25, 0x00	; 0
    5f42:	aa ef       	ldi	r26, 0xFA	; 250
    5f44:	b3 e4       	ldi	r27, 0x43	; 67
    5f46:	80 83       	st	Z, r24
    5f48:	91 83       	std	Z+1, r25	; 0x01
    5f4a:	a2 83       	std	Z+2, r26	; 0x02
    5f4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f4e:	8e 01       	movw	r16, r28
    5f50:	09 58       	subi	r16, 0x89	; 137
    5f52:	1f 4f       	sbci	r17, 0xFF	; 255
    5f54:	fe 01       	movw	r30, r28
    5f56:	e5 58       	subi	r30, 0x85	; 133
    5f58:	ff 4f       	sbci	r31, 0xFF	; 255
    5f5a:	60 81       	ld	r22, Z
    5f5c:	71 81       	ldd	r23, Z+1	; 0x01
    5f5e:	82 81       	ldd	r24, Z+2	; 0x02
    5f60:	93 81       	ldd	r25, Z+3	; 0x03
    5f62:	20 e0       	ldi	r18, 0x00	; 0
    5f64:	30 e0       	ldi	r19, 0x00	; 0
    5f66:	4a ef       	ldi	r20, 0xFA	; 250
    5f68:	54 e4       	ldi	r21, 0x44	; 68
    5f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f6e:	dc 01       	movw	r26, r24
    5f70:	cb 01       	movw	r24, r22
    5f72:	f8 01       	movw	r30, r16
    5f74:	80 83       	st	Z, r24
    5f76:	91 83       	std	Z+1, r25	; 0x01
    5f78:	a2 83       	std	Z+2, r26	; 0x02
    5f7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5f7c:	fe 01       	movw	r30, r28
    5f7e:	e9 58       	subi	r30, 0x89	; 137
    5f80:	ff 4f       	sbci	r31, 0xFF	; 255
    5f82:	60 81       	ld	r22, Z
    5f84:	71 81       	ldd	r23, Z+1	; 0x01
    5f86:	82 81       	ldd	r24, Z+2	; 0x02
    5f88:	93 81       	ldd	r25, Z+3	; 0x03
    5f8a:	20 e0       	ldi	r18, 0x00	; 0
    5f8c:	30 e0       	ldi	r19, 0x00	; 0
    5f8e:	40 e8       	ldi	r20, 0x80	; 128
    5f90:	5f e3       	ldi	r21, 0x3F	; 63
    5f92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5f96:	88 23       	and	r24, r24
    5f98:	44 f4       	brge	.+16     	; 0x5faa <main+0x5ee>
		__ticks = 1;
    5f9a:	fe 01       	movw	r30, r28
    5f9c:	eb 58       	subi	r30, 0x8B	; 139
    5f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5fa0:	81 e0       	ldi	r24, 0x01	; 1
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	91 83       	std	Z+1, r25	; 0x01
    5fa6:	80 83       	st	Z, r24
    5fa8:	64 c0       	rjmp	.+200    	; 0x6072 <main+0x6b6>
	else if (__tmp > 65535)
    5faa:	fe 01       	movw	r30, r28
    5fac:	e9 58       	subi	r30, 0x89	; 137
    5fae:	ff 4f       	sbci	r31, 0xFF	; 255
    5fb0:	60 81       	ld	r22, Z
    5fb2:	71 81       	ldd	r23, Z+1	; 0x01
    5fb4:	82 81       	ldd	r24, Z+2	; 0x02
    5fb6:	93 81       	ldd	r25, Z+3	; 0x03
    5fb8:	20 e0       	ldi	r18, 0x00	; 0
    5fba:	3f ef       	ldi	r19, 0xFF	; 255
    5fbc:	4f e7       	ldi	r20, 0x7F	; 127
    5fbe:	57 e4       	ldi	r21, 0x47	; 71
    5fc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5fc4:	18 16       	cp	r1, r24
    5fc6:	0c f0       	brlt	.+2      	; 0x5fca <main+0x60e>
    5fc8:	43 c0       	rjmp	.+134    	; 0x6050 <main+0x694>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fca:	fe 01       	movw	r30, r28
    5fcc:	e5 58       	subi	r30, 0x85	; 133
    5fce:	ff 4f       	sbci	r31, 0xFF	; 255
    5fd0:	60 81       	ld	r22, Z
    5fd2:	71 81       	ldd	r23, Z+1	; 0x01
    5fd4:	82 81       	ldd	r24, Z+2	; 0x02
    5fd6:	93 81       	ldd	r25, Z+3	; 0x03
    5fd8:	20 e0       	ldi	r18, 0x00	; 0
    5fda:	30 e0       	ldi	r19, 0x00	; 0
    5fdc:	40 e2       	ldi	r20, 0x20	; 32
    5fde:	51 e4       	ldi	r21, 0x41	; 65
    5fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fe4:	dc 01       	movw	r26, r24
    5fe6:	cb 01       	movw	r24, r22
    5fe8:	8e 01       	movw	r16, r28
    5fea:	0b 58       	subi	r16, 0x8B	; 139
    5fec:	1f 4f       	sbci	r17, 0xFF	; 255
    5fee:	bc 01       	movw	r22, r24
    5ff0:	cd 01       	movw	r24, r26
    5ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ff6:	dc 01       	movw	r26, r24
    5ff8:	cb 01       	movw	r24, r22
    5ffa:	f8 01       	movw	r30, r16
    5ffc:	91 83       	std	Z+1, r25	; 0x01
    5ffe:	80 83       	st	Z, r24
    6000:	1f c0       	rjmp	.+62     	; 0x6040 <main+0x684>
    6002:	fe 01       	movw	r30, r28
    6004:	ed 58       	subi	r30, 0x8D	; 141
    6006:	ff 4f       	sbci	r31, 0xFF	; 255
    6008:	88 ec       	ldi	r24, 0xC8	; 200
    600a:	90 e0       	ldi	r25, 0x00	; 0
    600c:	91 83       	std	Z+1, r25	; 0x01
    600e:	80 83       	st	Z, r24
    6010:	fe 01       	movw	r30, r28
    6012:	ed 58       	subi	r30, 0x8D	; 141
    6014:	ff 4f       	sbci	r31, 0xFF	; 255
    6016:	80 81       	ld	r24, Z
    6018:	91 81       	ldd	r25, Z+1	; 0x01
    601a:	01 97       	sbiw	r24, 0x01	; 1
    601c:	f1 f7       	brne	.-4      	; 0x601a <main+0x65e>
    601e:	fe 01       	movw	r30, r28
    6020:	ed 58       	subi	r30, 0x8D	; 141
    6022:	ff 4f       	sbci	r31, 0xFF	; 255
    6024:	91 83       	std	Z+1, r25	; 0x01
    6026:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6028:	de 01       	movw	r26, r28
    602a:	ab 58       	subi	r26, 0x8B	; 139
    602c:	bf 4f       	sbci	r27, 0xFF	; 255
    602e:	fe 01       	movw	r30, r28
    6030:	eb 58       	subi	r30, 0x8B	; 139
    6032:	ff 4f       	sbci	r31, 0xFF	; 255
    6034:	80 81       	ld	r24, Z
    6036:	91 81       	ldd	r25, Z+1	; 0x01
    6038:	01 97       	sbiw	r24, 0x01	; 1
    603a:	11 96       	adiw	r26, 0x01	; 1
    603c:	9c 93       	st	X, r25
    603e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6040:	fe 01       	movw	r30, r28
    6042:	eb 58       	subi	r30, 0x8B	; 139
    6044:	ff 4f       	sbci	r31, 0xFF	; 255
    6046:	80 81       	ld	r24, Z
    6048:	91 81       	ldd	r25, Z+1	; 0x01
    604a:	00 97       	sbiw	r24, 0x00	; 0
    604c:	d1 f6       	brne	.-76     	; 0x6002 <main+0x646>
    604e:	0e c4       	rjmp	.+2076   	; 0x686c <main+0xeb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6050:	8e 01       	movw	r16, r28
    6052:	0b 58       	subi	r16, 0x8B	; 139
    6054:	1f 4f       	sbci	r17, 0xFF	; 255
    6056:	fe 01       	movw	r30, r28
    6058:	e9 58       	subi	r30, 0x89	; 137
    605a:	ff 4f       	sbci	r31, 0xFF	; 255
    605c:	60 81       	ld	r22, Z
    605e:	71 81       	ldd	r23, Z+1	; 0x01
    6060:	82 81       	ldd	r24, Z+2	; 0x02
    6062:	93 81       	ldd	r25, Z+3	; 0x03
    6064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6068:	dc 01       	movw	r26, r24
    606a:	cb 01       	movw	r24, r22
    606c:	f8 01       	movw	r30, r16
    606e:	91 83       	std	Z+1, r25	; 0x01
    6070:	80 83       	st	Z, r24
    6072:	de 01       	movw	r26, r28
    6074:	af 58       	subi	r26, 0x8F	; 143
    6076:	bf 4f       	sbci	r27, 0xFF	; 255
    6078:	fe 01       	movw	r30, r28
    607a:	eb 58       	subi	r30, 0x8B	; 139
    607c:	ff 4f       	sbci	r31, 0xFF	; 255
    607e:	80 81       	ld	r24, Z
    6080:	91 81       	ldd	r25, Z+1	; 0x01
    6082:	11 96       	adiw	r26, 0x01	; 1
    6084:	9c 93       	st	X, r25
    6086:	8e 93       	st	-X, r24
    6088:	fe 01       	movw	r30, r28
    608a:	ef 58       	subi	r30, 0x8F	; 143
    608c:	ff 4f       	sbci	r31, 0xFF	; 255
    608e:	80 81       	ld	r24, Z
    6090:	91 81       	ldd	r25, Z+1	; 0x01
    6092:	01 97       	sbiw	r24, 0x01	; 1
    6094:	f1 f7       	brne	.-4      	; 0x6092 <main+0x6d6>
    6096:	fe 01       	movw	r30, r28
    6098:	ef 58       	subi	r30, 0x8F	; 143
    609a:	ff 4f       	sbci	r31, 0xFF	; 255
    609c:	91 83       	std	Z+1, r25	; 0x01
    609e:	80 83       	st	Z, r24
    60a0:	e5 c3       	rjmp	.+1994   	; 0x686c <main+0xeb0>
						_delay_ms(500);

					}else if(choice2=='2')
    60a2:	fe 01       	movw	r30, r28
    60a4:	e3 56       	subi	r30, 0x63	; 99
    60a6:	ff 4f       	sbci	r31, 0xFF	; 255
    60a8:	80 81       	ld	r24, Z
    60aa:	82 33       	cpi	r24, 0x32	; 50
    60ac:	09 f0       	breq	.+2      	; 0x60b0 <main+0x6f4>
    60ae:	de c3       	rjmp	.+1980   	; 0x686c <main+0xeb0>
					{
						Servo_voidSetAngle(0);
    60b0:	80 e0       	ldi	r24, 0x00	; 0
    60b2:	90 e0       	ldi	r25, 0x00	; 0
    60b4:	0e 94 3b 23 	call	0x4676	; 0x4676 <Servo_voidSetAngle>
					//	UART_voidSendStringSync((u8*)"\r-Door Is Closed\n");
						CLCD_CLEAR();
    60b8:	0e 94 24 2c 	call	0x5848	; 0x5848 <CLCD_CLEAR>
						CLCD_voidSendString((u8*)"Door Is");
    60bc:	8d e6       	ldi	r24, 0x6D	; 109
    60be:	91 e0       	ldi	r25, 0x01	; 1
    60c0:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
						CLCD_voidGOTO(1,2);
    60c4:	81 e0       	ldi	r24, 0x01	; 1
    60c6:	62 e0       	ldi	r22, 0x02	; 2
    60c8:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <CLCD_voidGOTO>
						CLCD_voidSendString((u8*)"Closed");
    60cc:	8a e7       	ldi	r24, 0x7A	; 122
    60ce:	91 e0       	ldi	r25, 0x01	; 1
    60d0:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
    60d4:	fe 01       	movw	r30, r28
    60d6:	e3 59       	subi	r30, 0x93	; 147
    60d8:	ff 4f       	sbci	r31, 0xFF	; 255
    60da:	80 e0       	ldi	r24, 0x00	; 0
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	aa ef       	ldi	r26, 0xFA	; 250
    60e0:	b3 e4       	ldi	r27, 0x43	; 67
    60e2:	80 83       	st	Z, r24
    60e4:	91 83       	std	Z+1, r25	; 0x01
    60e6:	a2 83       	std	Z+2, r26	; 0x02
    60e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60ea:	8e 01       	movw	r16, r28
    60ec:	07 59       	subi	r16, 0x97	; 151
    60ee:	1f 4f       	sbci	r17, 0xFF	; 255
    60f0:	fe 01       	movw	r30, r28
    60f2:	e3 59       	subi	r30, 0x93	; 147
    60f4:	ff 4f       	sbci	r31, 0xFF	; 255
    60f6:	60 81       	ld	r22, Z
    60f8:	71 81       	ldd	r23, Z+1	; 0x01
    60fa:	82 81       	ldd	r24, Z+2	; 0x02
    60fc:	93 81       	ldd	r25, Z+3	; 0x03
    60fe:	20 e0       	ldi	r18, 0x00	; 0
    6100:	30 e0       	ldi	r19, 0x00	; 0
    6102:	4a ef       	ldi	r20, 0xFA	; 250
    6104:	54 e4       	ldi	r21, 0x44	; 68
    6106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    610a:	dc 01       	movw	r26, r24
    610c:	cb 01       	movw	r24, r22
    610e:	f8 01       	movw	r30, r16
    6110:	80 83       	st	Z, r24
    6112:	91 83       	std	Z+1, r25	; 0x01
    6114:	a2 83       	std	Z+2, r26	; 0x02
    6116:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6118:	fe 01       	movw	r30, r28
    611a:	e7 59       	subi	r30, 0x97	; 151
    611c:	ff 4f       	sbci	r31, 0xFF	; 255
    611e:	60 81       	ld	r22, Z
    6120:	71 81       	ldd	r23, Z+1	; 0x01
    6122:	82 81       	ldd	r24, Z+2	; 0x02
    6124:	93 81       	ldd	r25, Z+3	; 0x03
    6126:	20 e0       	ldi	r18, 0x00	; 0
    6128:	30 e0       	ldi	r19, 0x00	; 0
    612a:	40 e8       	ldi	r20, 0x80	; 128
    612c:	5f e3       	ldi	r21, 0x3F	; 63
    612e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6132:	88 23       	and	r24, r24
    6134:	44 f4       	brge	.+16     	; 0x6146 <main+0x78a>
		__ticks = 1;
    6136:	fe 01       	movw	r30, r28
    6138:	e9 59       	subi	r30, 0x99	; 153
    613a:	ff 4f       	sbci	r31, 0xFF	; 255
    613c:	81 e0       	ldi	r24, 0x01	; 1
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	91 83       	std	Z+1, r25	; 0x01
    6142:	80 83       	st	Z, r24
    6144:	64 c0       	rjmp	.+200    	; 0x620e <main+0x852>
	else if (__tmp > 65535)
    6146:	fe 01       	movw	r30, r28
    6148:	e7 59       	subi	r30, 0x97	; 151
    614a:	ff 4f       	sbci	r31, 0xFF	; 255
    614c:	60 81       	ld	r22, Z
    614e:	71 81       	ldd	r23, Z+1	; 0x01
    6150:	82 81       	ldd	r24, Z+2	; 0x02
    6152:	93 81       	ldd	r25, Z+3	; 0x03
    6154:	20 e0       	ldi	r18, 0x00	; 0
    6156:	3f ef       	ldi	r19, 0xFF	; 255
    6158:	4f e7       	ldi	r20, 0x7F	; 127
    615a:	57 e4       	ldi	r21, 0x47	; 71
    615c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6160:	18 16       	cp	r1, r24
    6162:	0c f0       	brlt	.+2      	; 0x6166 <main+0x7aa>
    6164:	43 c0       	rjmp	.+134    	; 0x61ec <main+0x830>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6166:	fe 01       	movw	r30, r28
    6168:	e3 59       	subi	r30, 0x93	; 147
    616a:	ff 4f       	sbci	r31, 0xFF	; 255
    616c:	60 81       	ld	r22, Z
    616e:	71 81       	ldd	r23, Z+1	; 0x01
    6170:	82 81       	ldd	r24, Z+2	; 0x02
    6172:	93 81       	ldd	r25, Z+3	; 0x03
    6174:	20 e0       	ldi	r18, 0x00	; 0
    6176:	30 e0       	ldi	r19, 0x00	; 0
    6178:	40 e2       	ldi	r20, 0x20	; 32
    617a:	51 e4       	ldi	r21, 0x41	; 65
    617c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6180:	dc 01       	movw	r26, r24
    6182:	cb 01       	movw	r24, r22
    6184:	8e 01       	movw	r16, r28
    6186:	09 59       	subi	r16, 0x99	; 153
    6188:	1f 4f       	sbci	r17, 0xFF	; 255
    618a:	bc 01       	movw	r22, r24
    618c:	cd 01       	movw	r24, r26
    618e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6192:	dc 01       	movw	r26, r24
    6194:	cb 01       	movw	r24, r22
    6196:	f8 01       	movw	r30, r16
    6198:	91 83       	std	Z+1, r25	; 0x01
    619a:	80 83       	st	Z, r24
    619c:	1f c0       	rjmp	.+62     	; 0x61dc <main+0x820>
    619e:	fe 01       	movw	r30, r28
    61a0:	eb 59       	subi	r30, 0x9B	; 155
    61a2:	ff 4f       	sbci	r31, 0xFF	; 255
    61a4:	88 ec       	ldi	r24, 0xC8	; 200
    61a6:	90 e0       	ldi	r25, 0x00	; 0
    61a8:	91 83       	std	Z+1, r25	; 0x01
    61aa:	80 83       	st	Z, r24
    61ac:	fe 01       	movw	r30, r28
    61ae:	eb 59       	subi	r30, 0x9B	; 155
    61b0:	ff 4f       	sbci	r31, 0xFF	; 255
    61b2:	80 81       	ld	r24, Z
    61b4:	91 81       	ldd	r25, Z+1	; 0x01
    61b6:	01 97       	sbiw	r24, 0x01	; 1
    61b8:	f1 f7       	brne	.-4      	; 0x61b6 <main+0x7fa>
    61ba:	fe 01       	movw	r30, r28
    61bc:	eb 59       	subi	r30, 0x9B	; 155
    61be:	ff 4f       	sbci	r31, 0xFF	; 255
    61c0:	91 83       	std	Z+1, r25	; 0x01
    61c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61c4:	de 01       	movw	r26, r28
    61c6:	a9 59       	subi	r26, 0x99	; 153
    61c8:	bf 4f       	sbci	r27, 0xFF	; 255
    61ca:	fe 01       	movw	r30, r28
    61cc:	e9 59       	subi	r30, 0x99	; 153
    61ce:	ff 4f       	sbci	r31, 0xFF	; 255
    61d0:	80 81       	ld	r24, Z
    61d2:	91 81       	ldd	r25, Z+1	; 0x01
    61d4:	01 97       	sbiw	r24, 0x01	; 1
    61d6:	11 96       	adiw	r26, 0x01	; 1
    61d8:	9c 93       	st	X, r25
    61da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61dc:	fe 01       	movw	r30, r28
    61de:	e9 59       	subi	r30, 0x99	; 153
    61e0:	ff 4f       	sbci	r31, 0xFF	; 255
    61e2:	80 81       	ld	r24, Z
    61e4:	91 81       	ldd	r25, Z+1	; 0x01
    61e6:	00 97       	sbiw	r24, 0x00	; 0
    61e8:	d1 f6       	brne	.-76     	; 0x619e <main+0x7e2>
    61ea:	40 c3       	rjmp	.+1664   	; 0x686c <main+0xeb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61ec:	8e 01       	movw	r16, r28
    61ee:	09 59       	subi	r16, 0x99	; 153
    61f0:	1f 4f       	sbci	r17, 0xFF	; 255
    61f2:	fe 01       	movw	r30, r28
    61f4:	e7 59       	subi	r30, 0x97	; 151
    61f6:	ff 4f       	sbci	r31, 0xFF	; 255
    61f8:	60 81       	ld	r22, Z
    61fa:	71 81       	ldd	r23, Z+1	; 0x01
    61fc:	82 81       	ldd	r24, Z+2	; 0x02
    61fe:	93 81       	ldd	r25, Z+3	; 0x03
    6200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6204:	dc 01       	movw	r26, r24
    6206:	cb 01       	movw	r24, r22
    6208:	f8 01       	movw	r30, r16
    620a:	91 83       	std	Z+1, r25	; 0x01
    620c:	80 83       	st	Z, r24
    620e:	de 01       	movw	r26, r28
    6210:	ad 59       	subi	r26, 0x9D	; 157
    6212:	bf 4f       	sbci	r27, 0xFF	; 255
    6214:	fe 01       	movw	r30, r28
    6216:	e9 59       	subi	r30, 0x99	; 153
    6218:	ff 4f       	sbci	r31, 0xFF	; 255
    621a:	80 81       	ld	r24, Z
    621c:	91 81       	ldd	r25, Z+1	; 0x01
    621e:	11 96       	adiw	r26, 0x01	; 1
    6220:	9c 93       	st	X, r25
    6222:	8e 93       	st	-X, r24
    6224:	fe 01       	movw	r30, r28
    6226:	ed 59       	subi	r30, 0x9D	; 157
    6228:	ff 4f       	sbci	r31, 0xFF	; 255
    622a:	80 81       	ld	r24, Z
    622c:	91 81       	ldd	r25, Z+1	; 0x01
    622e:	01 97       	sbiw	r24, 0x01	; 1
    6230:	f1 f7       	brne	.-4      	; 0x622e <main+0x872>
    6232:	fe 01       	movw	r30, r28
    6234:	ed 59       	subi	r30, 0x9D	; 157
    6236:	ff 4f       	sbci	r31, 0xFF	; 255
    6238:	91 83       	std	Z+1, r25	; 0x01
    623a:	80 83       	st	Z, r24
    623c:	17 c3       	rjmp	.+1582   	; 0x686c <main+0xeb0>
						_delay_ms(500);
					}



				}else if (choice=='2')
    623e:	fe 01       	movw	r30, r28
    6240:	e1 56       	subi	r30, 0x61	; 97
    6242:	ff 4f       	sbci	r31, 0xFF	; 255
    6244:	80 81       	ld	r24, Z
    6246:	82 33       	cpi	r24, 0x32	; 50
    6248:	09 f0       	breq	.+2      	; 0x624c <main+0x890>
    624a:	b8 c1       	rjmp	.+880    	; 0x65bc <main+0xc00>
				{

					UART_voidSendStringSync((u8*)"\r1-LED ON\n");
    624c:	81 e8       	ldi	r24, 0x81	; 129
    624e:	91 e0       	ldi	r25, 0x01	; 1
    6250:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>
					UART_voidSendStringSync((u8*)"\r2-LED OFF    ");
    6254:	8c e8       	ldi	r24, 0x8C	; 140
    6256:	91 e0       	ldi	r25, 0x01	; 1
    6258:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>
					CLCD_CLEAR();
    625c:	0e 94 24 2c 	call	0x5848	; 0x5848 <CLCD_CLEAR>
					CLCD_voidSendString((u8*)"1-LED ON");
    6260:	8b e9       	ldi	r24, 0x9B	; 155
    6262:	91 e0       	ldi	r25, 0x01	; 1
    6264:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
					CLCD_voidGOTO(1,2);
    6268:	81 e0       	ldi	r24, 0x01	; 1
    626a:	62 e0       	ldi	r22, 0x02	; 2
    626c:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <CLCD_voidGOTO>
					CLCD_voidSendString((u8*)"2-LED OFF");
    6270:	84 ea       	ldi	r24, 0xA4	; 164
    6272:	91 e0       	ldi	r25, 0x01	; 1
    6274:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
					u8 choice2=UART_u8ReciveDataSync();
    6278:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <UART_u8ReciveDataSync>
    627c:	fe 01       	movw	r30, r28
    627e:	e4 56       	subi	r30, 0x64	; 100
    6280:	ff 4f       	sbci	r31, 0xFF	; 255
    6282:	80 83       	st	Z, r24
					//UART_voidSendDataSync(choice2);
					if(choice2=='1')
    6284:	fe 01       	movw	r30, r28
    6286:	e4 56       	subi	r30, 0x64	; 100
    6288:	ff 4f       	sbci	r31, 0xFF	; 255
    628a:	80 81       	ld	r24, Z
    628c:	81 33       	cpi	r24, 0x31	; 49
    628e:	09 f0       	breq	.+2      	; 0x6292 <main+0x8d6>
    6290:	c7 c0       	rjmp	.+398    	; 0x6420 <main+0xa64>
					{

						DIO_voidSetPortValue(DIO_PORTA,DIO_PORT_OUTPUT);
    6292:	80 e0       	ldi	r24, 0x00	; 0
    6294:	6f ef       	ldi	r22, 0xFF	; 255
    6296:	0e 94 3c 11 	call	0x2278	; 0x2278 <DIO_voidSetPortValue>
						CLCD_CLEAR();
    629a:	0e 94 24 2c 	call	0x5848	; 0x5848 <CLCD_CLEAR>
						CLCD_voidSendString((u8*)"LED Is");
    629e:	8e ea       	ldi	r24, 0xAE	; 174
    62a0:	91 e0       	ldi	r25, 0x01	; 1
    62a2:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
						CLCD_voidGOTO(1,2);
    62a6:	81 e0       	ldi	r24, 0x01	; 1
    62a8:	62 e0       	ldi	r22, 0x02	; 2
    62aa:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <CLCD_voidGOTO>
						CLCD_voidSendString((u8*)"ON");
    62ae:	85 eb       	ldi	r24, 0xB5	; 181
    62b0:	91 e0       	ldi	r25, 0x01	; 1
    62b2:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
    62b6:	fe 01       	movw	r30, r28
    62b8:	e1 5a       	subi	r30, 0xA1	; 161
    62ba:	ff 4f       	sbci	r31, 0xFF	; 255
    62bc:	80 e0       	ldi	r24, 0x00	; 0
    62be:	90 e0       	ldi	r25, 0x00	; 0
    62c0:	aa ef       	ldi	r26, 0xFA	; 250
    62c2:	b3 e4       	ldi	r27, 0x43	; 67
    62c4:	80 83       	st	Z, r24
    62c6:	91 83       	std	Z+1, r25	; 0x01
    62c8:	a2 83       	std	Z+2, r26	; 0x02
    62ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62cc:	8e 01       	movw	r16, r28
    62ce:	05 5a       	subi	r16, 0xA5	; 165
    62d0:	1f 4f       	sbci	r17, 0xFF	; 255
    62d2:	fe 01       	movw	r30, r28
    62d4:	e1 5a       	subi	r30, 0xA1	; 161
    62d6:	ff 4f       	sbci	r31, 0xFF	; 255
    62d8:	60 81       	ld	r22, Z
    62da:	71 81       	ldd	r23, Z+1	; 0x01
    62dc:	82 81       	ldd	r24, Z+2	; 0x02
    62de:	93 81       	ldd	r25, Z+3	; 0x03
    62e0:	20 e0       	ldi	r18, 0x00	; 0
    62e2:	30 e0       	ldi	r19, 0x00	; 0
    62e4:	4a ef       	ldi	r20, 0xFA	; 250
    62e6:	54 e4       	ldi	r21, 0x44	; 68
    62e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62ec:	dc 01       	movw	r26, r24
    62ee:	cb 01       	movw	r24, r22
    62f0:	f8 01       	movw	r30, r16
    62f2:	80 83       	st	Z, r24
    62f4:	91 83       	std	Z+1, r25	; 0x01
    62f6:	a2 83       	std	Z+2, r26	; 0x02
    62f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    62fa:	fe 01       	movw	r30, r28
    62fc:	e5 5a       	subi	r30, 0xA5	; 165
    62fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6300:	60 81       	ld	r22, Z
    6302:	71 81       	ldd	r23, Z+1	; 0x01
    6304:	82 81       	ldd	r24, Z+2	; 0x02
    6306:	93 81       	ldd	r25, Z+3	; 0x03
    6308:	20 e0       	ldi	r18, 0x00	; 0
    630a:	30 e0       	ldi	r19, 0x00	; 0
    630c:	40 e8       	ldi	r20, 0x80	; 128
    630e:	5f e3       	ldi	r21, 0x3F	; 63
    6310:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6314:	88 23       	and	r24, r24
    6316:	44 f4       	brge	.+16     	; 0x6328 <main+0x96c>
		__ticks = 1;
    6318:	fe 01       	movw	r30, r28
    631a:	e7 5a       	subi	r30, 0xA7	; 167
    631c:	ff 4f       	sbci	r31, 0xFF	; 255
    631e:	81 e0       	ldi	r24, 0x01	; 1
    6320:	90 e0       	ldi	r25, 0x00	; 0
    6322:	91 83       	std	Z+1, r25	; 0x01
    6324:	80 83       	st	Z, r24
    6326:	64 c0       	rjmp	.+200    	; 0x63f0 <main+0xa34>
	else if (__tmp > 65535)
    6328:	fe 01       	movw	r30, r28
    632a:	e5 5a       	subi	r30, 0xA5	; 165
    632c:	ff 4f       	sbci	r31, 0xFF	; 255
    632e:	60 81       	ld	r22, Z
    6330:	71 81       	ldd	r23, Z+1	; 0x01
    6332:	82 81       	ldd	r24, Z+2	; 0x02
    6334:	93 81       	ldd	r25, Z+3	; 0x03
    6336:	20 e0       	ldi	r18, 0x00	; 0
    6338:	3f ef       	ldi	r19, 0xFF	; 255
    633a:	4f e7       	ldi	r20, 0x7F	; 127
    633c:	57 e4       	ldi	r21, 0x47	; 71
    633e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6342:	18 16       	cp	r1, r24
    6344:	0c f0       	brlt	.+2      	; 0x6348 <main+0x98c>
    6346:	43 c0       	rjmp	.+134    	; 0x63ce <main+0xa12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6348:	fe 01       	movw	r30, r28
    634a:	e1 5a       	subi	r30, 0xA1	; 161
    634c:	ff 4f       	sbci	r31, 0xFF	; 255
    634e:	60 81       	ld	r22, Z
    6350:	71 81       	ldd	r23, Z+1	; 0x01
    6352:	82 81       	ldd	r24, Z+2	; 0x02
    6354:	93 81       	ldd	r25, Z+3	; 0x03
    6356:	20 e0       	ldi	r18, 0x00	; 0
    6358:	30 e0       	ldi	r19, 0x00	; 0
    635a:	40 e2       	ldi	r20, 0x20	; 32
    635c:	51 e4       	ldi	r21, 0x41	; 65
    635e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6362:	dc 01       	movw	r26, r24
    6364:	cb 01       	movw	r24, r22
    6366:	8e 01       	movw	r16, r28
    6368:	07 5a       	subi	r16, 0xA7	; 167
    636a:	1f 4f       	sbci	r17, 0xFF	; 255
    636c:	bc 01       	movw	r22, r24
    636e:	cd 01       	movw	r24, r26
    6370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6374:	dc 01       	movw	r26, r24
    6376:	cb 01       	movw	r24, r22
    6378:	f8 01       	movw	r30, r16
    637a:	91 83       	std	Z+1, r25	; 0x01
    637c:	80 83       	st	Z, r24
    637e:	1f c0       	rjmp	.+62     	; 0x63be <main+0xa02>
    6380:	fe 01       	movw	r30, r28
    6382:	e9 5a       	subi	r30, 0xA9	; 169
    6384:	ff 4f       	sbci	r31, 0xFF	; 255
    6386:	88 ec       	ldi	r24, 0xC8	; 200
    6388:	90 e0       	ldi	r25, 0x00	; 0
    638a:	91 83       	std	Z+1, r25	; 0x01
    638c:	80 83       	st	Z, r24
    638e:	fe 01       	movw	r30, r28
    6390:	e9 5a       	subi	r30, 0xA9	; 169
    6392:	ff 4f       	sbci	r31, 0xFF	; 255
    6394:	80 81       	ld	r24, Z
    6396:	91 81       	ldd	r25, Z+1	; 0x01
    6398:	01 97       	sbiw	r24, 0x01	; 1
    639a:	f1 f7       	brne	.-4      	; 0x6398 <main+0x9dc>
    639c:	fe 01       	movw	r30, r28
    639e:	e9 5a       	subi	r30, 0xA9	; 169
    63a0:	ff 4f       	sbci	r31, 0xFF	; 255
    63a2:	91 83       	std	Z+1, r25	; 0x01
    63a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63a6:	de 01       	movw	r26, r28
    63a8:	a7 5a       	subi	r26, 0xA7	; 167
    63aa:	bf 4f       	sbci	r27, 0xFF	; 255
    63ac:	fe 01       	movw	r30, r28
    63ae:	e7 5a       	subi	r30, 0xA7	; 167
    63b0:	ff 4f       	sbci	r31, 0xFF	; 255
    63b2:	80 81       	ld	r24, Z
    63b4:	91 81       	ldd	r25, Z+1	; 0x01
    63b6:	01 97       	sbiw	r24, 0x01	; 1
    63b8:	11 96       	adiw	r26, 0x01	; 1
    63ba:	9c 93       	st	X, r25
    63bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63be:	fe 01       	movw	r30, r28
    63c0:	e7 5a       	subi	r30, 0xA7	; 167
    63c2:	ff 4f       	sbci	r31, 0xFF	; 255
    63c4:	80 81       	ld	r24, Z
    63c6:	91 81       	ldd	r25, Z+1	; 0x01
    63c8:	00 97       	sbiw	r24, 0x00	; 0
    63ca:	d1 f6       	brne	.-76     	; 0x6380 <main+0x9c4>
    63cc:	4f c2       	rjmp	.+1182   	; 0x686c <main+0xeb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63ce:	8e 01       	movw	r16, r28
    63d0:	07 5a       	subi	r16, 0xA7	; 167
    63d2:	1f 4f       	sbci	r17, 0xFF	; 255
    63d4:	fe 01       	movw	r30, r28
    63d6:	e5 5a       	subi	r30, 0xA5	; 165
    63d8:	ff 4f       	sbci	r31, 0xFF	; 255
    63da:	60 81       	ld	r22, Z
    63dc:	71 81       	ldd	r23, Z+1	; 0x01
    63de:	82 81       	ldd	r24, Z+2	; 0x02
    63e0:	93 81       	ldd	r25, Z+3	; 0x03
    63e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63e6:	dc 01       	movw	r26, r24
    63e8:	cb 01       	movw	r24, r22
    63ea:	f8 01       	movw	r30, r16
    63ec:	91 83       	std	Z+1, r25	; 0x01
    63ee:	80 83       	st	Z, r24
    63f0:	de 01       	movw	r26, r28
    63f2:	ab 5a       	subi	r26, 0xAB	; 171
    63f4:	bf 4f       	sbci	r27, 0xFF	; 255
    63f6:	fe 01       	movw	r30, r28
    63f8:	e7 5a       	subi	r30, 0xA7	; 167
    63fa:	ff 4f       	sbci	r31, 0xFF	; 255
    63fc:	80 81       	ld	r24, Z
    63fe:	91 81       	ldd	r25, Z+1	; 0x01
    6400:	11 96       	adiw	r26, 0x01	; 1
    6402:	9c 93       	st	X, r25
    6404:	8e 93       	st	-X, r24
    6406:	fe 01       	movw	r30, r28
    6408:	eb 5a       	subi	r30, 0xAB	; 171
    640a:	ff 4f       	sbci	r31, 0xFF	; 255
    640c:	80 81       	ld	r24, Z
    640e:	91 81       	ldd	r25, Z+1	; 0x01
    6410:	01 97       	sbiw	r24, 0x01	; 1
    6412:	f1 f7       	brne	.-4      	; 0x6410 <main+0xa54>
    6414:	fe 01       	movw	r30, r28
    6416:	eb 5a       	subi	r30, 0xAB	; 171
    6418:	ff 4f       	sbci	r31, 0xFF	; 255
    641a:	91 83       	std	Z+1, r25	; 0x01
    641c:	80 83       	st	Z, r24
    641e:	26 c2       	rjmp	.+1100   	; 0x686c <main+0xeb0>
						_delay_ms(500);

					}else if(choice2=='2')
    6420:	fe 01       	movw	r30, r28
    6422:	e4 56       	subi	r30, 0x64	; 100
    6424:	ff 4f       	sbci	r31, 0xFF	; 255
    6426:	80 81       	ld	r24, Z
    6428:	82 33       	cpi	r24, 0x32	; 50
    642a:	09 f0       	breq	.+2      	; 0x642e <main+0xa72>
    642c:	1f c2       	rjmp	.+1086   	; 0x686c <main+0xeb0>
					{
						DIO_voidSetPortValue(DIO_PORTA,DIO_PORT_LOW);
    642e:	80 e0       	ldi	r24, 0x00	; 0
    6430:	60 e0       	ldi	r22, 0x00	; 0
    6432:	0e 94 3c 11 	call	0x2278	; 0x2278 <DIO_voidSetPortValue>
						CLCD_CLEAR();
    6436:	0e 94 24 2c 	call	0x5848	; 0x5848 <CLCD_CLEAR>
						CLCD_voidSendString((u8*)"LED Is");
    643a:	8e ea       	ldi	r24, 0xAE	; 174
    643c:	91 e0       	ldi	r25, 0x01	; 1
    643e:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
						CLCD_voidGOTO(1,2);
    6442:	81 e0       	ldi	r24, 0x01	; 1
    6444:	62 e0       	ldi	r22, 0x02	; 2
    6446:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <CLCD_voidGOTO>
						CLCD_voidSendString((u8*)"OFF");
    644a:	88 eb       	ldi	r24, 0xB8	; 184
    644c:	91 e0       	ldi	r25, 0x01	; 1
    644e:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
    6452:	fe 01       	movw	r30, r28
    6454:	ef 5a       	subi	r30, 0xAF	; 175
    6456:	ff 4f       	sbci	r31, 0xFF	; 255
    6458:	80 e0       	ldi	r24, 0x00	; 0
    645a:	90 e0       	ldi	r25, 0x00	; 0
    645c:	aa ef       	ldi	r26, 0xFA	; 250
    645e:	b3 e4       	ldi	r27, 0x43	; 67
    6460:	80 83       	st	Z, r24
    6462:	91 83       	std	Z+1, r25	; 0x01
    6464:	a2 83       	std	Z+2, r26	; 0x02
    6466:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6468:	8e 01       	movw	r16, r28
    646a:	03 5b       	subi	r16, 0xB3	; 179
    646c:	1f 4f       	sbci	r17, 0xFF	; 255
    646e:	fe 01       	movw	r30, r28
    6470:	ef 5a       	subi	r30, 0xAF	; 175
    6472:	ff 4f       	sbci	r31, 0xFF	; 255
    6474:	60 81       	ld	r22, Z
    6476:	71 81       	ldd	r23, Z+1	; 0x01
    6478:	82 81       	ldd	r24, Z+2	; 0x02
    647a:	93 81       	ldd	r25, Z+3	; 0x03
    647c:	20 e0       	ldi	r18, 0x00	; 0
    647e:	30 e0       	ldi	r19, 0x00	; 0
    6480:	4a ef       	ldi	r20, 0xFA	; 250
    6482:	54 e4       	ldi	r21, 0x44	; 68
    6484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6488:	dc 01       	movw	r26, r24
    648a:	cb 01       	movw	r24, r22
    648c:	f8 01       	movw	r30, r16
    648e:	80 83       	st	Z, r24
    6490:	91 83       	std	Z+1, r25	; 0x01
    6492:	a2 83       	std	Z+2, r26	; 0x02
    6494:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6496:	fe 01       	movw	r30, r28
    6498:	e3 5b       	subi	r30, 0xB3	; 179
    649a:	ff 4f       	sbci	r31, 0xFF	; 255
    649c:	60 81       	ld	r22, Z
    649e:	71 81       	ldd	r23, Z+1	; 0x01
    64a0:	82 81       	ldd	r24, Z+2	; 0x02
    64a2:	93 81       	ldd	r25, Z+3	; 0x03
    64a4:	20 e0       	ldi	r18, 0x00	; 0
    64a6:	30 e0       	ldi	r19, 0x00	; 0
    64a8:	40 e8       	ldi	r20, 0x80	; 128
    64aa:	5f e3       	ldi	r21, 0x3F	; 63
    64ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    64b0:	88 23       	and	r24, r24
    64b2:	44 f4       	brge	.+16     	; 0x64c4 <main+0xb08>
		__ticks = 1;
    64b4:	fe 01       	movw	r30, r28
    64b6:	e5 5b       	subi	r30, 0xB5	; 181
    64b8:	ff 4f       	sbci	r31, 0xFF	; 255
    64ba:	81 e0       	ldi	r24, 0x01	; 1
    64bc:	90 e0       	ldi	r25, 0x00	; 0
    64be:	91 83       	std	Z+1, r25	; 0x01
    64c0:	80 83       	st	Z, r24
    64c2:	64 c0       	rjmp	.+200    	; 0x658c <main+0xbd0>
	else if (__tmp > 65535)
    64c4:	fe 01       	movw	r30, r28
    64c6:	e3 5b       	subi	r30, 0xB3	; 179
    64c8:	ff 4f       	sbci	r31, 0xFF	; 255
    64ca:	60 81       	ld	r22, Z
    64cc:	71 81       	ldd	r23, Z+1	; 0x01
    64ce:	82 81       	ldd	r24, Z+2	; 0x02
    64d0:	93 81       	ldd	r25, Z+3	; 0x03
    64d2:	20 e0       	ldi	r18, 0x00	; 0
    64d4:	3f ef       	ldi	r19, 0xFF	; 255
    64d6:	4f e7       	ldi	r20, 0x7F	; 127
    64d8:	57 e4       	ldi	r21, 0x47	; 71
    64da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    64de:	18 16       	cp	r1, r24
    64e0:	0c f0       	brlt	.+2      	; 0x64e4 <main+0xb28>
    64e2:	43 c0       	rjmp	.+134    	; 0x656a <main+0xbae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64e4:	fe 01       	movw	r30, r28
    64e6:	ef 5a       	subi	r30, 0xAF	; 175
    64e8:	ff 4f       	sbci	r31, 0xFF	; 255
    64ea:	60 81       	ld	r22, Z
    64ec:	71 81       	ldd	r23, Z+1	; 0x01
    64ee:	82 81       	ldd	r24, Z+2	; 0x02
    64f0:	93 81       	ldd	r25, Z+3	; 0x03
    64f2:	20 e0       	ldi	r18, 0x00	; 0
    64f4:	30 e0       	ldi	r19, 0x00	; 0
    64f6:	40 e2       	ldi	r20, 0x20	; 32
    64f8:	51 e4       	ldi	r21, 0x41	; 65
    64fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64fe:	dc 01       	movw	r26, r24
    6500:	cb 01       	movw	r24, r22
    6502:	8e 01       	movw	r16, r28
    6504:	05 5b       	subi	r16, 0xB5	; 181
    6506:	1f 4f       	sbci	r17, 0xFF	; 255
    6508:	bc 01       	movw	r22, r24
    650a:	cd 01       	movw	r24, r26
    650c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6510:	dc 01       	movw	r26, r24
    6512:	cb 01       	movw	r24, r22
    6514:	f8 01       	movw	r30, r16
    6516:	91 83       	std	Z+1, r25	; 0x01
    6518:	80 83       	st	Z, r24
    651a:	1f c0       	rjmp	.+62     	; 0x655a <main+0xb9e>
    651c:	fe 01       	movw	r30, r28
    651e:	e7 5b       	subi	r30, 0xB7	; 183
    6520:	ff 4f       	sbci	r31, 0xFF	; 255
    6522:	88 ec       	ldi	r24, 0xC8	; 200
    6524:	90 e0       	ldi	r25, 0x00	; 0
    6526:	91 83       	std	Z+1, r25	; 0x01
    6528:	80 83       	st	Z, r24
    652a:	fe 01       	movw	r30, r28
    652c:	e7 5b       	subi	r30, 0xB7	; 183
    652e:	ff 4f       	sbci	r31, 0xFF	; 255
    6530:	80 81       	ld	r24, Z
    6532:	91 81       	ldd	r25, Z+1	; 0x01
    6534:	01 97       	sbiw	r24, 0x01	; 1
    6536:	f1 f7       	brne	.-4      	; 0x6534 <main+0xb78>
    6538:	fe 01       	movw	r30, r28
    653a:	e7 5b       	subi	r30, 0xB7	; 183
    653c:	ff 4f       	sbci	r31, 0xFF	; 255
    653e:	91 83       	std	Z+1, r25	; 0x01
    6540:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6542:	de 01       	movw	r26, r28
    6544:	a5 5b       	subi	r26, 0xB5	; 181
    6546:	bf 4f       	sbci	r27, 0xFF	; 255
    6548:	fe 01       	movw	r30, r28
    654a:	e5 5b       	subi	r30, 0xB5	; 181
    654c:	ff 4f       	sbci	r31, 0xFF	; 255
    654e:	80 81       	ld	r24, Z
    6550:	91 81       	ldd	r25, Z+1	; 0x01
    6552:	01 97       	sbiw	r24, 0x01	; 1
    6554:	11 96       	adiw	r26, 0x01	; 1
    6556:	9c 93       	st	X, r25
    6558:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    655a:	fe 01       	movw	r30, r28
    655c:	e5 5b       	subi	r30, 0xB5	; 181
    655e:	ff 4f       	sbci	r31, 0xFF	; 255
    6560:	80 81       	ld	r24, Z
    6562:	91 81       	ldd	r25, Z+1	; 0x01
    6564:	00 97       	sbiw	r24, 0x00	; 0
    6566:	d1 f6       	brne	.-76     	; 0x651c <main+0xb60>
    6568:	81 c1       	rjmp	.+770    	; 0x686c <main+0xeb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    656a:	8e 01       	movw	r16, r28
    656c:	05 5b       	subi	r16, 0xB5	; 181
    656e:	1f 4f       	sbci	r17, 0xFF	; 255
    6570:	fe 01       	movw	r30, r28
    6572:	e3 5b       	subi	r30, 0xB3	; 179
    6574:	ff 4f       	sbci	r31, 0xFF	; 255
    6576:	60 81       	ld	r22, Z
    6578:	71 81       	ldd	r23, Z+1	; 0x01
    657a:	82 81       	ldd	r24, Z+2	; 0x02
    657c:	93 81       	ldd	r25, Z+3	; 0x03
    657e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6582:	dc 01       	movw	r26, r24
    6584:	cb 01       	movw	r24, r22
    6586:	f8 01       	movw	r30, r16
    6588:	91 83       	std	Z+1, r25	; 0x01
    658a:	80 83       	st	Z, r24
    658c:	de 01       	movw	r26, r28
    658e:	a9 5b       	subi	r26, 0xB9	; 185
    6590:	bf 4f       	sbci	r27, 0xFF	; 255
    6592:	fe 01       	movw	r30, r28
    6594:	e5 5b       	subi	r30, 0xB5	; 181
    6596:	ff 4f       	sbci	r31, 0xFF	; 255
    6598:	80 81       	ld	r24, Z
    659a:	91 81       	ldd	r25, Z+1	; 0x01
    659c:	11 96       	adiw	r26, 0x01	; 1
    659e:	9c 93       	st	X, r25
    65a0:	8e 93       	st	-X, r24
    65a2:	fe 01       	movw	r30, r28
    65a4:	e9 5b       	subi	r30, 0xB9	; 185
    65a6:	ff 4f       	sbci	r31, 0xFF	; 255
    65a8:	80 81       	ld	r24, Z
    65aa:	91 81       	ldd	r25, Z+1	; 0x01
    65ac:	01 97       	sbiw	r24, 0x01	; 1
    65ae:	f1 f7       	brne	.-4      	; 0x65ac <main+0xbf0>
    65b0:	fe 01       	movw	r30, r28
    65b2:	e9 5b       	subi	r30, 0xB9	; 185
    65b4:	ff 4f       	sbci	r31, 0xFF	; 255
    65b6:	91 83       	std	Z+1, r25	; 0x01
    65b8:	80 83       	st	Z, r24
    65ba:	58 c1       	rjmp	.+688    	; 0x686c <main+0xeb0>


					}

				}
				else if(choice=='3')
    65bc:	fe 01       	movw	r30, r28
    65be:	e1 56       	subi	r30, 0x61	; 97
    65c0:	ff 4f       	sbci	r31, 0xFF	; 255
    65c2:	80 81       	ld	r24, Z
    65c4:	83 33       	cpi	r24, 0x33	; 51
    65c6:	09 f0       	breq	.+2      	; 0x65ca <main+0xc0e>
    65c8:	49 c1       	rjmp	.+658    	; 0x685c <main+0xea0>
				{
					UART_voidSendStringSync((u8*)"\r1-FAN ON\n");
    65ca:	8c eb       	ldi	r24, 0xBC	; 188
    65cc:	91 e0       	ldi	r25, 0x01	; 1
    65ce:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>
					UART_voidSendStringSync((u8*)"\r2-FAN OFF    ");
    65d2:	87 ec       	ldi	r24, 0xC7	; 199
    65d4:	91 e0       	ldi	r25, 0x01	; 1
    65d6:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>
					CLCD_CLEAR();
    65da:	0e 94 24 2c 	call	0x5848	; 0x5848 <CLCD_CLEAR>
					CLCD_voidSendString((u8*)"1-FAN ON");
    65de:	86 ed       	ldi	r24, 0xD6	; 214
    65e0:	91 e0       	ldi	r25, 0x01	; 1
    65e2:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
					CLCD_voidGOTO(1,2);
    65e6:	81 e0       	ldi	r24, 0x01	; 1
    65e8:	62 e0       	ldi	r22, 0x02	; 2
    65ea:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <CLCD_voidGOTO>
					CLCD_voidSendString((u8*)"2-FAN OFF");
    65ee:	8f ed       	ldi	r24, 0xDF	; 223
    65f0:	91 e0       	ldi	r25, 0x01	; 1
    65f2:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
					u8 choice2=UART_u8ReciveDataSync();
    65f6:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <UART_u8ReciveDataSync>
    65fa:	fe 01       	movw	r30, r28
    65fc:	e5 56       	subi	r30, 0x65	; 101
    65fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6600:	80 83       	st	Z, r24
					if(choice2=='1')
    6602:	fe 01       	movw	r30, r28
    6604:	e5 56       	subi	r30, 0x65	; 101
    6606:	ff 4f       	sbci	r31, 0xFF	; 255
    6608:	80 81       	ld	r24, Z
    660a:	81 33       	cpi	r24, 0x31	; 49
    660c:	09 f0       	breq	.+2      	; 0x6610 <main+0xc54>
    660e:	99 c0       	rjmp	.+306    	; 0x6742 <main+0xd86>
					{
						DIO_voidSetPinValue(DIO_PORTB,DIO_PIN1,DIO_HIGH);
    6610:	81 e0       	ldi	r24, 0x01	; 1
    6612:	61 e0       	ldi	r22, 0x01	; 1
    6614:	41 e0       	ldi	r20, 0x01	; 1
    6616:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
						CLCD_CLEAR();
    661a:	0e 94 24 2c 	call	0x5848	; 0x5848 <CLCD_CLEAR>
						CLCD_voidSendString((u8*)"FAN Is");
    661e:	89 ee       	ldi	r24, 0xE9	; 233
    6620:	91 e0       	ldi	r25, 0x01	; 1
    6622:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
						CLCD_voidGOTO(1,2);
    6626:	81 e0       	ldi	r24, 0x01	; 1
    6628:	62 e0       	ldi	r22, 0x02	; 2
    662a:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <CLCD_voidGOTO>
						CLCD_voidSendString((u8*)"ON");
    662e:	85 eb       	ldi	r24, 0xB5	; 181
    6630:	91 e0       	ldi	r25, 0x01	; 1
    6632:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
    6636:	fe 01       	movw	r30, r28
    6638:	ed 5b       	subi	r30, 0xBD	; 189
    663a:	ff 4f       	sbci	r31, 0xFF	; 255
    663c:	80 e0       	ldi	r24, 0x00	; 0
    663e:	90 e0       	ldi	r25, 0x00	; 0
    6640:	aa ef       	ldi	r26, 0xFA	; 250
    6642:	b3 e4       	ldi	r27, 0x43	; 67
    6644:	80 83       	st	Z, r24
    6646:	91 83       	std	Z+1, r25	; 0x01
    6648:	a2 83       	std	Z+2, r26	; 0x02
    664a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    664c:	8e 01       	movw	r16, r28
    664e:	01 5c       	subi	r16, 0xC1	; 193
    6650:	1f 4f       	sbci	r17, 0xFF	; 255
    6652:	fe 01       	movw	r30, r28
    6654:	ed 5b       	subi	r30, 0xBD	; 189
    6656:	ff 4f       	sbci	r31, 0xFF	; 255
    6658:	60 81       	ld	r22, Z
    665a:	71 81       	ldd	r23, Z+1	; 0x01
    665c:	82 81       	ldd	r24, Z+2	; 0x02
    665e:	93 81       	ldd	r25, Z+3	; 0x03
    6660:	20 e0       	ldi	r18, 0x00	; 0
    6662:	30 e0       	ldi	r19, 0x00	; 0
    6664:	4a ef       	ldi	r20, 0xFA	; 250
    6666:	54 e4       	ldi	r21, 0x44	; 68
    6668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    666c:	dc 01       	movw	r26, r24
    666e:	cb 01       	movw	r24, r22
    6670:	f8 01       	movw	r30, r16
    6672:	80 83       	st	Z, r24
    6674:	91 83       	std	Z+1, r25	; 0x01
    6676:	a2 83       	std	Z+2, r26	; 0x02
    6678:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    667a:	fe 01       	movw	r30, r28
    667c:	ff 96       	adiw	r30, 0x3f	; 63
    667e:	60 81       	ld	r22, Z
    6680:	71 81       	ldd	r23, Z+1	; 0x01
    6682:	82 81       	ldd	r24, Z+2	; 0x02
    6684:	93 81       	ldd	r25, Z+3	; 0x03
    6686:	20 e0       	ldi	r18, 0x00	; 0
    6688:	30 e0       	ldi	r19, 0x00	; 0
    668a:	40 e8       	ldi	r20, 0x80	; 128
    668c:	5f e3       	ldi	r21, 0x3F	; 63
    668e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6692:	88 23       	and	r24, r24
    6694:	2c f4       	brge	.+10     	; 0x66a0 <main+0xce4>
		__ticks = 1;
    6696:	81 e0       	ldi	r24, 0x01	; 1
    6698:	90 e0       	ldi	r25, 0x00	; 0
    669a:	9e af       	std	Y+62, r25	; 0x3e
    669c:	8d af       	std	Y+61, r24	; 0x3d
    669e:	46 c0       	rjmp	.+140    	; 0x672c <main+0xd70>
	else if (__tmp > 65535)
    66a0:	fe 01       	movw	r30, r28
    66a2:	ff 96       	adiw	r30, 0x3f	; 63
    66a4:	60 81       	ld	r22, Z
    66a6:	71 81       	ldd	r23, Z+1	; 0x01
    66a8:	82 81       	ldd	r24, Z+2	; 0x02
    66aa:	93 81       	ldd	r25, Z+3	; 0x03
    66ac:	20 e0       	ldi	r18, 0x00	; 0
    66ae:	3f ef       	ldi	r19, 0xFF	; 255
    66b0:	4f e7       	ldi	r20, 0x7F	; 127
    66b2:	57 e4       	ldi	r21, 0x47	; 71
    66b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    66b8:	18 16       	cp	r1, r24
    66ba:	64 f5       	brge	.+88     	; 0x6714 <main+0xd58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66bc:	fe 01       	movw	r30, r28
    66be:	ed 5b       	subi	r30, 0xBD	; 189
    66c0:	ff 4f       	sbci	r31, 0xFF	; 255
    66c2:	60 81       	ld	r22, Z
    66c4:	71 81       	ldd	r23, Z+1	; 0x01
    66c6:	82 81       	ldd	r24, Z+2	; 0x02
    66c8:	93 81       	ldd	r25, Z+3	; 0x03
    66ca:	20 e0       	ldi	r18, 0x00	; 0
    66cc:	30 e0       	ldi	r19, 0x00	; 0
    66ce:	40 e2       	ldi	r20, 0x20	; 32
    66d0:	51 e4       	ldi	r21, 0x41	; 65
    66d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66d6:	dc 01       	movw	r26, r24
    66d8:	cb 01       	movw	r24, r22
    66da:	bc 01       	movw	r22, r24
    66dc:	cd 01       	movw	r24, r26
    66de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66e2:	dc 01       	movw	r26, r24
    66e4:	cb 01       	movw	r24, r22
    66e6:	9e af       	std	Y+62, r25	; 0x3e
    66e8:	8d af       	std	Y+61, r24	; 0x3d
    66ea:	0f c0       	rjmp	.+30     	; 0x670a <main+0xd4e>
    66ec:	88 ec       	ldi	r24, 0xC8	; 200
    66ee:	90 e0       	ldi	r25, 0x00	; 0
    66f0:	9c af       	std	Y+60, r25	; 0x3c
    66f2:	8b af       	std	Y+59, r24	; 0x3b
    66f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    66f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    66f8:	01 97       	sbiw	r24, 0x01	; 1
    66fa:	f1 f7       	brne	.-4      	; 0x66f8 <main+0xd3c>
    66fc:	9c af       	std	Y+60, r25	; 0x3c
    66fe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6700:	8d ad       	ldd	r24, Y+61	; 0x3d
    6702:	9e ad       	ldd	r25, Y+62	; 0x3e
    6704:	01 97       	sbiw	r24, 0x01	; 1
    6706:	9e af       	std	Y+62, r25	; 0x3e
    6708:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    670a:	8d ad       	ldd	r24, Y+61	; 0x3d
    670c:	9e ad       	ldd	r25, Y+62	; 0x3e
    670e:	00 97       	sbiw	r24, 0x00	; 0
    6710:	69 f7       	brne	.-38     	; 0x66ec <main+0xd30>
    6712:	ac c0       	rjmp	.+344    	; 0x686c <main+0xeb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6714:	fe 01       	movw	r30, r28
    6716:	ff 96       	adiw	r30, 0x3f	; 63
    6718:	60 81       	ld	r22, Z
    671a:	71 81       	ldd	r23, Z+1	; 0x01
    671c:	82 81       	ldd	r24, Z+2	; 0x02
    671e:	93 81       	ldd	r25, Z+3	; 0x03
    6720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6724:	dc 01       	movw	r26, r24
    6726:	cb 01       	movw	r24, r22
    6728:	9e af       	std	Y+62, r25	; 0x3e
    672a:	8d af       	std	Y+61, r24	; 0x3d
    672c:	8d ad       	ldd	r24, Y+61	; 0x3d
    672e:	9e ad       	ldd	r25, Y+62	; 0x3e
    6730:	9a af       	std	Y+58, r25	; 0x3a
    6732:	89 af       	std	Y+57, r24	; 0x39
    6734:	89 ad       	ldd	r24, Y+57	; 0x39
    6736:	9a ad       	ldd	r25, Y+58	; 0x3a
    6738:	01 97       	sbiw	r24, 0x01	; 1
    673a:	f1 f7       	brne	.-4      	; 0x6738 <main+0xd7c>
    673c:	9a af       	std	Y+58, r25	; 0x3a
    673e:	89 af       	std	Y+57, r24	; 0x39
    6740:	95 c0       	rjmp	.+298    	; 0x686c <main+0xeb0>
						_delay_ms(500);

					}else if(choice2=='2')
    6742:	fe 01       	movw	r30, r28
    6744:	e5 56       	subi	r30, 0x65	; 101
    6746:	ff 4f       	sbci	r31, 0xFF	; 255
    6748:	80 81       	ld	r24, Z
    674a:	82 33       	cpi	r24, 0x32	; 50
    674c:	09 f0       	breq	.+2      	; 0x6750 <main+0xd94>
    674e:	8e c0       	rjmp	.+284    	; 0x686c <main+0xeb0>
					{
						DIO_voidSetPinValue(DIO_PORTB,DIO_PIN1,DIO_LOW);
    6750:	81 e0       	ldi	r24, 0x01	; 1
    6752:	61 e0       	ldi	r22, 0x01	; 1
    6754:	40 e0       	ldi	r20, 0x00	; 0
    6756:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
						CLCD_CLEAR();
    675a:	0e 94 24 2c 	call	0x5848	; 0x5848 <CLCD_CLEAR>
						CLCD_voidSendString((u8*)"FAN Is");
    675e:	89 ee       	ldi	r24, 0xE9	; 233
    6760:	91 e0       	ldi	r25, 0x01	; 1
    6762:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
						CLCD_voidGOTO(1,2);
    6766:	81 e0       	ldi	r24, 0x01	; 1
    6768:	62 e0       	ldi	r22, 0x02	; 2
    676a:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <CLCD_voidGOTO>
						CLCD_voidSendString((u8*)"OFF");
    676e:	88 eb       	ldi	r24, 0xB8	; 184
    6770:	91 e0       	ldi	r25, 0x01	; 1
    6772:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
    6776:	80 e0       	ldi	r24, 0x00	; 0
    6778:	90 e0       	ldi	r25, 0x00	; 0
    677a:	aa ef       	ldi	r26, 0xFA	; 250
    677c:	b3 e4       	ldi	r27, 0x43	; 67
    677e:	8d ab       	std	Y+53, r24	; 0x35
    6780:	9e ab       	std	Y+54, r25	; 0x36
    6782:	af ab       	std	Y+55, r26	; 0x37
    6784:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6786:	6d a9       	ldd	r22, Y+53	; 0x35
    6788:	7e a9       	ldd	r23, Y+54	; 0x36
    678a:	8f a9       	ldd	r24, Y+55	; 0x37
    678c:	98 ad       	ldd	r25, Y+56	; 0x38
    678e:	20 e0       	ldi	r18, 0x00	; 0
    6790:	30 e0       	ldi	r19, 0x00	; 0
    6792:	4a ef       	ldi	r20, 0xFA	; 250
    6794:	54 e4       	ldi	r21, 0x44	; 68
    6796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    679a:	dc 01       	movw	r26, r24
    679c:	cb 01       	movw	r24, r22
    679e:	89 ab       	std	Y+49, r24	; 0x31
    67a0:	9a ab       	std	Y+50, r25	; 0x32
    67a2:	ab ab       	std	Y+51, r26	; 0x33
    67a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    67a6:	69 a9       	ldd	r22, Y+49	; 0x31
    67a8:	7a a9       	ldd	r23, Y+50	; 0x32
    67aa:	8b a9       	ldd	r24, Y+51	; 0x33
    67ac:	9c a9       	ldd	r25, Y+52	; 0x34
    67ae:	20 e0       	ldi	r18, 0x00	; 0
    67b0:	30 e0       	ldi	r19, 0x00	; 0
    67b2:	40 e8       	ldi	r20, 0x80	; 128
    67b4:	5f e3       	ldi	r21, 0x3F	; 63
    67b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    67ba:	88 23       	and	r24, r24
    67bc:	2c f4       	brge	.+10     	; 0x67c8 <main+0xe0c>
		__ticks = 1;
    67be:	81 e0       	ldi	r24, 0x01	; 1
    67c0:	90 e0       	ldi	r25, 0x00	; 0
    67c2:	98 ab       	std	Y+48, r25	; 0x30
    67c4:	8f a7       	std	Y+47, r24	; 0x2f
    67c6:	3f c0       	rjmp	.+126    	; 0x6846 <main+0xe8a>
	else if (__tmp > 65535)
    67c8:	69 a9       	ldd	r22, Y+49	; 0x31
    67ca:	7a a9       	ldd	r23, Y+50	; 0x32
    67cc:	8b a9       	ldd	r24, Y+51	; 0x33
    67ce:	9c a9       	ldd	r25, Y+52	; 0x34
    67d0:	20 e0       	ldi	r18, 0x00	; 0
    67d2:	3f ef       	ldi	r19, 0xFF	; 255
    67d4:	4f e7       	ldi	r20, 0x7F	; 127
    67d6:	57 e4       	ldi	r21, 0x47	; 71
    67d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    67dc:	18 16       	cp	r1, r24
    67de:	4c f5       	brge	.+82     	; 0x6832 <main+0xe76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    67e0:	6d a9       	ldd	r22, Y+53	; 0x35
    67e2:	7e a9       	ldd	r23, Y+54	; 0x36
    67e4:	8f a9       	ldd	r24, Y+55	; 0x37
    67e6:	98 ad       	ldd	r25, Y+56	; 0x38
    67e8:	20 e0       	ldi	r18, 0x00	; 0
    67ea:	30 e0       	ldi	r19, 0x00	; 0
    67ec:	40 e2       	ldi	r20, 0x20	; 32
    67ee:	51 e4       	ldi	r21, 0x41	; 65
    67f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67f4:	dc 01       	movw	r26, r24
    67f6:	cb 01       	movw	r24, r22
    67f8:	bc 01       	movw	r22, r24
    67fa:	cd 01       	movw	r24, r26
    67fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6800:	dc 01       	movw	r26, r24
    6802:	cb 01       	movw	r24, r22
    6804:	98 ab       	std	Y+48, r25	; 0x30
    6806:	8f a7       	std	Y+47, r24	; 0x2f
    6808:	0f c0       	rjmp	.+30     	; 0x6828 <main+0xe6c>
    680a:	88 ec       	ldi	r24, 0xC8	; 200
    680c:	90 e0       	ldi	r25, 0x00	; 0
    680e:	9e a7       	std	Y+46, r25	; 0x2e
    6810:	8d a7       	std	Y+45, r24	; 0x2d
    6812:	8d a5       	ldd	r24, Y+45	; 0x2d
    6814:	9e a5       	ldd	r25, Y+46	; 0x2e
    6816:	01 97       	sbiw	r24, 0x01	; 1
    6818:	f1 f7       	brne	.-4      	; 0x6816 <main+0xe5a>
    681a:	9e a7       	std	Y+46, r25	; 0x2e
    681c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    681e:	8f a5       	ldd	r24, Y+47	; 0x2f
    6820:	98 a9       	ldd	r25, Y+48	; 0x30
    6822:	01 97       	sbiw	r24, 0x01	; 1
    6824:	98 ab       	std	Y+48, r25	; 0x30
    6826:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6828:	8f a5       	ldd	r24, Y+47	; 0x2f
    682a:	98 a9       	ldd	r25, Y+48	; 0x30
    682c:	00 97       	sbiw	r24, 0x00	; 0
    682e:	69 f7       	brne	.-38     	; 0x680a <main+0xe4e>
    6830:	1d c0       	rjmp	.+58     	; 0x686c <main+0xeb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6832:	69 a9       	ldd	r22, Y+49	; 0x31
    6834:	7a a9       	ldd	r23, Y+50	; 0x32
    6836:	8b a9       	ldd	r24, Y+51	; 0x33
    6838:	9c a9       	ldd	r25, Y+52	; 0x34
    683a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    683e:	dc 01       	movw	r26, r24
    6840:	cb 01       	movw	r24, r22
    6842:	98 ab       	std	Y+48, r25	; 0x30
    6844:	8f a7       	std	Y+47, r24	; 0x2f
    6846:	8f a5       	ldd	r24, Y+47	; 0x2f
    6848:	98 a9       	ldd	r25, Y+48	; 0x30
    684a:	9c a7       	std	Y+44, r25	; 0x2c
    684c:	8b a7       	std	Y+43, r24	; 0x2b
    684e:	8b a5       	ldd	r24, Y+43	; 0x2b
    6850:	9c a5       	ldd	r25, Y+44	; 0x2c
    6852:	01 97       	sbiw	r24, 0x01	; 1
    6854:	f1 f7       	brne	.-4      	; 0x6852 <main+0xe96>
    6856:	9c a7       	std	Y+44, r25	; 0x2c
    6858:	8b a7       	std	Y+43, r24	; 0x2b
    685a:	08 c0       	rjmp	.+16     	; 0x686c <main+0xeb0>

				}

				else
				{
					UART_voidSendStringSync((u8*)"Wrong choice\n");
    685c:	80 ef       	ldi	r24, 0xF0	; 240
    685e:	91 e0       	ldi	r25, 0x01	; 1
    6860:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>
					flag=0;
    6864:	fe 01       	movw	r30, r28
    6866:	ec 55       	subi	r30, 0x5C	; 92
    6868:	ff 4f       	sbci	r31, 0xFF	; 255
    686a:	10 82       	st	Z, r1
			CLCD_voidSendString((u8*)"Welcome TO");
			CLCD_voidGOTO(1,2);
			CLCD_voidSendString((u8*)"Your Home");
			_delay_ms(1000);

			while(flag==4)
    686c:	fe 01       	movw	r30, r28
    686e:	ec 55       	subi	r30, 0x5C	; 92
    6870:	ff 4f       	sbci	r31, 0xFF	; 255
    6872:	80 81       	ld	r24, Z
    6874:	84 30       	cpi	r24, 0x04	; 4
    6876:	09 f4       	brne	.+2      	; 0x687a <main+0xebe>
    6878:	ff ca       	rjmp	.-2562   	; 0x5e78 <main+0x4bc>
    687a:	d8 c8       	rjmp	.-3664   	; 0x5a2c <main+0x70>
				}
			}


		}
		else if(flag!=4 &&Name_flag==1)
    687c:	fe 01       	movw	r30, r28
    687e:	ec 55       	subi	r30, 0x5C	; 92
    6880:	ff 4f       	sbci	r31, 0xFF	; 255
    6882:	80 81       	ld	r24, Z
    6884:	84 30       	cpi	r24, 0x04	; 4
    6886:	09 f4       	brne	.+2      	; 0x688a <main+0xece>
    6888:	d1 c8       	rjmp	.-3678   	; 0x5a2c <main+0x70>
    688a:	fe 01       	movw	r30, r28
    688c:	ef 55       	subi	r30, 0x5F	; 95
    688e:	ff 4f       	sbci	r31, 0xFF	; 255
    6890:	80 81       	ld	r24, Z
    6892:	81 30       	cpi	r24, 0x01	; 1
    6894:	09 f0       	breq	.+2      	; 0x6898 <main+0xedc>
    6896:	ca c8       	rjmp	.-3692   	; 0x5a2c <main+0x70>
		{

			UART_voidSendStringSync((u8*)"Wrong Pass      ");
    6898:	8e ef       	ldi	r24, 0xFE	; 254
    689a:	91 e0       	ldi	r25, 0x01	; 1
    689c:	0e 94 ef 07 	call	0xfde	; 0xfde <UART_voidSendStringSync>
			CLCD_CLEAR();
    68a0:	0e 94 24 2c 	call	0x5848	; 0x5848 <CLCD_CLEAR>
			CLCD_voidSendString((u8*)"Wrong Pass      ");
    68a4:	8e ef       	ldi	r24, 0xFE	; 254
    68a6:	91 e0       	ldi	r25, 0x01	; 1
    68a8:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <CLCD_voidSendString>
    68ac:	80 e0       	ldi	r24, 0x00	; 0
    68ae:	90 e0       	ldi	r25, 0x00	; 0
    68b0:	a6 e9       	ldi	r26, 0x96	; 150
    68b2:	b3 e4       	ldi	r27, 0x43	; 67
    68b4:	8f a3       	std	Y+39, r24	; 0x27
    68b6:	98 a7       	std	Y+40, r25	; 0x28
    68b8:	a9 a7       	std	Y+41, r26	; 0x29
    68ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    68bc:	6f a1       	ldd	r22, Y+39	; 0x27
    68be:	78 a5       	ldd	r23, Y+40	; 0x28
    68c0:	89 a5       	ldd	r24, Y+41	; 0x29
    68c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    68c4:	20 e0       	ldi	r18, 0x00	; 0
    68c6:	30 e0       	ldi	r19, 0x00	; 0
    68c8:	4a ef       	ldi	r20, 0xFA	; 250
    68ca:	54 e4       	ldi	r21, 0x44	; 68
    68cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68d0:	dc 01       	movw	r26, r24
    68d2:	cb 01       	movw	r24, r22
    68d4:	8b a3       	std	Y+35, r24	; 0x23
    68d6:	9c a3       	std	Y+36, r25	; 0x24
    68d8:	ad a3       	std	Y+37, r26	; 0x25
    68da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    68dc:	6b a1       	ldd	r22, Y+35	; 0x23
    68de:	7c a1       	ldd	r23, Y+36	; 0x24
    68e0:	8d a1       	ldd	r24, Y+37	; 0x25
    68e2:	9e a1       	ldd	r25, Y+38	; 0x26
    68e4:	20 e0       	ldi	r18, 0x00	; 0
    68e6:	30 e0       	ldi	r19, 0x00	; 0
    68e8:	40 e8       	ldi	r20, 0x80	; 128
    68ea:	5f e3       	ldi	r21, 0x3F	; 63
    68ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    68f0:	88 23       	and	r24, r24
    68f2:	2c f4       	brge	.+10     	; 0x68fe <main+0xf42>
		__ticks = 1;
    68f4:	81 e0       	ldi	r24, 0x01	; 1
    68f6:	90 e0       	ldi	r25, 0x00	; 0
    68f8:	9a a3       	std	Y+34, r25	; 0x22
    68fa:	89 a3       	std	Y+33, r24	; 0x21
    68fc:	3f c0       	rjmp	.+126    	; 0x697c <main+0xfc0>
	else if (__tmp > 65535)
    68fe:	6b a1       	ldd	r22, Y+35	; 0x23
    6900:	7c a1       	ldd	r23, Y+36	; 0x24
    6902:	8d a1       	ldd	r24, Y+37	; 0x25
    6904:	9e a1       	ldd	r25, Y+38	; 0x26
    6906:	20 e0       	ldi	r18, 0x00	; 0
    6908:	3f ef       	ldi	r19, 0xFF	; 255
    690a:	4f e7       	ldi	r20, 0x7F	; 127
    690c:	57 e4       	ldi	r21, 0x47	; 71
    690e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6912:	18 16       	cp	r1, r24
    6914:	4c f5       	brge	.+82     	; 0x6968 <main+0xfac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6916:	6f a1       	ldd	r22, Y+39	; 0x27
    6918:	78 a5       	ldd	r23, Y+40	; 0x28
    691a:	89 a5       	ldd	r24, Y+41	; 0x29
    691c:	9a a5       	ldd	r25, Y+42	; 0x2a
    691e:	20 e0       	ldi	r18, 0x00	; 0
    6920:	30 e0       	ldi	r19, 0x00	; 0
    6922:	40 e2       	ldi	r20, 0x20	; 32
    6924:	51 e4       	ldi	r21, 0x41	; 65
    6926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    692a:	dc 01       	movw	r26, r24
    692c:	cb 01       	movw	r24, r22
    692e:	bc 01       	movw	r22, r24
    6930:	cd 01       	movw	r24, r26
    6932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6936:	dc 01       	movw	r26, r24
    6938:	cb 01       	movw	r24, r22
    693a:	9a a3       	std	Y+34, r25	; 0x22
    693c:	89 a3       	std	Y+33, r24	; 0x21
    693e:	0f c0       	rjmp	.+30     	; 0x695e <main+0xfa2>
    6940:	88 ec       	ldi	r24, 0xC8	; 200
    6942:	90 e0       	ldi	r25, 0x00	; 0
    6944:	98 a3       	std	Y+32, r25	; 0x20
    6946:	8f 8f       	std	Y+31, r24	; 0x1f
    6948:	8f 8d       	ldd	r24, Y+31	; 0x1f
    694a:	98 a1       	ldd	r25, Y+32	; 0x20
    694c:	01 97       	sbiw	r24, 0x01	; 1
    694e:	f1 f7       	brne	.-4      	; 0x694c <main+0xf90>
    6950:	98 a3       	std	Y+32, r25	; 0x20
    6952:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6954:	89 a1       	ldd	r24, Y+33	; 0x21
    6956:	9a a1       	ldd	r25, Y+34	; 0x22
    6958:	01 97       	sbiw	r24, 0x01	; 1
    695a:	9a a3       	std	Y+34, r25	; 0x22
    695c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    695e:	89 a1       	ldd	r24, Y+33	; 0x21
    6960:	9a a1       	ldd	r25, Y+34	; 0x22
    6962:	00 97       	sbiw	r24, 0x00	; 0
    6964:	69 f7       	brne	.-38     	; 0x6940 <main+0xf84>
    6966:	14 c0       	rjmp	.+40     	; 0x6990 <main+0xfd4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6968:	6b a1       	ldd	r22, Y+35	; 0x23
    696a:	7c a1       	ldd	r23, Y+36	; 0x24
    696c:	8d a1       	ldd	r24, Y+37	; 0x25
    696e:	9e a1       	ldd	r25, Y+38	; 0x26
    6970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6974:	dc 01       	movw	r26, r24
    6976:	cb 01       	movw	r24, r22
    6978:	9a a3       	std	Y+34, r25	; 0x22
    697a:	89 a3       	std	Y+33, r24	; 0x21
    697c:	89 a1       	ldd	r24, Y+33	; 0x21
    697e:	9a a1       	ldd	r25, Y+34	; 0x22
    6980:	9e 8f       	std	Y+30, r25	; 0x1e
    6982:	8d 8f       	std	Y+29, r24	; 0x1d
    6984:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6986:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6988:	01 97       	sbiw	r24, 0x01	; 1
    698a:	f1 f7       	brne	.-4      	; 0x6988 <main+0xfcc>
    698c:	9e 8f       	std	Y+30, r25	; 0x1e
    698e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(300);
			flag=3;
    6990:	fe 01       	movw	r30, r28
    6992:	ec 55       	subi	r30, 0x5C	; 92
    6994:	ff 4f       	sbci	r31, 0xFF	; 255
    6996:	83 e0       	ldi	r24, 0x03	; 3
    6998:	80 83       	st	Z, r24
			fail_flag++;
    699a:	de 01       	movw	r26, r28
    699c:	ae 55       	subi	r26, 0x5E	; 94
    699e:	bf 4f       	sbci	r27, 0xFF	; 255
    69a0:	fe 01       	movw	r30, r28
    69a2:	ee 55       	subi	r30, 0x5E	; 94
    69a4:	ff 4f       	sbci	r31, 0xFF	; 255
    69a6:	80 81       	ld	r24, Z
    69a8:	8f 5f       	subi	r24, 0xFF	; 255
    69aa:	8c 93       	st	X, r24
    69ac:	f1 c0       	rjmp	.+482    	; 0x6b90 <main+0x11d4>
			while(fail_flag==3)
			{

				DIO_voidSetPortValue(DIO_PORTA,DIO_PORT_HIGH);
    69ae:	80 e0       	ldi	r24, 0x00	; 0
    69b0:	6f ef       	ldi	r22, 0xFF	; 255
    69b2:	0e 94 3c 11 	call	0x2278	; 0x2278 <DIO_voidSetPortValue>
				DIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_HIGH);
    69b6:	81 e0       	ldi	r24, 0x01	; 1
    69b8:	60 e0       	ldi	r22, 0x00	; 0
    69ba:	41 e0       	ldi	r20, 0x01	; 1
    69bc:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <DIO_voidSetPinValue>
    69c0:	80 e0       	ldi	r24, 0x00	; 0
    69c2:	90 e0       	ldi	r25, 0x00	; 0
    69c4:	a6 e9       	ldi	r26, 0x96	; 150
    69c6:	b3 e4       	ldi	r27, 0x43	; 67
    69c8:	89 8f       	std	Y+25, r24	; 0x19
    69ca:	9a 8f       	std	Y+26, r25	; 0x1a
    69cc:	ab 8f       	std	Y+27, r26	; 0x1b
    69ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69d0:	69 8d       	ldd	r22, Y+25	; 0x19
    69d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    69d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    69d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    69d8:	20 e0       	ldi	r18, 0x00	; 0
    69da:	30 e0       	ldi	r19, 0x00	; 0
    69dc:	4a ef       	ldi	r20, 0xFA	; 250
    69de:	54 e4       	ldi	r21, 0x44	; 68
    69e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69e4:	dc 01       	movw	r26, r24
    69e6:	cb 01       	movw	r24, r22
    69e8:	8d 8b       	std	Y+21, r24	; 0x15
    69ea:	9e 8b       	std	Y+22, r25	; 0x16
    69ec:	af 8b       	std	Y+23, r26	; 0x17
    69ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    69f0:	6d 89       	ldd	r22, Y+21	; 0x15
    69f2:	7e 89       	ldd	r23, Y+22	; 0x16
    69f4:	8f 89       	ldd	r24, Y+23	; 0x17
    69f6:	98 8d       	ldd	r25, Y+24	; 0x18
    69f8:	20 e0       	ldi	r18, 0x00	; 0
    69fa:	30 e0       	ldi	r19, 0x00	; 0
    69fc:	40 e8       	ldi	r20, 0x80	; 128
    69fe:	5f e3       	ldi	r21, 0x3F	; 63
    6a00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6a04:	88 23       	and	r24, r24
    6a06:	2c f4       	brge	.+10     	; 0x6a12 <main+0x1056>
		__ticks = 1;
    6a08:	81 e0       	ldi	r24, 0x01	; 1
    6a0a:	90 e0       	ldi	r25, 0x00	; 0
    6a0c:	9c 8b       	std	Y+20, r25	; 0x14
    6a0e:	8b 8b       	std	Y+19, r24	; 0x13
    6a10:	3f c0       	rjmp	.+126    	; 0x6a90 <main+0x10d4>
	else if (__tmp > 65535)
    6a12:	6d 89       	ldd	r22, Y+21	; 0x15
    6a14:	7e 89       	ldd	r23, Y+22	; 0x16
    6a16:	8f 89       	ldd	r24, Y+23	; 0x17
    6a18:	98 8d       	ldd	r25, Y+24	; 0x18
    6a1a:	20 e0       	ldi	r18, 0x00	; 0
    6a1c:	3f ef       	ldi	r19, 0xFF	; 255
    6a1e:	4f e7       	ldi	r20, 0x7F	; 127
    6a20:	57 e4       	ldi	r21, 0x47	; 71
    6a22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6a26:	18 16       	cp	r1, r24
    6a28:	4c f5       	brge	.+82     	; 0x6a7c <main+0x10c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a2a:	69 8d       	ldd	r22, Y+25	; 0x19
    6a2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6a2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6a30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6a32:	20 e0       	ldi	r18, 0x00	; 0
    6a34:	30 e0       	ldi	r19, 0x00	; 0
    6a36:	40 e2       	ldi	r20, 0x20	; 32
    6a38:	51 e4       	ldi	r21, 0x41	; 65
    6a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a3e:	dc 01       	movw	r26, r24
    6a40:	cb 01       	movw	r24, r22
    6a42:	bc 01       	movw	r22, r24
    6a44:	cd 01       	movw	r24, r26
    6a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a4a:	dc 01       	movw	r26, r24
    6a4c:	cb 01       	movw	r24, r22
    6a4e:	9c 8b       	std	Y+20, r25	; 0x14
    6a50:	8b 8b       	std	Y+19, r24	; 0x13
    6a52:	0f c0       	rjmp	.+30     	; 0x6a72 <main+0x10b6>
    6a54:	88 ec       	ldi	r24, 0xC8	; 200
    6a56:	90 e0       	ldi	r25, 0x00	; 0
    6a58:	9a 8b       	std	Y+18, r25	; 0x12
    6a5a:	89 8b       	std	Y+17, r24	; 0x11
    6a5c:	89 89       	ldd	r24, Y+17	; 0x11
    6a5e:	9a 89       	ldd	r25, Y+18	; 0x12
    6a60:	01 97       	sbiw	r24, 0x01	; 1
    6a62:	f1 f7       	brne	.-4      	; 0x6a60 <main+0x10a4>
    6a64:	9a 8b       	std	Y+18, r25	; 0x12
    6a66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a68:	8b 89       	ldd	r24, Y+19	; 0x13
    6a6a:	9c 89       	ldd	r25, Y+20	; 0x14
    6a6c:	01 97       	sbiw	r24, 0x01	; 1
    6a6e:	9c 8b       	std	Y+20, r25	; 0x14
    6a70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a72:	8b 89       	ldd	r24, Y+19	; 0x13
    6a74:	9c 89       	ldd	r25, Y+20	; 0x14
    6a76:	00 97       	sbiw	r24, 0x00	; 0
    6a78:	69 f7       	brne	.-38     	; 0x6a54 <main+0x1098>
    6a7a:	14 c0       	rjmp	.+40     	; 0x6aa4 <main+0x10e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    6a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    6a80:	8f 89       	ldd	r24, Y+23	; 0x17
    6a82:	98 8d       	ldd	r25, Y+24	; 0x18
    6a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a88:	dc 01       	movw	r26, r24
    6a8a:	cb 01       	movw	r24, r22
    6a8c:	9c 8b       	std	Y+20, r25	; 0x14
    6a8e:	8b 8b       	std	Y+19, r24	; 0x13
    6a90:	8b 89       	ldd	r24, Y+19	; 0x13
    6a92:	9c 89       	ldd	r25, Y+20	; 0x14
    6a94:	98 8b       	std	Y+16, r25	; 0x10
    6a96:	8f 87       	std	Y+15, r24	; 0x0f
    6a98:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a9a:	98 89       	ldd	r25, Y+16	; 0x10
    6a9c:	01 97       	sbiw	r24, 0x01	; 1
    6a9e:	f1 f7       	brne	.-4      	; 0x6a9c <main+0x10e0>
    6aa0:	98 8b       	std	Y+16, r25	; 0x10
    6aa2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(300);
				DIO_voidSetPortValue(DIO_PORTA,DIO_PORT_LOW);
    6aa4:	80 e0       	ldi	r24, 0x00	; 0
    6aa6:	60 e0       	ldi	r22, 0x00	; 0
    6aa8:	0e 94 3c 11 	call	0x2278	; 0x2278 <DIO_voidSetPortValue>
    6aac:	80 e0       	ldi	r24, 0x00	; 0
    6aae:	90 e0       	ldi	r25, 0x00	; 0
    6ab0:	a6 e9       	ldi	r26, 0x96	; 150
    6ab2:	b3 e4       	ldi	r27, 0x43	; 67
    6ab4:	8b 87       	std	Y+11, r24	; 0x0b
    6ab6:	9c 87       	std	Y+12, r25	; 0x0c
    6ab8:	ad 87       	std	Y+13, r26	; 0x0d
    6aba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    6abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ac4:	20 e0       	ldi	r18, 0x00	; 0
    6ac6:	30 e0       	ldi	r19, 0x00	; 0
    6ac8:	4a ef       	ldi	r20, 0xFA	; 250
    6aca:	54 e4       	ldi	r21, 0x44	; 68
    6acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ad0:	dc 01       	movw	r26, r24
    6ad2:	cb 01       	movw	r24, r22
    6ad4:	8f 83       	std	Y+7, r24	; 0x07
    6ad6:	98 87       	std	Y+8, r25	; 0x08
    6ad8:	a9 87       	std	Y+9, r26	; 0x09
    6ada:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6adc:	6f 81       	ldd	r22, Y+7	; 0x07
    6ade:	78 85       	ldd	r23, Y+8	; 0x08
    6ae0:	89 85       	ldd	r24, Y+9	; 0x09
    6ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ae4:	20 e0       	ldi	r18, 0x00	; 0
    6ae6:	30 e0       	ldi	r19, 0x00	; 0
    6ae8:	40 e8       	ldi	r20, 0x80	; 128
    6aea:	5f e3       	ldi	r21, 0x3F	; 63
    6aec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6af0:	88 23       	and	r24, r24
    6af2:	2c f4       	brge	.+10     	; 0x6afe <main+0x1142>
		__ticks = 1;
    6af4:	81 e0       	ldi	r24, 0x01	; 1
    6af6:	90 e0       	ldi	r25, 0x00	; 0
    6af8:	9e 83       	std	Y+6, r25	; 0x06
    6afa:	8d 83       	std	Y+5, r24	; 0x05
    6afc:	3f c0       	rjmp	.+126    	; 0x6b7c <main+0x11c0>
	else if (__tmp > 65535)
    6afe:	6f 81       	ldd	r22, Y+7	; 0x07
    6b00:	78 85       	ldd	r23, Y+8	; 0x08
    6b02:	89 85       	ldd	r24, Y+9	; 0x09
    6b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b06:	20 e0       	ldi	r18, 0x00	; 0
    6b08:	3f ef       	ldi	r19, 0xFF	; 255
    6b0a:	4f e7       	ldi	r20, 0x7F	; 127
    6b0c:	57 e4       	ldi	r21, 0x47	; 71
    6b0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6b12:	18 16       	cp	r1, r24
    6b14:	4c f5       	brge	.+82     	; 0x6b68 <main+0x11ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b16:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b18:	7c 85       	ldd	r23, Y+12	; 0x0c
    6b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b1e:	20 e0       	ldi	r18, 0x00	; 0
    6b20:	30 e0       	ldi	r19, 0x00	; 0
    6b22:	40 e2       	ldi	r20, 0x20	; 32
    6b24:	51 e4       	ldi	r21, 0x41	; 65
    6b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b2a:	dc 01       	movw	r26, r24
    6b2c:	cb 01       	movw	r24, r22
    6b2e:	bc 01       	movw	r22, r24
    6b30:	cd 01       	movw	r24, r26
    6b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b36:	dc 01       	movw	r26, r24
    6b38:	cb 01       	movw	r24, r22
    6b3a:	9e 83       	std	Y+6, r25	; 0x06
    6b3c:	8d 83       	std	Y+5, r24	; 0x05
    6b3e:	0f c0       	rjmp	.+30     	; 0x6b5e <main+0x11a2>
    6b40:	88 ec       	ldi	r24, 0xC8	; 200
    6b42:	90 e0       	ldi	r25, 0x00	; 0
    6b44:	9c 83       	std	Y+4, r25	; 0x04
    6b46:	8b 83       	std	Y+3, r24	; 0x03
    6b48:	8b 81       	ldd	r24, Y+3	; 0x03
    6b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    6b4c:	01 97       	sbiw	r24, 0x01	; 1
    6b4e:	f1 f7       	brne	.-4      	; 0x6b4c <main+0x1190>
    6b50:	9c 83       	std	Y+4, r25	; 0x04
    6b52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b54:	8d 81       	ldd	r24, Y+5	; 0x05
    6b56:	9e 81       	ldd	r25, Y+6	; 0x06
    6b58:	01 97       	sbiw	r24, 0x01	; 1
    6b5a:	9e 83       	std	Y+6, r25	; 0x06
    6b5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    6b60:	9e 81       	ldd	r25, Y+6	; 0x06
    6b62:	00 97       	sbiw	r24, 0x00	; 0
    6b64:	69 f7       	brne	.-38     	; 0x6b40 <main+0x1184>
    6b66:	14 c0       	rjmp	.+40     	; 0x6b90 <main+0x11d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b68:	6f 81       	ldd	r22, Y+7	; 0x07
    6b6a:	78 85       	ldd	r23, Y+8	; 0x08
    6b6c:	89 85       	ldd	r24, Y+9	; 0x09
    6b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b74:	dc 01       	movw	r26, r24
    6b76:	cb 01       	movw	r24, r22
    6b78:	9e 83       	std	Y+6, r25	; 0x06
    6b7a:	8d 83       	std	Y+5, r24	; 0x05
    6b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    6b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    6b80:	9a 83       	std	Y+2, r25	; 0x02
    6b82:	89 83       	std	Y+1, r24	; 0x01
    6b84:	89 81       	ldd	r24, Y+1	; 0x01
    6b86:	9a 81       	ldd	r25, Y+2	; 0x02
    6b88:	01 97       	sbiw	r24, 0x01	; 1
    6b8a:	f1 f7       	brne	.-4      	; 0x6b88 <main+0x11cc>
    6b8c:	9a 83       	std	Y+2, r25	; 0x02
    6b8e:	89 83       	std	Y+1, r24	; 0x01
			CLCD_CLEAR();
			CLCD_voidSendString((u8*)"Wrong Pass      ");
			_delay_ms(300);
			flag=3;
			fail_flag++;
			while(fail_flag==3)
    6b90:	fe 01       	movw	r30, r28
    6b92:	ee 55       	subi	r30, 0x5E	; 94
    6b94:	ff 4f       	sbci	r31, 0xFF	; 255
    6b96:	80 81       	ld	r24, Z
    6b98:	83 30       	cpi	r24, 0x03	; 3
    6b9a:	09 f4       	brne	.+2      	; 0x6b9e <main+0x11e2>
    6b9c:	08 cf       	rjmp	.-496    	; 0x69ae <main+0xff2>
				_delay_ms(300);
				DIO_voidSetPortValue(DIO_PORTA,DIO_PORT_LOW);
				_delay_ms(300);

			}
			Local_u8Counter=0;
    6b9e:	fe 01       	movw	r30, r28
    6ba0:	ed 55       	subi	r30, 0x5D	; 93
    6ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    6ba4:	10 82       	st	Z, r1
    6ba6:	0c 94 16 2d 	jmp	0x5a2c	; 0x5a2c <main+0x70>

00006baa <__udivmodhi4>:
    6baa:	aa 1b       	sub	r26, r26
    6bac:	bb 1b       	sub	r27, r27
    6bae:	51 e1       	ldi	r21, 0x11	; 17
    6bb0:	07 c0       	rjmp	.+14     	; 0x6bc0 <__udivmodhi4_ep>

00006bb2 <__udivmodhi4_loop>:
    6bb2:	aa 1f       	adc	r26, r26
    6bb4:	bb 1f       	adc	r27, r27
    6bb6:	a6 17       	cp	r26, r22
    6bb8:	b7 07       	cpc	r27, r23
    6bba:	10 f0       	brcs	.+4      	; 0x6bc0 <__udivmodhi4_ep>
    6bbc:	a6 1b       	sub	r26, r22
    6bbe:	b7 0b       	sbc	r27, r23

00006bc0 <__udivmodhi4_ep>:
    6bc0:	88 1f       	adc	r24, r24
    6bc2:	99 1f       	adc	r25, r25
    6bc4:	5a 95       	dec	r21
    6bc6:	a9 f7       	brne	.-22     	; 0x6bb2 <__udivmodhi4_loop>
    6bc8:	80 95       	com	r24
    6bca:	90 95       	com	r25
    6bcc:	bc 01       	movw	r22, r24
    6bce:	cd 01       	movw	r24, r26
    6bd0:	08 95       	ret

00006bd2 <__udivmodsi4>:
    6bd2:	a1 e2       	ldi	r26, 0x21	; 33
    6bd4:	1a 2e       	mov	r1, r26
    6bd6:	aa 1b       	sub	r26, r26
    6bd8:	bb 1b       	sub	r27, r27
    6bda:	fd 01       	movw	r30, r26
    6bdc:	0d c0       	rjmp	.+26     	; 0x6bf8 <__udivmodsi4_ep>

00006bde <__udivmodsi4_loop>:
    6bde:	aa 1f       	adc	r26, r26
    6be0:	bb 1f       	adc	r27, r27
    6be2:	ee 1f       	adc	r30, r30
    6be4:	ff 1f       	adc	r31, r31
    6be6:	a2 17       	cp	r26, r18
    6be8:	b3 07       	cpc	r27, r19
    6bea:	e4 07       	cpc	r30, r20
    6bec:	f5 07       	cpc	r31, r21
    6bee:	20 f0       	brcs	.+8      	; 0x6bf8 <__udivmodsi4_ep>
    6bf0:	a2 1b       	sub	r26, r18
    6bf2:	b3 0b       	sbc	r27, r19
    6bf4:	e4 0b       	sbc	r30, r20
    6bf6:	f5 0b       	sbc	r31, r21

00006bf8 <__udivmodsi4_ep>:
    6bf8:	66 1f       	adc	r22, r22
    6bfa:	77 1f       	adc	r23, r23
    6bfc:	88 1f       	adc	r24, r24
    6bfe:	99 1f       	adc	r25, r25
    6c00:	1a 94       	dec	r1
    6c02:	69 f7       	brne	.-38     	; 0x6bde <__udivmodsi4_loop>
    6c04:	60 95       	com	r22
    6c06:	70 95       	com	r23
    6c08:	80 95       	com	r24
    6c0a:	90 95       	com	r25
    6c0c:	9b 01       	movw	r18, r22
    6c0e:	ac 01       	movw	r20, r24
    6c10:	bd 01       	movw	r22, r26
    6c12:	cf 01       	movw	r24, r30
    6c14:	08 95       	ret

00006c16 <__prologue_saves__>:
    6c16:	2f 92       	push	r2
    6c18:	3f 92       	push	r3
    6c1a:	4f 92       	push	r4
    6c1c:	5f 92       	push	r5
    6c1e:	6f 92       	push	r6
    6c20:	7f 92       	push	r7
    6c22:	8f 92       	push	r8
    6c24:	9f 92       	push	r9
    6c26:	af 92       	push	r10
    6c28:	bf 92       	push	r11
    6c2a:	cf 92       	push	r12
    6c2c:	df 92       	push	r13
    6c2e:	ef 92       	push	r14
    6c30:	ff 92       	push	r15
    6c32:	0f 93       	push	r16
    6c34:	1f 93       	push	r17
    6c36:	cf 93       	push	r28
    6c38:	df 93       	push	r29
    6c3a:	cd b7       	in	r28, 0x3d	; 61
    6c3c:	de b7       	in	r29, 0x3e	; 62
    6c3e:	ca 1b       	sub	r28, r26
    6c40:	db 0b       	sbc	r29, r27
    6c42:	0f b6       	in	r0, 0x3f	; 63
    6c44:	f8 94       	cli
    6c46:	de bf       	out	0x3e, r29	; 62
    6c48:	0f be       	out	0x3f, r0	; 63
    6c4a:	cd bf       	out	0x3d, r28	; 61
    6c4c:	09 94       	ijmp

00006c4e <__epilogue_restores__>:
    6c4e:	2a 88       	ldd	r2, Y+18	; 0x12
    6c50:	39 88       	ldd	r3, Y+17	; 0x11
    6c52:	48 88       	ldd	r4, Y+16	; 0x10
    6c54:	5f 84       	ldd	r5, Y+15	; 0x0f
    6c56:	6e 84       	ldd	r6, Y+14	; 0x0e
    6c58:	7d 84       	ldd	r7, Y+13	; 0x0d
    6c5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    6c5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    6c5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6c60:	b9 84       	ldd	r11, Y+9	; 0x09
    6c62:	c8 84       	ldd	r12, Y+8	; 0x08
    6c64:	df 80       	ldd	r13, Y+7	; 0x07
    6c66:	ee 80       	ldd	r14, Y+6	; 0x06
    6c68:	fd 80       	ldd	r15, Y+5	; 0x05
    6c6a:	0c 81       	ldd	r16, Y+4	; 0x04
    6c6c:	1b 81       	ldd	r17, Y+3	; 0x03
    6c6e:	aa 81       	ldd	r26, Y+2	; 0x02
    6c70:	b9 81       	ldd	r27, Y+1	; 0x01
    6c72:	ce 0f       	add	r28, r30
    6c74:	d1 1d       	adc	r29, r1
    6c76:	0f b6       	in	r0, 0x3f	; 63
    6c78:	f8 94       	cli
    6c7a:	de bf       	out	0x3e, r29	; 62
    6c7c:	0f be       	out	0x3f, r0	; 63
    6c7e:	cd bf       	out	0x3d, r28	; 61
    6c80:	ed 01       	movw	r28, r26
    6c82:	08 95       	ret

00006c84 <strcmp>:
    6c84:	fb 01       	movw	r30, r22
    6c86:	dc 01       	movw	r26, r24
    6c88:	8d 91       	ld	r24, X+
    6c8a:	01 90       	ld	r0, Z+
    6c8c:	80 19       	sub	r24, r0
    6c8e:	01 10       	cpse	r0, r1
    6c90:	d9 f3       	breq	.-10     	; 0x6c88 <strcmp+0x4>
    6c92:	99 0b       	sbc	r25, r25
    6c94:	08 95       	ret

00006c96 <_exit>:
    6c96:	f8 94       	cli

00006c98 <__stop_program>:
    6c98:	ff cf       	rjmp	.-2      	; 0x6c98 <__stop_program>
